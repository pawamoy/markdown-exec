{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"],"fields":{"title":{"boost":1000.0},"text":{"boost":1.0},"tags":{"boost":1000000.0}}},"docs":[{"location":"","title":"Markdown Exec","text":"<p>Utilities to execute code blocks in Markdown files.</p> <p>For example, you write a Python code block that computes some HTML, and this HTML is injected in place of the code block.</p>"},{"location":"#installation","title":"Installation","text":"<p>With <code>pip</code>: <pre><code>pip install markdown-exec[ansi]\n</code></pre></p> <p>The <code>ansi</code> extra provides the necessary bits (<code>pygments-ansi-color</code> and a CSS file) to render ANSI colors in HTML code blocks. The CSS file is automatically added to MkDocs' <code>extra_css</code> when Markdown Exec is activated via <code>plugins</code> (see below).</p>"},{"location":"#configuration","title":"Configuration","text":"<p>This extension relies on the SuperFences extension of PyMdown Extensions.</p> <p>To allow execution of code blocks, configure a custom fence from Python:</p> <pre><code>from markdown import Markdown\nfrom markdown_exec import formatter, validator\n\nMarkdown(\n    extensions=[\"pymdownx.superfences\"],\n    extension_configs={\n        \"pymdownx.superfences\": {\n            \"custom_fences\": [\n                {\n                    \"name\": \"python\",\n                    \"class\": \"python\",\n                    \"validator\": validator,\n                    \"format\": formatter,\n                }\n                # ...one fence for each language we support:\n                # bash, console, md, markdown, py, python, pycon, sh, tree\n            ]\n        }\n    }\n)\n</code></pre> <p>...or in MkDocs configuration file, as a Markdown extension:</p> <pre><code># mkdocs.yml\nmarkdown_extensions:\n- pymdownx.superfences:\ncustom_fences:\n- name: python\nclass: python\nvalidator: !!python/name:markdown_exec.validator\nformat: !!python/name:markdown_exec.formatter\n# ...one fence for each language we support:\n# bash, console, md, markdown, py, python, pycon, sh, tree\n</code></pre> <p>...or in MkDocs configuration file, as a plugin:</p> <pre><code># mkdocs.yml\nplugins:\n- search\n- markdown-exec\n</code></pre> <p>We do recommend enabling Markdown Exec with the MkDocs plugin if you are using MkDocs: it will take care of adding relevant assets (CSS/JS) to the final site when needed. </p>"},{"location":"#usage","title":"Usage","text":"<p>You are now able to execute code blocks instead of displaying them:</p> <pre><code>```python exec=\"on\"\nprint(\"Hello Markdown!\")\n```\n</code></pre> <p>The <code>exec</code> option will be true for every possible value except <code>0</code>, <code>no</code>, <code>off</code> and <code>false</code> (case insensitive).</p> <p>Below you can see an example of running a bash script that is expected to return a non-zero exit code:</p> <pre><code>```bash exec=\"1\" source=\"tabbed-left\" returncode=\"2\"\ngrep extra_css README.md &amp;&amp; exit 2\n```\n</code></pre> <p>See usage for more details, and the gallery for more examples!</p>"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog and this project adheres to Semantic Versioning.</p>"},{"location":"changelog/#160-2023-04-18","title":"1.6.0 - 2023-04-18","text":"<p>Compare with 1.5.3</p>"},{"location":"changelog/#features","title":"Features","text":"<ul> <li>Add <code>idprefix</code> option allowing to change/remove HTML id/href prefixes (4d91463 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#153-2023-04-18","title":"1.5.3 - 2023-04-18","text":"<p>Compare with 1.5.2</p>"},{"location":"changelog/#code-refactoring","title":"Code Refactoring","text":"<ul> <li>Reuse Markdown configuration as declared in mkdocs.yml (afe091c by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#152-2023-04-18","title":"1.5.2 - 2023-04-18","text":"<p>Compare with 1.5.1</p>"},{"location":"changelog/#code-refactoring_1","title":"Code Refactoring","text":"<ul> <li>Reset counter in post build event (3bf80de by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#151-2023-04-17","title":"1.5.1 - 2023-04-17","text":"<p>Compare with 1.5.0</p>"},{"location":"changelog/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>Remove pycon output lines when rendering source as console (fb5a23d by Timoth\u00e9e Mazzucotelli).</li> <li>Fix nested rendering (a110d44 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#150-2023-04-17","title":"1.5.0 - 2023-04-17","text":"<p>Compare with 1.4.1</p>"},{"location":"changelog/#features_1","title":"Features","text":"<ul> <li>Update ToC with generated headings (5ea2263 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#141-2023-04-16","title":"1.4.1 - 2023-04-16","text":"<p>Compare with 1.4.0</p>"},{"location":"changelog/#bug-fixes_1","title":"Bug Fixes","text":"<ul> <li>Improve handling of errors within sessions (87ac5f3 by Timoth\u00e9e Mazzucotelli).</li> <li>Swallow non-extra parameters in run functions (f5d4fef by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#code-refactoring_2","title":"Code Refactoring","text":"<ul> <li>Simplify tree formatter signature (09d5427 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#140-2023-03-15","title":"1.4.0 - 2023-03-15","text":"<p>Compare with 1.3.0</p>"},{"location":"changelog/#features_2","title":"Features","text":"<ul> <li>Sessions: persist and reuse state for Python and Pycon code blocks (a8fef5e by Timoth\u00e9e Mazzucotelli). Issue #16</li> </ul>"},{"location":"changelog/#130-2023-02-18","title":"1.3.0 - 2023-02-18","text":"<p>Compare with 1.2.0</p>"},{"location":"changelog/#features_3","title":"Features","text":"<ul> <li>Support wrapping result with console source (268c82e by Timoth\u00e9e Mazzucotelli). Issue #13</li> </ul>"},{"location":"changelog/#code-refactoring_3","title":"Code Refactoring","text":"<ul> <li>Remove margin hack from Material source (beec237 by Timoth\u00e9e Mazzucotelli).</li> <li>Better support pycon syntax (22b51c6 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#120-2023-02-01","title":"1.2.0 - 2023-02-01","text":"<p>Compare with 1.1.0</p>"},{"location":"changelog/#features_4","title":"Features","text":"<ul> <li>Support ANSI code blocks (39719c5 by Timoth\u00e9e Mazzucotelli). Issue #11</li> </ul>"},{"location":"changelog/#110-2023-01-27","title":"1.1.0 - 2023-01-27","text":"<p>Compare with 1.0.0</p>"},{"location":"changelog/#features_5","title":"Features","text":"<ul> <li>Log details to help debugging errors (4c0228d by Timoth\u00e9e Mazzucotelli). Issue #12</li> <li>Allow expecting specific exit codes (620ec66 by Timoth\u00e9e Mazzucotelli). Issue #10</li> </ul>"},{"location":"changelog/#code-refactoring_4","title":"Code Refactoring","text":"<ul> <li>Formatters now only accept keyword arguments (0940ca9 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#100-2022-11-24","title":"1.0.0 - 2022-11-24","text":"<p>Compare with 0.7.4</p>"},{"location":"changelog/#features_6","title":"Features","text":"<ul> <li>Allow defining IDs on code blocks (for warnings) (0091167 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#code-refactoring_5","title":"Code Refactoring","text":"<ul> <li>Use base format everywhere (more flexible) (cefba70 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#074-2022-11-13","title":"0.7.4 - 2022-11-13","text":"<p>Compare with 0.7.3</p>"},{"location":"changelog/#bug-fixes_2","title":"Bug Fixes","text":"<ul> <li>Render source for non-HTML output (regression) (3028dcd by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#073-2022-11-13","title":"0.7.3 - 2022-11-13","text":"<p>Compare with 0.7.2</p>"},{"location":"changelog/#bug-fixes_3","title":"Bug Fixes","text":"<ul> <li>Don't wrap HTML in <code>p</code> tag (420d79d by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#072-2022-09-01","title":"0.7.2 - 2022-09-01","text":"<p>Compare with 0.7.1</p>"},{"location":"changelog/#bug-fixes_4","title":"Bug Fixes","text":"<ul> <li>Make <code>tree</code> formatter forward extra options (54996a9 by Timoth\u00e9e Mazzucotelli).</li> <li>Fix race condition issue (37d7f86 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#071-2022-08-28","title":"0.7.1 - 2022-08-28","text":"<p>Compare with 0.7.0</p>"},{"location":"changelog/#bug-fixes_5","title":"Bug Fixes","text":"<ul> <li>Allow printing non-string objects (ceaa482 by Timoth\u00e9e Mazzucotelli). Issue #7</li> </ul>"},{"location":"changelog/#070-2022-05-28","title":"0.7.0 - 2022-05-28","text":"<p>Compare with 0.6.0</p>"},{"location":"changelog/#features_7","title":"Features","text":"<ul> <li>Add ability to hide source lines (3cb1934 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#060-2022-05-21","title":"0.6.0 - 2022-05-21","text":"<p>Compare with 0.5.0</p>"},{"location":"changelog/#features_8","title":"Features","text":"<ul> <li>Add tree formatter (8096990 by Timoth\u00e9e Mazzucotelli).</li> <li>Handle code blocks execution errors and log warnings (34e16db by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#bug-fixes_6","title":"Bug Fixes","text":"<ul> <li>Fix Python execution to support nested scopes (74b9a95 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#050-2022-05-09","title":"0.5.0 - 2022-05-09","text":"<p>Compare with 0.4.0</p>"},{"location":"changelog/#features_9","title":"Features","text":"<ul> <li>Allow wrapping result in code block (37201e4 by Timoth\u00e9e Mazzucotelli).</li> <li>Add support for shell code blocks (f2b4b67 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#code-refactoring_6","title":"Code Refactoring","text":"<ul> <li>Fetch plugin languages from dict (de8309e by Timoth\u00e9e Mazzucotelli).</li> <li>Add reusable base formatter (c265bee by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#040-2022-05-09","title":"0.4.0 - 2022-05-09","text":"<p>Compare with 0.3.1</p>"},{"location":"changelog/#features_10","title":"Features","text":"<ul> <li>Add literate Markdown support (8d3ed7e by Timoth\u00e9e Mazzucotelli).</li> <li>Add <code>material-block</code> style to show source (ff10ee1 by Timoth\u00e9e Mazzucotelli).</li> <li>Support up to 8 levels of exec code block nesting (bfde808 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#031-2022-05-07","title":"0.3.1 - 2022-05-07","text":"<p>Compare with 0.3.0</p>"},{"location":"changelog/#bug-fixes_7","title":"Bug Fixes","text":"<ul> <li>Actually prevent HTML re-rendering (4374852 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#030-2022-05-01","title":"0.3.0 - 2022-05-01","text":"<p>Compare with 0.2.0</p>"},{"location":"changelog/#features_11","title":"Features","text":"<ul> <li>Support <code>pycon</code> code blocks (2c86394 by Timoth\u00e9e Mazzucotelli).</li> <li>Add <code>console</code> source integration option (62dfd74 by Timoth\u00e9e Mazzucotelli).</li> <li>Provide a MkDocs plugin for easier setup (5fce814 by Timoth\u00e9e Mazzucotelli).</li> <li>Support changing tabs titles (d150596 by Timoth\u00e9e Mazzucotelli).</li> <li>Allow using <code>print</code> in code blocks (7c124fd by Timoth\u00e9e Mazzucotelli).</li> <li>Allow passing extra opts like title to source code blocks (bb3252a by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#code-refactoring_7","title":"Code Refactoring","text":"<ul> <li>Split Python formatter to allow reuse (fc56702 by Timoth\u00e9e Mazzucotelli).</li> <li>Setup a more robust Markdown converter (395f4c4 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#020-2022-04-18","title":"0.2.0 - 2022-04-18","text":"<p>Compare with 0.1.0</p>"},{"location":"changelog/#features_12","title":"Features","text":"<ul> <li>Add ability to render using tabs (91a95ae by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#010-2022-02-19","title":"0.1.0 - 2022-02-19","text":"<p>Compare with first commit</p>"},{"location":"changelog/#features_13","title":"Features","text":"<ul> <li>Implement execution of code blocks (41c8d81 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"code_of_conduct/","title":"Contributor Covenant Code of Conduct","text":""},{"location":"code_of_conduct/#our-pledge","title":"Our Pledge","text":"<p>We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, or sexual identity and orientation.</p> <p>We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.</p>"},{"location":"code_of_conduct/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to a positive environment for our community include:</p> <ul> <li>Demonstrating empathy and kindness toward other people</li> <li>Being respectful of differing opinions, viewpoints, and experiences</li> <li>Giving and gracefully accepting constructive feedback</li> <li>Accepting responsibility and apologizing to those affected by our mistakes,   and learning from the experience</li> <li>Focusing on what is best not just for us as individuals, but for the overall   community</li> </ul> <p>Examples of unacceptable behavior include:</p> <ul> <li>The use of sexualized language or imagery, and sexual attention or advances of   any kind</li> <li>Trolling, insulting or derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or email address,   without their explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a   professional setting</li> </ul>"},{"location":"code_of_conduct/#enforcement-responsibilities","title":"Enforcement Responsibilities","text":"<p>Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.</p> <p>Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.</p>"},{"location":"code_of_conduct/#scope","title":"Scope","text":"<p>This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.</p>"},{"location":"code_of_conduct/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at pawamoy@pm.me. All complaints will be reviewed and investigated promptly and fairly.</p> <p>All community leaders are obligated to respect the privacy and security of the reporter of any incident.</p>"},{"location":"code_of_conduct/#enforcement-guidelines","title":"Enforcement Guidelines","text":"<p>Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:</p>"},{"location":"code_of_conduct/#1-correction","title":"1. Correction","text":"<p>Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.</p> <p>Consequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.</p>"},{"location":"code_of_conduct/#2-warning","title":"2. Warning","text":"<p>Community Impact: A violation through a single incident or series of actions.</p> <p>Consequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.</p>"},{"location":"code_of_conduct/#3-temporary-ban","title":"3. Temporary Ban","text":"<p>Community Impact: A serious violation of community standards, including sustained inappropriate behavior.</p> <p>Consequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.</p>"},{"location":"code_of_conduct/#4-permanent-ban","title":"4. Permanent Ban","text":"<p>Community Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals.</p> <p>Consequence: A permanent ban from any sort of public interaction within the community.</p>"},{"location":"code_of_conduct/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 2.1, available at https://www.contributor-covenant.org/version/2/1/code_of_conduct.html.</p> <p>Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder.</p> <p>For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations.</p>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p>"},{"location":"contributing/#environment-setup","title":"Environment setup","text":"<p>Nothing easier!</p> <p>Fork and clone the repository, then:</p> <pre><code>cd markdown-exec\nmake setup\n</code></pre> <p>Note</p> <p> If it fails for some reason, you'll need to install PDM manually.</p> <p>You can install it with:</p> <pre><code>python3 -m pip install --user pipx\npipx install pdm\n</code></pre> <p>Now you can try running <code>make setup</code> again, or simply <code>pdm install</code>.</p> <p>You now have the dependencies installed.</p> <p>Run <code>make help</code> to see all the available actions!</p>"},{"location":"contributing/#tasks","title":"Tasks","text":"<p>This project uses duty to run tasks. A Makefile is also provided. The Makefile will try to run certain tasks on multiple Python versions. If for some reason you don't want to run the task on multiple Python versions, you can do one of the following:</p> <ol> <li><code>export PYTHON_VERSIONS=</code>: this will run the task    with only the current Python version</li> <li>run the task directly with <code>pdm run duty TASK</code></li> </ol> <p>The Makefile detects if a virtual environment is activated, so <code>make</code> will work the same with the virtualenv activated or not.</p>"},{"location":"contributing/#development","title":"Development","text":"<p>As usual:</p> <ol> <li>create a new branch: <code>git checkout -b feature-or-bugfix-name</code></li> <li>edit the code and/or the documentation</li> </ol> <p>Before committing:</p> <ol> <li>run <code>make format</code> to auto-format the code</li> <li>run <code>make check</code> to check everything (fix any warning)</li> <li>run <code>make test</code> to run the tests (fix any issue)</li> <li>if you updated the documentation or the project dependencies:<ol> <li>run <code>make docs</code></li> <li>go to http://localhost:8000 and check that everything looks good</li> </ol> </li> <li>follow our commit message convention</li> </ol> <p>If you are unsure about how to fix or ignore a warning, just let the continuous integration fail, and we will help you during review.</p> <p>Don't bother updating the changelog, we will take care of this.</p>"},{"location":"contributing/#commit-message-convention","title":"Commit message convention","text":"<p>Commit messages must follow our convention based on the Angular style or the Karma convention:</p> <pre><code>&lt;type&gt;[(scope)]: Subject\n\n[Body]\n</code></pre> <p>Subject and body must be valid Markdown. Subject must have proper casing (uppercase for first letter if it makes sense), but no dot at the end, and no punctuation in general.</p> <p>Scope and body are optional. Type can be:</p> <ul> <li><code>build</code>: About packaging, building wheels, etc.</li> <li><code>chore</code>: About packaging or repo/files management.</li> <li><code>ci</code>: About Continuous Integration.</li> <li><code>deps</code>: Dependencies update.</li> <li><code>docs</code>: About documentation.</li> <li><code>feat</code>: New feature.</li> <li><code>fix</code>: Bug fix.</li> <li><code>perf</code>: About performance.</li> <li><code>refactor</code>: Changes that are not features or bug fixes.</li> <li><code>style</code>: A change in code style/format.</li> <li><code>tests</code>: About tests.</li> </ul> <p>If you write a body, please add trailers at the end (for example issues and PR references, or co-authors), without relying on GitHub's flavored Markdown:</p> <pre><code>Body.\n\nIssue #10: https://github.com/namespace/project/issues/10\nRelated to PR namespace/other-project#15: https://github.com/namespace/other-project/pull/15\n</code></pre> <p>These \"trailers\" must appear at the end of the body, without any blank lines between them. The trailer title can contain any character except colons <code>:</code>. We expect a full URI for each trailer, not just GitHub autolinks (for example, full GitHub URLs for commits and issues, not the hash or the #issue-number).</p> <p>We do not enforce a line length on commit messages summary and body, but please avoid very long summaries, and very long lines in the body, unless they are part of code blocks that must not be wrapped.</p>"},{"location":"contributing/#pull-requests-guidelines","title":"Pull requests guidelines","text":"<p>Link to any related issue in the Pull Request message.</p> <p>During the review, we recommend using fixups:</p> <pre><code># SHA is the SHA of the commit you want to fix\ngit commit --fixup=SHA\n</code></pre> <p>Once all the changes are approved, you can squash your commits:</p> <pre><code>git rebase -i --autosquash master\n</code></pre> <p>And force-push:</p> <pre><code>git push -f\n</code></pre> <p>If this seems all too complicated, you can push or force-push each new commit, and we will squash them ourselves if needed, before merging.</p>"},{"location":"credits/","title":"Credits","text":"<p><p>These projects were used to build <code>markdown-exec</code>. Thank you!</p> <p><code>python</code> | <code>pdm</code> | <code>copier-pdm</code></p> </p>"},{"location":"credits/#exec-1--runtime-dependencies","title":"Runtime dependencies","text":"Project Summary Version (accepted) Version (last resolved) License <code>importlib-metadata</code> Read metadata from Python packages <code>&gt;=4.4; python_version &lt; \"3.10\"</code> <code>6.6.0</code> Apache Software License <code>markdown</code> Python implementation of Markdown. <code>&gt;=3.2</code> <code>3.3.7</code> BSD License <code>pygments</code> Pygments is a syntax highlighting package written in Python. <code>!=2.7.3</code> <code>2.15.1</code> BSD-2-Clause <code>pygments-ansi-color</code> UNKNOWN <code>0.2.0</code> Apache Software License <code>pymdown-extensions</code> Extension pack for Python Markdown. <code>&gt;=9</code> <code>9.11</code> MIT License <code>pyyaml</code> YAML parser and emitter for Python <code>6.0</code> MIT <code>zipp</code> Backport of pathlib-compatible object wrapper for zip files <code>&gt;=0.5</code> <code>3.15.0</code> MIT License"},{"location":"credits/#exec-1--development-dependencies","title":"Development dependencies","text":"Project Summary Version (accepted) Version (last resolved) License <code>aiohttp</code> Async http client/server framework (asyncio) <code>&gt;=3.8.1</code> <code>3.8.4</code> Apache 2 <code>aiosignal</code> aiosignal: a list of registered asynchronous callbacks <code>&gt;=1.1.2</code> <code>1.3.1</code> Apache 2.0 <code>ansimarkup</code> Produce colored terminal text with an xml-like markup <code>~=1.4</code> <code>1.5.0</code> Revised BSD License <code>async-timeout</code> Timeout context manager for asyncio programs <code>&lt;5.0,&gt;=4.0.0a3</code> <code>4.0.2</code> Apache 2 <code>attrs</code> Classes Without Boilerplate <code>&gt;=17.3.0</code> <code>23.1.0</code> MIT License <code>babel</code> Internationalization utilities <code>&gt;=2.10.3</code> <code>2.12.1</code> BSD <code>beautifulsoup4</code> Screen-scraping library <code>4.12.2</code> MIT License <code>black</code> The uncompromising code formatter. <code>&gt;=23.1</code> <code>23.3.0</code> MIT <code>blacken-docs</code> Run Black on Python code blocks in documentation files. <code>&gt;=1.13</code> <code>1.13.0</code> MIT <code>cached-property</code> A decorator for caching properties in classes. <code>&gt;=1.5; python_version &lt; \"3.8\"</code> <code>1.5.2</code> ? <code>certifi</code> Python package for providing Mozilla's CA Bundle. <code>&gt;=2017.4.17</code> <code>2022.12.7</code> MPL-2.0 <code>charset-normalizer</code> The Real First Universal Charset Detector. Open, modern and actively maintained alternative to Chardet. <code>&lt;4,&gt;=2</code> <code>3.1.0</code> MIT <code>click</code> Composable command line interface toolkit <code>&gt;=8.0.0</code> <code>8.1.3</code> BSD-3-Clause <code>colorama</code> Cross-platform colored terminal text. <code>; platform_system == \"Windows\"</code> <code>0.4.6</code> BSD License <code>contourpy</code> Python library for calculating contours of 2D quadrilateral grids <code>&gt;=1.0.1</code> <code>1.0.7</code> BSD-3-Clause <code>coverage</code> Code coverage measurement for Python <code>[toml]&gt;=5.2.1</code> <code>7.2.3</code> Apache-2.0 <code>csscompressor</code> A python port of YUI CSS Compressor <code>&gt;=0.9.5</code> <code>0.9.5</code> BSD <code>cssselect</code> cssselect parses CSS3 Selectors and translates them to XPath 1.0 <code>&gt;=1.2.0</code> <code>1.2.0</code> BSD <code>cycler</code> Composable style cycles <code>&gt;=0.10</code> <code>0.11.0</code> BSD <code>diagrams</code> Diagram as Code <code>&gt;=0.21.1; python_version &gt;= '3.8' and python_version &lt; '3.11'</code> <code>0.23.3</code> MIT <code>dparse</code> A parser for Python dependency files <code>&gt;=0.6.2</code> <code>0.6.2</code> MIT license <code>duty</code> A simple task runner. <code>&gt;=0.10</code> <code>0.11.0</code> ISC <code>exceptiongroup</code> Backport of PEP 654 (exception groups) <code>&gt;=1.0.0rc8; python_version &lt; \"3.11\"</code> <code>1.1.1</code> MIT License <code>execnet</code> execnet: rapid multi-Python deployment <code>&gt;=1.1</code> <code>1.9.0</code> MIT <code>failprint</code> Run a command, print its output only if it fails. <code>&gt;=0.11</code> <code>0.11.1</code> ISC <code>fonttools</code> Tools to manipulate font files <code>&gt;=4.22.0</code> <code>4.39.3</code> MIT <code>frozenlist</code> A list-like structure which implements collections.abc.MutableSequence <code>&gt;=1.1.1</code> <code>1.3.3</code> Apache 2 <code>ghp-import</code> Copy your docs directly to the gh-pages branch. <code>&gt;=1.0</code> <code>2.1.0</code> Apache Software License <code>git-changelog</code> Automatic Changelog generator using Jinja2 templates. <code>&gt;=1.0</code> <code>1.0.0</code> ISC <code>gitdb</code> Git Object Database <code>&lt;5,&gt;=4.0.1</code> <code>4.0.10</code> BSD License <code>gitpython</code> GitPython is a Python library used to interact with Git repositories <code>3.1.31</code> BSD <code>graphviz</code> Simple Python interface for Graphviz <code>&lt;0.21.0,&gt;=0.13.2</code> <code>0.20.1</code> MIT <code>griffe</code> Signatures for entire Python programs. Extract the structure, the frame, the skeleton of your project, to generate API documentation or find breaking changes in your API. <code>&gt;=0.25</code> <code>0.27.1</code> ISC <code>htmlmin2</code> An HTML Minifier <code>&gt;=0.1.13</code> <code>0.1.13</code> BSD <code>idna</code> Internationalized Domain Names in Applications (IDNA) <code>&lt;4,&gt;=2.5</code> <code>3.4</code> BSD License <code>importlib-metadata</code> Read metadata from Python packages <code>; python_version &lt; \"3.8\"</code> <code>6.6.0</code> Apache Software License <code>importlib-resources</code> Read resources from Python packages <code>&gt;=3.2.0; python_version &lt; \"3.10\"</code> <code>5.12.0</code> ? <code>iniconfig</code> brain-dead simple config-ini parsing <code>2.0.0</code> MIT License <code>jinja2</code> A very fast and expressive template engine. <code>&lt;4.0,&gt;=2.10</code> <code>3.1.2</code> BSD-3-Clause <code>jsmin</code> JavaScript minifier. <code>&gt;=3.0.1</code> <code>3.0.1</code> MIT License <code>kiwisolver</code> A fast implementation of the Cassowary constraint solver <code>&gt;=1.0.1</code> <code>1.4.4</code> BSD License <code>linkify-it-py</code> Links recognition library with FULL unicode support. <code>&lt;3,&gt;=1</code> <code>2.0.0</code> MIT <code>lxml</code> Powerful and Pythonic XML processing library combining libxml2/libxslt with the ElementTree API. <code>&gt;=4.6</code> <code>4.9.2</code> BSD-3-Clause <code>markdown</code> Python implementation of Markdown. <code>&lt;4.0.0,&gt;=3.3.3</code> <code>3.3.7</code> BSD License <code>markdown-callouts</code> Markdown extension: a classier syntax for admonitions <code>&gt;=0.2; python_version &gt;= '3.8' and python_version &lt; '3.11'</code> <code>0.3.0</code> MIT <code>markdown-it-py</code> Python port of markdown-it. Markdown parsing, done right! <code>&lt;3.0.0,&gt;=2.2.0</code> <code>2.2.0</code> MIT License <code>markdown2</code> A fast and complete Python implementation of Markdown <code>&gt;=2.4.3</code> <code>2.4.8</code> MIT <code>markupsafe</code> Safely add untrusted strings to HTML/XML markup. <code>&gt;=2.0</code> <code>2.1.2</code> BSD-3-Clause <code>matplotlib</code> Python plotting package <code>&gt;=3.5.2; python_version &gt;= '3.8' and python_version &lt; '3.11'</code> <code>3.7.1</code> PSF <code>mdit-py-plugins</code> Collection of plugins for markdown-it-py <code>0.3.5</code> MIT License <code>mergedeep</code> A deep merge function for \ud83d\udc0d. <code>&gt;=1.3.4</code> <code>1.3.4</code> MIT License <code>mkdocs</code> Project documentation with Markdown. <code>&gt;=1.3; python_version &gt;= '3.8' and python_version &lt; '3.11'</code> <code>1.4.2</code> BSD License <code>mkdocs-coverage</code> MkDocs plugin to integrate your coverage HTML report into your site. <code>&gt;=0.2; python_version &gt;= '3.8' and python_version &lt; '3.11'</code> <code>0.2.7</code> ISC <code>mkdocs-gen-files</code> MkDocs plugin to programmatically generate documentation pages during the build <code>&gt;=0.3; python_version &gt;= '3.8' and python_version &lt; '3.11'</code> <code>0.4.0</code> MIT <code>mkdocs-git-committers-plugin-2</code> An MkDocs plugin to create a list of contributors on the page <code>&gt;=1.1; python_version &gt;= '3.8' and python_version &lt; '3.11'</code> <code>1.1.2</code> MIT <code>mkdocs-literate-nav</code> MkDocs plugin to specify the navigation in Markdown instead of YAML <code>&gt;=0.4; python_version &gt;= '3.8' and python_version &lt; '3.11'</code> <code>0.6.0</code> MIT License <code>mkdocs-material</code> Documentation that simply works <code>&gt;=7.3; python_version &gt;= '3.8' and python_version &lt; '3.11'</code> <code>9.1.8+insiders.4.32.6</code> MIT License <code>mkdocs-material-extensions</code> Extension pack for Python Markdown and MkDocs Material. <code>&gt;=1.1</code> <code>1.1.1</code> MIT License <code>mkdocs-minify-plugin</code> An MkDocs plugin to minify HTML, JS or CSS files prior to being written to disk <code>&gt;=0.6; python_version &gt;= '3.8' and python_version &lt; '3.11'</code> <code>0.6.4</code> MIT <code>mkdocstrings</code> Automatic documentation from sources, for MkDocs. <code>[python]&gt;=0.18; python_version &gt;= '3.8' and python_version &lt; '3.11'</code> <code>0.21.2</code> ISC <code>mkdocstrings-python</code> A Python handler for mkdocstrings. <code>&gt;=0.5.2</code> <code>0.9.0</code> ISC <code>msgpack</code> MessagePack serializer <code>&gt;=1.0.3</code> <code>1.0.5</code> Apache 2.0 <code>multidict</code> multidict implementation <code>&lt;7.0,&gt;=4.5</code> <code>6.0.4</code> Apache 2 <code>mypy</code> Optional static typing for Python <code>&gt;=0.910</code> <code>1.2.0</code> MIT License <code>mypy-extensions</code> Type system extensions for programs checked with the mypy type checker. <code>&gt;=0.4.3</code> <code>1.0.0</code> MIT License <code>numpy</code> Fundamental package for array computing in Python <code>&gt;=1.23; python_version &gt;= '3.8' and python_version &lt; '3.11'</code> <code>1.24.3</code> BSD-3-Clause <code>packaging</code> Core utilities for Python packages <code>&gt;=22.0</code> <code>23.1</code> BSD License <code>paginate</code> Divides large result sets into pages for easier browsing <code>&gt;=0.5.6</code> <code>0.5.6</code> MIT <code>pathspec</code> Utility library for gitignore style pattern matching of file paths. <code>&gt;=0.9.0</code> <code>0.11.1</code> Mozilla Public License 2.0 (MPL 2.0) <code>pillow</code> Python Imaging Library (Fork) <code>&gt;=6.2.0</code> <code>9.5.0</code> HPND <code>pipdeptree</code> Command line utility to show dependency tree of packages. <code>&gt;=2.6.0; python_version &gt;= '3.8' and python_version &lt; '3.11'</code> <code>2.7.0</code> MIT License <code>platformdirs</code> A small Python package for determining appropriate platform-specific dirs, e.g. a \"user data dir\". <code>&gt;=2</code> <code>3.4.0</code> MIT License <code>pluggy</code> plugin and hook calling mechanisms for python <code>&lt;2.0,&gt;=0.12</code> <code>1.0.0</code> MIT <code>ptyprocess</code> Run a subprocess in a pseudo terminal <code>~=0.6; sys_platform != \"win32\"</code> <code>0.7.0</code> ISC License (ISCL) <code>pydeps</code> Display module dependencies <code>&gt;=1.10.12; python_version &gt;= '3.8' and python_version &lt; '3.11'</code> <code>1.12.2</code> BSD <code>pygments</code> Pygments is a syntax highlighting package written in Python. <code>&gt;=2.14</code> <code>2.15.1</code> BSD-2-Clause <code>pymdown-extensions</code> Extension pack for Python Markdown. <code>&gt;=9.9.1</code> <code>9.11</code> MIT License <code>pyparsing</code> pyparsing module - Classes and methods to define and execute parsing grammars <code>&gt;=2.3.1</code> <code>3.0.9</code> MIT License <code>pyquery</code> A jquery-like library for python <code>&gt;=1.2</code> <code>2.0.0</code> BSD <code>pytermgui</code> Python TUI framework with mouse support, modular widget system, customizable and rapid terminal markup language and more! <code>&gt;=6.3; python_version &gt;= '3.8' and python_version &lt; '3.11'</code> <code>7.3.0</code> MIT <code>pytest</code> pytest: simple powerful testing with Python <code>&gt;=6.2</code> <code>7.3.1</code> MIT <code>pytest-cov</code> Pytest plugin for measuring coverage. <code>&gt;=3.0</code> <code>4.0.0</code> MIT <code>pytest-randomly</code> Pytest plugin to randomly order tests and control random.seed. <code>&gt;=3.10</code> <code>3.12.0</code> MIT <code>pytest-xdist</code> pytest xdist plugin for distributed testing, most importantly across multiple CPUs <code>&gt;=2.4</code> <code>3.2.1</code> MIT <code>python-dateutil</code> Extensions to the standard Python datetime module <code>&gt;=2.7</code> <code>2.8.2</code> Dual License <code>pytz</code> World timezone definitions, modern and historical <code>&gt;=2015.7; python_version &lt; \"3.9\"</code> <code>2023.3</code> ? <code>pyyaml</code> YAML parser and emitter for Python <code>&gt;=5.1</code> <code>6.0</code> MIT <code>pyyaml-env-tag</code> A custom YAML tag for referencing environment variables in YAML files. <code>&gt;=0.1</code> <code>0.1</code> MIT License <code>readtime</code> Calculates the time some text takes the average human to read, based on Medium's read time forumula <code>&gt;=2.0</code> <code>2.0.0</code> BSD <code>regex</code> Alternative regular expression module, to replace re. <code>&gt;=2022.4.24</code> <code>2023.3.23</code> Apache Software License <code>requests</code> Python HTTP for Humans. <code>2.29.0</code> Apache 2.0 <code>rich</code> Render rich text, tables, progress bars, syntax highlighting, markdown and more to the terminal <code>&gt;=12.3.0; python_version &gt;= '3.8' and python_version &lt; '3.11'</code> <code>13.3.4</code> MIT <code>ruamel-yaml</code> ruamel.yaml is a YAML parser/emitter that supports roundtrip preservation of comments, seq/map flow style, and map key order <code>&gt;=0.17.21</code> <code>0.17.21</code> MIT license <code>ruamel-yaml-clib</code> C version of reader, parser and emitter for ruamel.yaml derived from libyaml <code>&gt;=0.2.6; platform_python_implementation == \"CPython\" and python_version &lt; \"3.11\"</code> <code>0.2.7</code> MIT <code>ruff</code> An extremely fast Python linter, written in Rust. <code>&gt;=0.0.246</code> <code>0.0.263</code> MIT <code>safety</code> Checks installed dependencies for known vulnerabilities and licenses. <code>&gt;=2</code> <code>2.3.4</code> MIT license <code>semver</code> Python helper for Semantic Versioning (http://semver.org/) <code>~=2.13</code> <code>2.13.0</code> BSD <code>setuptools</code> Easily download, build, install, upgrade, and uninstall Python packages <code>&gt;=19.3</code> <code>67.7.2</code> MIT License <code>six</code> Python 2 and 3 compatibility utilities <code>&gt;=1.5</code> <code>1.16.0</code> MIT <code>smmap</code> A pure Python implementation of a sliding window memory map manager <code>&lt;6,&gt;=3.0.1</code> <code>5.0.0</code> BSD <code>soupsieve</code> A modern CSS selector implementation for Beautiful Soup. <code>&gt;1.2</code> <code>2.4.1</code> MIT License <code>stdlib-list</code> A list of Python Standard Libraries (2.6-7, 3.2-9). <code>0.8.0</code> MIT <code>textual</code> Modern Text User Interface framework <code>[dev]; python_version &gt;= '3.8' and python_version &lt; '3.11'</code> <code>0.21.0</code> MIT <code>toml</code> Python Library for Tom's Obvious, Minimal Language <code>&gt;=0.10; python_version &gt;= '3.8' and python_version &lt; '3.11'</code> <code>0.10.2</code> MIT <code>tomli</code> A lil' TOML parser <code>&gt;=1.1.0; python_version &lt; \"3.11\"</code> <code>2.0.1</code> MIT License <code>typed-ast</code> a fork of Python 2 and 3 ast modules with type comment support <code>&gt;=1.4.2; python_version &lt; \"3.8\" and implementation_name == \"cpython\"</code> <code>1.5.4</code> Apache License 2.0 <code>types-markdown</code> Typing stubs for Markdown <code>&gt;=3.3</code> <code>3.4.2.7</code> Apache-2.0 license <code>types-pyyaml</code> Typing stubs for PyYAML <code>&gt;=6.0</code> <code>6.0.12.9</code> Apache-2.0 license <code>types-toml</code> Typing stubs for toml <code>&gt;=0.10</code> <code>0.10.8.6</code> Apache-2.0 license <code>typing-extensions</code> Backported and Experimental Type Hints for Python 3.7+ <code>&gt;=3.10.0.0; python_version &lt; \"3.10\"</code> <code>4.5.0</code> Python Software Foundation License <code>uc-micro-py</code> Micro subset of unicode data files for linkify-it-py projects. <code>1.0.1</code> MIT <code>urllib3</code> HTTP library with thread-safe connection pooling, file post, and more. <code>&lt;1.27,&gt;=1.21.1</code> <code>1.26.15</code> MIT <code>watchdog</code> Filesystem events monitoring <code>&gt;=2.0</code> <code>3.0.0</code> Apache License 2.0 <code>yarl</code> Yet another URL library <code>&lt;2.0,&gt;=1.0</code> <code>1.9.2</code> Apache-2.0 <code>zipp</code> Backport of pathlib-compatible object wrapper for zip files <code>&gt;=0.5</code> <code>3.15.0</code> MIT License <p>More credits from the author</p>"},{"location":"gallery/","title":"Gallery","text":"<p>Welcome to our gallery of examples!</p>"},{"location":"gallery/#diagrams-cloudsystem-architecture","title":"Diagrams (cloud/system architecture)","text":"<p>Diagrams offers a nice way of building diagrams. It also bundles a number of images used to illustrate objects and concepts so you can build good-looking diagrams. By default, Diagrams tries to write the result on disk, so we prevent that by patching its <code>render</code> method, and by ignoring the <code>FileNotFoundError</code> that ensues. Then we use its internal <code>dot</code> object and its <code>pipe</code> method to store the diagram in a variable, as base64 encoded PNG data. Finally we output an HTML image with the base64 data. Using SVG is not possible here since Diagrams embeds actual, smaller PNG files in the result, files which are not automatically added to the final site.</p> ResultSource <p> </p> Diagrams<pre><code>from base64 import b64encode\nfrom contextlib import suppress\n\nfrom diagrams import Diagram\nfrom diagrams.k8s.clusterconfig import HPA\nfrom diagrams.k8s.compute import Deployment, Pod, ReplicaSet\nfrom diagrams.k8s.network import Ingress, Service\n\nwith suppress(FileNotFoundError):\n    with Diagram(\"Exposed Pod with 3 Replicas\", show=False) as diagram:\n        diagram.render = lambda: None\n        net = Ingress(\"domain.com\") &gt;&gt; Service(\"svc\")\n        net &gt;&gt; [Pod(\"pod1\"), Pod(\"pod2\"), Pod(\"pod3\")] &lt;&lt; ReplicaSet(\"rs\") &lt;&lt; Deployment(\"dp\") &lt;&lt; HPA(\"hpa\")\n        png = b64encode(diagram.dot.pipe(format=\"png\")).decode()\n\nprint(f'&lt;img src=\"data:image/png;base64, {png}\"/&gt;')\n</code></pre>"},{"location":"gallery/#python-dependency-tree","title":"Python dependency tree","text":"<p>pipdeptree is able to output a Mermaid diagram of your Python dependency tree. In this example we change the direction of the graph from top-down to left-right, and remove local version identifiers from our own package.</p> ResultSource <pre><code>flowchart LR\n    classDef missing stroke-dasharray: 5\n    editables[\"editables\\n0.3\"]\n    markdown-exec[\"markdown-exec\\n0.1.dev136+g180fd2a.d20230426.editable\"]\n    markdown[\"Markdown\\n3.3.7\"]\n    pymdown-extensions[\"pymdown-extensions\\n9.11\"]\n    pyyaml[\"PyYAML\\n6.0\"]\n    markdown-exec -- \"&gt;=9\" --&gt; pymdown-extensions\n    markdown-exec -- \"any\" --&gt; editables\n    pymdown-extensions -- \"&gt;=3.2\" --&gt; markdown\n    pymdown-extensions -- \"any\" --&gt; pyyaml\n\n</code></pre> pipdeptree mermaid diagram<pre><code>```bash exec=\"1\" result=\"mermaid\"\npipdeptree -p markdown-exec --mermaid 2&gt;/dev/null |\n    sed 's/flowchart TD/flowchart LR/' |\n    sed 's/\\.dev.+\"\\]$/\"]/;s/\\+d.*\"\\]$/\"]/'\n```\n</code></pre> <p>Another example with more dependencies and top-down direction:</p> ResultSource <pre><code>flowchart TD\n    classDef missing stroke-dasharray: 5\n    click_0[\"click\\n8.1.3\"]\n    colorama[\"colorama\\n0.4.6\"]\n    ghp-import[\"ghp-import\\n2.1.0\"]\n    griffe[\"griffe\\n0.27.1\"]\n    jinja2[\"Jinja2\\n3.1.2\"]\n    markdown[\"Markdown\\n3.3.7\"]\n    markupsafe[\"MarkupSafe\\n2.1.2\"]\n    mergedeep[\"mergedeep\\n1.3.4\"]\n    mkdocs-autorefs[\"mkdocs-autorefs\\n0.4.1\"]\n    mkdocs[\"mkdocs\\n1.4.2\"]\n    mkdocstrings-python[\"mkdocstrings-python\\n0.9.0\"]\n    mkdocstrings[\"mkdocstrings\\n0.21.2\"]\n    packaging[\"packaging\\n23.1\"]\n    pymdown-extensions[\"pymdown-extensions\\n9.11\"]\n    python-dateutil[\"python-dateutil\\n2.8.2\"]\n    pyyaml-env-tag[\"pyyaml-env-tag\\n0.1\"]\n    pyyaml[\"PyYAML\\n6.0\"]\n    six[\"six\\n1.16.0\"]\n    watchdog[\"watchdog\\n3.0.0\"]\n    ghp-import -- \"&gt;=2.8.1\" --&gt; python-dateutil\n    griffe -- \"&gt;=0.4\" --&gt; colorama\n    jinja2 -- \"&gt;=2.0\" --&gt; markupsafe\n    mkdocs -- \"&gt;=0.1\" --&gt; pyyaml-env-tag\n    mkdocs -- \"&gt;=1.0\" --&gt; ghp-import\n    mkdocs -- \"&gt;=1.3.4\" --&gt; mergedeep\n    mkdocs -- \"&gt;=2.0\" --&gt; watchdog\n    mkdocs -- \"&gt;=2.11.1\" --&gt; jinja2\n    mkdocs -- \"&gt;=20.5\" --&gt; packaging\n    mkdocs -- \"&gt;=3.2.1,&lt;3.4\" --&gt; markdown\n    mkdocs -- \"&gt;=5.1\" --&gt; pyyaml\n    mkdocs -- \"&gt;=7.0\" --&gt; click_0\n    mkdocs-autorefs -- \"&gt;=1.1\" --&gt; mkdocs\n    mkdocs-autorefs -- \"&gt;=3.3\" --&gt; markdown\n    mkdocstrings -- \"&gt;=0.3.1\" --&gt; mkdocs-autorefs\n    mkdocstrings -- \"&gt;=1.1\" --&gt; markupsafe\n    mkdocstrings -- \"&gt;=1.2\" --&gt; mkdocs\n    mkdocstrings -- \"&gt;=2.11.1\" --&gt; jinja2\n    mkdocstrings -- \"&gt;=3.3\" --&gt; markdown\n    mkdocstrings -- \"&gt;=6.3\" --&gt; pymdown-extensions\n    mkdocstrings-python -- \"&gt;=0.20\" --&gt; mkdocstrings\n    mkdocstrings-python -- \"&gt;=0.24\" --&gt; griffe\n    pymdown-extensions -- \"&gt;=3.2\" --&gt; markdown\n    pymdown-extensions -- \"any\" --&gt; pyyaml\n    python-dateutil -- \"&gt;=1.5\" --&gt; six\n    pyyaml-env-tag -- \"any\" --&gt; pyyaml\n\n</code></pre> pipdeptree mermaid diagram<pre><code>```bash exec=\"1\" result=\"mermaid\"\npipdeptree -p mkdocstrings-python --mermaid 2&gt;/dev/null\n```\n</code></pre>"},{"location":"gallery/#python-modules-inter-dependencies","title":"Python modules inter-dependencies","text":"<p>This example uses pydeps to build a graph of interdependencies of your project's modules. Data is built and stored in a pydeps data structure, then translated to <code>dot</code> source, then rendered to SVG with Graphviz. In this example we also add links to the code reference in related nodes. Try clicking on the <code>markdown_exec</code> nodes!</p> <p>Note</p> <p>pydeps wasn't designed to be used in such a programatic way, so the code is a bit convoluted, but you could make a function of it, put it in an importable script/module, and reuse it cleanly in your executed code blocks.</p> ResultSource <p>Gjinja2jinja2markdown_exec.mkdocs_pluginmarkdown_exec.mkdocs_pluginjinja2-&gt;markdown_exec_mkdocs_pluginmkdocs_pluginsmkdocs.pluginsjinja2-&gt;mkdocs_pluginsmkdocs_structure_filesmkdocs.structure.filesjinja2-&gt;mkdocs_structure_filesmarkdownmarkdownmarkdown_execmarkdown_execmarkdown-&gt;markdown_execmarkdown_exec.formatters.basemarkdown_exec.formatters.basemarkdown-&gt;markdown_exec_formatters_basemarkdown_exec_formatters_pyodidemarkdown_exec.formatters.pyodidemarkdown-&gt;markdown_exec_formatters_pyodidemarkdown_exec.formatters.treemarkdown_exec.formatters.treemarkdown-&gt;markdown_exec_formatters_treemarkdown_exec_processorsmarkdown_exec.processorsmarkdown-&gt;markdown_exec_processorsmarkdown_exec.renderingmarkdown_exec.renderingmarkdown-&gt;markdown_exec_renderingmkdocs_config_config_optionsmkdocs.config.config_optionsmarkdown-&gt;mkdocs_config_config_optionsmarkdown_coremarkdown.coremarkdown_core-&gt;markdownmarkdown_core-&gt;markdown_exec_formatters_basemarkdown_treeprocessorsmarkdown.treeprocessorsmarkdown_treeprocessors-&gt;markdown_coremarkdown_treeprocessors-&gt;markdown_exec_processorsmarkdown_utilmarkdown.utilmarkdown_util-&gt;markdownmarkdown_util-&gt;markdown_coremarkdown_util-&gt;markdown_treeprocessorsmarkdown_util-&gt;markdown_exec_processorsmarkdown_exec.formattersmarkdown_exec.formattersmarkdown_exec_formatters-&gt;markdown_execmarkdown_exec_formatters-&gt;markdown_exec_mkdocs_pluginmarkdown_exec_formatters_base-&gt;markdown_execmarkdown_exec.formatters.bashmarkdown_exec.formatters.bashmarkdown_exec_formatters_base-&gt;markdown_exec_formatters_bashmarkdown_exec.formatters.consolemarkdown_exec.formatters.consolemarkdown_exec_formatters_base-&gt;markdown_exec_formatters_consolemarkdown_exec.formatters.markdownmarkdown_exec.formatters.markdownmarkdown_exec_formatters_base-&gt;markdown_exec_formatters_markdownmarkdown_exec.formatters.pyconmarkdown_exec.formatters.pyconmarkdown_exec_formatters_base-&gt;markdown_exec_formatters_pyconmarkdown_exec.formatters.pythonmarkdown_exec.formatters.pythonmarkdown_exec_formatters_base-&gt;markdown_exec_formatters_pythonmarkdown_exec.formatters.shmarkdown_exec.formatters.shmarkdown_exec_formatters_base-&gt;markdown_exec_formatters_shmarkdown_exec_formatters_bash-&gt;markdown_execmarkdown_exec_formatters_console-&gt;markdown_execmarkdown_exec_formatters_markdown-&gt;markdown_execmarkdown_exec_formatters_pycon-&gt;markdown_execmarkdown_exec_formatters_pyodide-&gt;markdown_execmarkdown_exec_formatters_python-&gt;markdown_execmarkdown_exec_formatters_python-&gt;markdown_exec_formatters_pyconmarkdown_exec_formatters_sh-&gt;markdown_execmarkdown_exec_formatters_sh-&gt;markdown_exec_formatters_consolemarkdown_exec_formatters_tree-&gt;markdown_execmarkdown_exec.loggermarkdown_exec.loggermarkdown_exec_logger-&gt;markdown_exec_formatters_basemarkdown_exec_logger-&gt;markdown_exec_formatters_consolemarkdown_exec_logger-&gt;markdown_exec_formatters_pyconmarkdown_exec_logger-&gt;markdown_exec_mkdocs_pluginmarkdown_exec_processors-&gt;markdown_exec_renderingmarkdown_exec_rendering-&gt;markdown_exec_formatters_basemarkdown_exec_rendering-&gt;markdown_exec_formatters_bashmarkdown_exec_rendering-&gt;markdown_exec_formatters_pythonmarkdown_exec_rendering-&gt;markdown_exec_formatters_shmarkdown_exec_rendering-&gt;markdown_exec_formatters_treemarkdown_exec_rendering-&gt;markdown_exec_mkdocs_pluginmarkupsafemarkupsafemarkupsafe-&gt;markdown_exec_formatters_basemarkupsafe-&gt;markdown_exec_formatters_consolemarkupsafe-&gt;markdown_exec_formatters_pyconmarkupsafe-&gt;markdown_exec_processorsmarkupsafe-&gt;markdown_exec_renderingmkdocsmkdocsmkdocs-&gt;markdown_exec_mkdocs_pluginmkdocs_configmkdocs.configmkdocs_config-&gt;markdown_exec_mkdocs_pluginmkdocs_config-&gt;mkdocs_pluginsmkdocs_config-&gt;mkdocs_structure_filesmkdocs_config_config_options-&gt;markdown_exec_mkdocs_pluginmkdocs_plugins-&gt;markdown_exec_mkdocs_pluginmkdocs_plugins-&gt;mkdocs_config_config_optionsmkdocs_structuremkdocs.structuremkdocs_structure-&gt;markdown_exec_mkdocs_pluginmkdocs_structure-&gt;mkdocs_pluginsmkdocs_utilsmkdocs.utilsmkdocs_structure-&gt;mkdocs_utilsmkdocs_structure_files-&gt;markdown_exec_mkdocs_pluginmkdocs_structure_files-&gt;mkdocs_pluginsmkdocs_utils-&gt;markdown_exec_mkdocs_pluginmkdocs_utils-&gt;mkdocs_config_config_optionsmkdocs_utils-&gt;mkdocs_pluginsmkdocs_utils-&gt;mkdocs_structure_files </p> pydeps module dependencies graph<pre><code>from pydeps import cli, colors, dot, py2depgraph\nfrom pydeps.pydeps import depgraph_to_dotsrc\nfrom pydeps.target import Target\n\ncli.verbose = cli._not_verbose\noptions = cli.parse_args([\"src/markdown_exec\", \"--noshow\"])\ncolors.START_COLOR = options[\"start_color\"]\ntarget = Target(options[\"fname\"])\nwith target.chdir_work():\n    dep_graph = py2depgraph.py2dep(target, **options)\ndot_src = depgraph_to_dotsrc(target, dep_graph, **options)\nsvg = dot.call_graphviz_dot(dot_src, \"svg\").decode()\nsvg = \"\".join(svg.splitlines()[6:])\nsvg = svg.replace('fill=\"white\"', 'fill=\"transparent\"')\nreference = \"../reference\"\nmodules = (\n    \"markdown_exec\",\n    \"markdown_exec.formatters\",\n    \"markdown_exec.formatters.base\",\n    \"markdown_exec.formatters.bash\",\n    \"markdown_exec.formatters.console\",\n    \"markdown_exec.formatters.markdown\",\n    \"markdown_exec.formatters.pycon\",\n    \"markdown_exec.formatters.python\",\n    \"markdown_exec.formatters.sh\",\n    \"markdown_exec.formatters.tree\",\n    \"markdown_exec.logger\",\n    \"markdown_exec.mkdocs_plugin\",\n    \"markdown_exec.rendering\",\n)\nfor module in modules:\n    svg_title = module.replace(\".\", \"_\")\n    title_tag = f\"&lt;title&gt;{svg_title}&lt;/title&gt;\"\n    href = f\"{reference}/{module.replace('.', '/')}/\"\n    svg = svg.replace(title_tag, f'&lt;a href=\"{href}\"&gt;&lt;title&gt;{module}&lt;/title&gt;')\nsvg = svg.replace(\"&lt;/text&gt;&lt;/g&gt;\", \"&lt;/text&gt;&lt;/a&gt;&lt;/g&gt;\")\nprint(svg)\n</code></pre>"},{"location":"gallery/#code-snippets","title":"Code snippets","text":"<p>Rich allows to export syntax-highlighted code as SVG. Here we hardcode the code snippet we want to render, but we could instead include it from somewhere else using the <code>pymdownx.snippets</code> extension or by reading it dynamically from Python. We also prevent Rich from actually writing to the terminal.</p> ResultSource <p> async\u00a0context\u00a0manager fromcontextlibimportasynccontextmanager importhttpx classBookClient(httpx.AsyncClient): asyncdefget_book(self,book_id:int)-&gt;str: response=awaitself.get(f\"/books/{book_id}\") returnresponse.text @asynccontextmanager asyncdefbook_client(*args,**kwargs): asyncwithBookClient(*args,**kwargs)asclient: yieldclient </p> Rich SVG code snippet<pre><code>import os\n\nfrom rich.console import Console\nfrom rich.padding import Padding\nfrom rich.syntax import Syntax\n\ncode = \"\"\"\n    from contextlib import asynccontextmanager\n    import httpx\n\n\n    class BookClient(httpx.AsyncClient):\n        async def get_book(self, book_id: int) -&gt; str:\n            response = await self.get(f\"/books/{book_id}\")\n            return response.text\n\n\n    @asynccontextmanager\n    async def book_client(*args, **kwargs):\n        async with BookClient(*args, **kwargs) as client:\n            yield client\n\"\"\"\n\nwith open(os.devnull, \"w\") as devnull:\n    console = Console(record=True, width=65, file=devnull, markup=False)\n    renderable = Syntax(code, \"python\", theme=\"material\")\n    renderable = Padding(renderable, (0,), expand=False)\n    console.print(renderable, markup=False)\nsvg = console.export_svg(title=\"async context manager\")\nprint(svg)\n</code></pre>"},{"location":"gallery/#terminal-output-with-colors","title":"Terminal output with colors","text":"<p>If you installed Markdown Exec with the <code>ansi</code> extra (<code>pip install markdown-exec[ansi]</code>), the ANSI colors in the output of shell commands will be translated to HTML/CSS, allowing to render them naturally in your documentation pages. For this to happen, use the <code>result=\"ansi\"</code> option.</p> ResultSource <pre><code>                40m   41m   42m   43m   44m   45m   46m   47m\n     m   xYz    xYz   xYz   xYz   xYz   xYz   xYz   xYz   xYz \n    1m   xYz    xYz   xYz   xYz   xYz   xYz   xYz   xYz   xYz \n   30m   xYz    xYz   xYz   xYz   xYz   xYz   xYz   xYz   xYz \n 1;30m   xYz    xYz   xYz   xYz   xYz   xYz   xYz   xYz   xYz \n   31m   xYz    xYz   xYz   xYz   xYz   xYz   xYz   xYz   xYz \n 1;31m   xYz    xYz   xYz   xYz   xYz   xYz   xYz   xYz   xYz \n   32m   xYz    xYz   xYz   xYz   xYz   xYz   xYz   xYz   xYz \n 1;32m   xYz    xYz   xYz   xYz   xYz   xYz   xYz   xYz   xYz \n   33m   xYz    xYz   xYz   xYz   xYz   xYz   xYz   xYz   xYz \n 1;33m   xYz    xYz   xYz   xYz   xYz   xYz   xYz   xYz   xYz \n   34m   xYz    xYz   xYz   xYz   xYz   xYz   xYz   xYz   xYz \n 1;34m   xYz    xYz   xYz   xYz   xYz   xYz   xYz   xYz   xYz \n   35m   xYz    xYz   xYz   xYz   xYz   xYz   xYz   xYz   xYz \n 1;35m   xYz    xYz   xYz   xYz   xYz   xYz   xYz   xYz   xYz \n   36m   xYz    xYz   xYz   xYz   xYz   xYz   xYz   xYz   xYz \n 1;36m   xYz    xYz   xYz   xYz   xYz   xYz   xYz   xYz   xYz \n   37m   xYz    xYz   xYz   xYz   xYz   xYz   xYz   xYz   xYz \n 1;37m   xYz    xYz   xYz   xYz   xYz   xYz   xYz   xYz   xYz \n</code></pre> ANSI terminal output<pre><code>#!/bin/bash\n# credits to https://github.com/42picky/42picky.github.io\ntext=\"xYz\"  # Some test text\necho -e \"\\n                40m   41m   42m   43m   44m   45m   46m   47m\"\nfor FGs in '    m' '   1m' '  30m' '1;30m' '  31m' '1;31m' '  32m' \\\n'1;32m' '  33m' '1;33m' '  34m' '1;34m' '  35m' '1;35m' \\\n'  36m' '1;36m' '  37m' '1;37m'; do\nFG=${FGs// /}\necho -en \" $FGs \\033[$FG  ${text}  \"\nfor BG in 40m 41m 42m 43m 44m 45m 46m 47m; do\necho -en \"$EINS \\033[$FG\\033[${BG} ${text} \\033[0m\"\ndone\necho\ndone\necho\n</code></pre> <p>As an alternative, we can use Rich again to render the output of a command in a terminal, with colors. This example is taken directly from the documentation of the Griffe project.</p> ResultSource <p><pre><code>$ griffe check griffe -ssrc -b0.24.0 -a0.23.0\nsrc/griffe/loader.py:156: GriffeLoader.resolve_aliases(only_exported): Parameter kind was changed: positional or keyword -&gt; keyword-only\nsrc/griffe/loader.py:156: GriffeLoader.resolve_aliases(only_exported): Parameter default was changed: True -&gt; None\nsrc/griffe/loader.py:156: GriffeLoader.resolve_aliases(only_known_modules): Parameter kind was changed: positional or keyword -&gt; keyword-only\nsrc/griffe/loader.py:156: GriffeLoader.resolve_aliases(only_known_modules): Parameter default was changed: True -&gt; None\nsrc/griffe/loader.py:156: GriffeLoader.resolve_aliases(max_iterations): Parameter kind was changed: positional or keyword -&gt; keyword-only\nsrc/griffe/loader.py:308: GriffeLoader.resolve_module_aliases(only_exported): Parameter was removed\nsrc/griffe/loader.py:308: GriffeLoader.resolve_module_aliases(only_known_modules): Parameter was removed\nsrc/griffe/git.py:39: tmp_worktree(commit): Parameter was removed\nsrc/griffe/git.py:39: tmp_worktree(repo): Positional parameter was moved: position: from 2 to 1 (-1)\nsrc/griffe/git.py:75: load_git(commit): Parameter was removed\nsrc/griffe/git.py:75: load_git(repo): Parameter kind was changed: positional or keyword -&gt; keyword-only\nsrc/griffe/git.py:75: load_git(submodules): Parameter kind was changed: positional or keyword -&gt; keyword-only\nsrc/griffe/git.py:75: load_git(try_relative_path): Parameter was removed\nsrc/griffe/git.py:75: load_git(extensions): Parameter kind was changed: positional or keyword -&gt; keyword-only\nsrc/griffe/git.py:75: load_git(search_paths): Parameter kind was changed: positional or keyword -&gt; keyword-only\nsrc/griffe/git.py:75: load_git(docstring_parser): Parameter kind was changed: positional or keyword -&gt; keyword-only\nsrc/griffe/git.py:75: load_git(docstring_options): Parameter kind was changed: positional or keyword -&gt; keyword-only\nsrc/griffe/git.py:75: load_git(lines_collection): Parameter kind was changed: positional or keyword -&gt; keyword-only\nsrc/griffe/git.py:75: load_git(modules_collection): Parameter kind was changed: positional or keyword -&gt; keyword-only\nsrc/griffe/git.py:75: load_git(allow_inspection): Parameter kind was changed: positional or keyword -&gt; keyword-only\n\n</code></pre> </p> Rich terminal output<pre><code>import os\n\nfrom rich.console import Console\n\nreport = \"\"\"$ griffe check griffe -ssrc -b0.24.0 -a0.23.0\n[bold]src/griffe/loader.py[/]:156: GriffeLoader.resolve_aliases([#7faeff]only_exported[/]): [#afaf72]Parameter kind was changed[/]: positional or keyword -&gt; keyword-only\n[bold]src/griffe/loader.py[/]:156: GriffeLoader.resolve_aliases([#7faeff]only_exported[/]): [#afaf72]Parameter default was changed[/]: True -&gt; None\n[bold]src/griffe/loader.py[/]:156: GriffeLoader.resolve_aliases([#7faeff]only_known_modules[/]): [#afaf72]Parameter kind was changed[/]: positional or keyword -&gt; keyword-only\n[bold]src/griffe/loader.py[/]:156: GriffeLoader.resolve_aliases([#7faeff]only_known_modules[/]): [#afaf72]Parameter default was changed[/]: True -&gt; None\n[bold]src/griffe/loader.py[/]:156: GriffeLoader.resolve_aliases([#7faeff]max_iterations[/]): [#afaf72]Parameter kind was changed[/]: positional or keyword -&gt; keyword-only\n[bold]src/griffe/loader.py[/]:308: GriffeLoader.resolve_module_aliases([#7faeff]only_exported[/]): [#afaf72]Parameter was removed[/]\n[bold]src/griffe/loader.py[/]:308: GriffeLoader.resolve_module_aliases([#7faeff]only_known_modules[/]): [#afaf72]Parameter was removed[/]\n[bold]src/griffe/git.py[/]:39: tmp_worktree([#7faeff]commit[/]): [#afaf72]Parameter was removed[/]\n[bold]src/griffe/git.py[/]:39: tmp_worktree([#7faeff]repo[/]): [#afaf72]Positional parameter was moved[/]: position: from 2 to 1 (-1)\n[bold]src/griffe/git.py[/]:75: load_git([#7faeff]commit[/]): [#afaf72]Parameter was removed[/]\n[bold]src/griffe/git.py[/]:75: load_git([#7faeff]repo[/]): [#afaf72]Parameter kind was changed[/]: positional or keyword -&gt; keyword-only\n[bold]src/griffe/git.py[/]:75: load_git([#7faeff]submodules[/]): [#afaf72]Parameter kind was changed[/]: positional or keyword -&gt; keyword-only\n[bold]src/griffe/git.py[/]:75: load_git([#7faeff]try_relative_path[/]): [#afaf72]Parameter was removed[/]\n[bold]src/griffe/git.py[/]:75: load_git([#7faeff]extensions[/]): [#afaf72]Parameter kind was changed[/]: positional or keyword -&gt; keyword-only\n[bold]src/griffe/git.py[/]:75: load_git([#7faeff]search_paths[/]): [#afaf72]Parameter kind was changed[/]: positional or keyword -&gt; keyword-only\n[bold]src/griffe/git.py[/]:75: load_git([#7faeff]docstring_parser[/]): [#afaf72]Parameter kind was changed[/]: positional or keyword -&gt; keyword-only\n[bold]src/griffe/git.py[/]:75: load_git([#7faeff]docstring_options[/]): [#afaf72]Parameter kind was changed[/]: positional or keyword -&gt; keyword-only\n[bold]src/griffe/git.py[/]:75: load_git([#7faeff]lines_collection[/]): [#afaf72]Parameter kind was changed[/]: positional or keyword -&gt; keyword-only\n[bold]src/griffe/git.py[/]:75: load_git([#7faeff]modules_collection[/]): [#afaf72]Parameter kind was changed[/]: positional or keyword -&gt; keyword-only\n[bold]src/griffe/git.py[/]:75: load_git([#7faeff]allow_inspection[/]): [#afaf72]Parameter kind was changed[/]: positional or keyword -&gt; keyword-only\n\"\"\"\n\nwith open(os.devnull, \"w\") as devnull:\n    console = Console(record=True, width=150, file=devnull)\n    console.print(report, markup=True, highlight=False)\nprint(console.export_html(inline_styles=True, code_format=\"&lt;pre&gt;&lt;code&gt;{code}&lt;/code&gt;&lt;/pre&gt;\"))\n</code></pre>"},{"location":"gallery/#tui-screenshots","title":"TUI screenshots","text":"<p>Textual allows to build Terminal User Interfaces (TUIs). In this example we generate the SVG image of a terminal interface.</p> ResultSource <p> TextApp \u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513 \u2503\u2503 \u2503\u2503 \u2503Hello\u2503 \u2503\u2503 \u2503\u2503 \u2517\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u251b \u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513 \u2503\u2503 \u2503\u2503 \u2503World!\u2503 \u2503\u2503 \u2503\u2503 \u2517\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u251b </p> <pre><code>from textual.app import App, ComposeResult\nfrom textual.pilot import Pilot\nfrom textual.widgets import Static\n\n\nclass TextApp(App):\n    CSS = \"\"\"\n    Screen {\n        background: darkblue;\n        color: white;\n        layout: vertical;\n    }\n    Static {\n        height: auto;\n        padding: 2;\n        border: heavy white;\n        background: #ffffff 30%;\n        content-align: center middle;\n    }\n    \"\"\"\n\n    def compose(self) -&gt; ComposeResult:\n        yield Static(\"Hello\")\n        yield Static(\"[b]World![/b]\")\n\n\nasync def auto_pilot(pilot: Pilot):\n    pilot.app.exit(pilot.app.export_screenshot())\n\n\nprint(TextApp().run(headless=True, size=(80, 24), auto_pilot=auto_pilot))\n</code></pre>"},{"location":"gallery/#charts-and-plots","title":"Charts and Plots","text":"<p>With Matplotlib:</p> ResultSource <p> 2023-04-26T22:37:36.159173 image/svg+xml Matplotlib v3.7.1, https://matplotlib.org/ </p> matplotlib graph<pre><code># https://matplotlib.org/stable/gallery/lines_bars_and_markers/scatter_demo2.html\nfrom io import StringIO\n\nimport matplotlib.cbook as cbook\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Load a numpy record array from yahoo csv data with fields date, open, close,\n# volume, adj_close from the mpl-data/example directory. The record array\n# stores the date as an np.datetime64 with a day unit ('D') in the date column.\nprice_data = cbook.get_sample_data(\"goog.npz\", np_load=True)[\"price_data\"].view(np.recarray)\nprice_data = price_data[-250:]  # get the most recent 250 trading days\n\ndelta1 = np.diff(price_data.adj_close) / price_data.adj_close[:-1]\n\n# Marker size in units of points^2\nvolume = (15 * price_data.volume[:-2] / price_data.volume[0]) ** 2\nclose = 0.003 * price_data.close[:-2] / 0.003 * price_data.open[:-2]\n\nfig, ax = plt.subplots()\nax.scatter(delta1[:-1], delta1[1:], c=close, s=volume, alpha=0.5)\n\nax.set_xlabel(r\"$\\Delta_i$\", fontsize=15)\nax.set_ylabel(r\"$\\Delta_{i+1}$\", fontsize=15)\nax.set_title(\"Volume and percent change\")\n\nax.grid(True)\nfig.tight_layout()\n\nbuffer = StringIO()\nplt.savefig(buffer, format=\"svg\")\nprint(buffer.getvalue())\n</code></pre>"},{"location":"gallery/#python-module-output","title":"Python module output","text":"<p>This example uses Python's <code>runpy</code> module to run another Python module. This other module's output is captured by temporarily patching <code>sys.stdout</code> with a text buffer. </p> ResultSource <pre><code>Usage: mkdocs [OPTIONS] COMMAND [ARGS]...\n\n  MkDocs - Project documentation with Markdown.\n\nOptions:\n  -V, --version  Show the version and exit.\n  -q, --quiet    Silence warnings\n  -v, --verbose  Enable verbose output\n  -h, --help     Show this message and exit.\n\nCommands:\n  build      Build the MkDocs documentation\n  gh-deploy  Deploy your documentation to GitHub Pages\n  new        Create a new MkDocs project\n  serve      Run the builtin development server\n</code></pre> runpy and script/module output<pre><code>import sys\nimport warnings\nfrom contextlib import suppress\nfrom io import StringIO\nfrom runpy import run_module\n\nold_argv = list(sys.argv)\nsys.argv = [\"mkdocs\"]\nold_stdout = sys.stdout\nsys.stdout = StringIO()\nwarnings.filterwarnings(\"ignore\", category=RuntimeWarning)\nwith suppress(SystemExit):\n    run_module(\"mkdocs\", run_name=\"__main__\")\noutput = sys.stdout.getvalue()\nsys.stdout = old_stdout\nsys.argv = old_argv\n\nprint(f\"```\\n{output}\\n```\")\n</code></pre>"},{"location":"gallery/#python-cli-documentation","title":"Python CLI documentation","text":""},{"location":"gallery/#argparse-help-message-code-block","title":"Argparse help message (code block)","text":"<p>Instead of blindly running a module with <code>runpy</code> to get its help message, if you know the project is using <code>argparse</code> to build its command line interface, and if it exposes its parser, then you can get the help message directly from the parser.</p> ResultSource <pre><code>usage: duty [GLOBAL_OPTS...] [DUTY [DUTY_OPTS...] [DUTY_PARAMS...]...]\n\nA simple task runner.\n\npositional arguments:\n  remainder\n\nGlobal options:\n  -d DUTIES_FILE, --duties-file DUTIES_FILE\n                        Python file where the duties are defined.\n  -l, --list            List the available duties.\n  -h [DUTY ...], --help [DUTY ...]\n                        Show this help message and exit. Pass duties names to print their help.\n  -c {stdout,stderr,both,none}, --capture {stdout,stderr,both,none}\n                        Which output to capture. Colors are supported with 'both' only, unless the command has a 'force color' option.\n  -f {pretty,tap}, --fmt {pretty,tap}, --format {pretty,tap}\n                        Output format. Pass your own Jinja2 template as a string with '-f custom=TEMPLATE'. Available variables: command, title (command or title passed with -t), code\n                        (exit status), success (boolean), failure (boolean), number (command number passed with -n), output (command output), nofail (boolean), quiet (boolean), silent\n                        (boolean). Available filters: indent (textwrap.indent).\n  -y, --pty             Enable the use of a pseudo-terminal. PTY doesn't allow programs to use standard input.\n  -Y, --no-pty          Disable the use of a pseudo-terminal. PTY doesn't allow programs to use standard input.\n  -p, --progress        Print progress while running a command.\n  -P, --no-progress     Don't print progress while running a command.\n  -q, --quiet           Don't print the command output, even if it failed.\n  -Q, --no-quiet        Print the command output when it fails.\n  -s, --silent          Don't print anything.\n  -S, --no-silent       Print output as usual.\n  -z, --zero, --nofail  Don't fail. Always return a success (0) exit code.\n  -Z, --no-zero, --strict\n                        Return the original exit code.\n</code></pre> argparse parser help message<pre><code>from duty.cli import get_parser\n\nparser = get_parser()\nprint(f\"```\\n{parser.format_help()}\\n```\")\n</code></pre>"},{"location":"gallery/#argparse-parser-documentation","title":"Argparse parser documentation","text":"<p>In this example, we inspect the <code>argparse</code> parser to build better-looking Markdown/HTML contents. We simply use the description and iterate on options, but more complex stuff is possible of course.</p> ResultSource CLI help using argparse parser<pre><code>import argparse\n\nfrom duty.cli import get_parser\n\nparser = get_parser()\nlines = []\nlines.append(f\"## duty\")\nif parser.description:\n    lines.append(parser.description)\nlines.append(\"\\nOptions:\\n\")\nfor action in parser._actions:\n    opts = [f\"`{opt}`\" for opt in action.option_strings]\n    if not opts:\n        continue\n    line = \"- \" + \",\".join(opts)\n    if action.metavar:\n        line += f\" `{action.metavar}`\"\n    line += f\": {action.help}\"\n    if action.default and action.default != argparse.SUPPRESS:\n        line += f\"(default: {action.default})\"\n    lines.append(line)\nprint(\"\\n\".join(lines))\n</code></pre>"},{"location":"gallery/#exec-15--duty","title":"duty","text":"<p>A simple task runner.</p> <p>Options:</p> <ul> <li><code>-d</code>,<code>--duties-file</code>: Python file where the duties are defined.(default: duties.py)</li> <li><code>-l</code>,<code>--list</code>: List the available duties.</li> <li><code>-h</code>,<code>--help</code> <code>DUTY</code>: Show this help message and exit. Pass duties names to print their help.</li> <li><code>-c</code>,<code>--capture</code>: Which output to capture. Colors are supported with 'both' only, unless the command has a 'force color' option.</li> <li><code>-f</code>,<code>--fmt</code>,<code>--format</code>: Output format. Pass your own Jinja2 template as a string with '-f custom=TEMPLATE'. Available variables: command, title (command or title passed with -t), code (exit status), success (boolean), failure (boolean), number (command number passed with -n), output (command output), nofail (boolean), quiet (boolean), silent (boolean). Available filters: indent (textwrap.indent).</li> <li><code>-y</code>,<code>--pty</code>: Enable the use of a pseudo-terminal. PTY doesn't allow programs to use standard input.</li> <li><code>-Y</code>,<code>--no-pty</code>: Disable the use of a pseudo-terminal. PTY doesn't allow programs to use standard input.</li> <li><code>-p</code>,<code>--progress</code>: Print progress while running a command.</li> <li><code>-P</code>,<code>--no-progress</code>: Don't print progress while running a command.</li> <li><code>-q</code>,<code>--quiet</code>: Don't print the command output, even if it failed.</li> <li><code>-Q</code>,<code>--no-quiet</code>: Print the command output when it fails.</li> <li><code>-s</code>,<code>--silent</code>: Don't print anything.</li> <li><code>-S</code>,<code>--no-silent</code>: Print output as usual.</li> <li><code>-z</code>,<code>--zero</code>,<code>--nofail</code>: Don't fail. Always return a success (0) exit code.</li> <li><code>-Z</code>,<code>--no-zero</code>,<code>--strict</code>: Return the original exit code.</li> </ul>"},{"location":"license/","title":"License","text":"<pre><code>ISC License\n\nCopyright (c) 2022, Timoth\u00e9e Mazzucotelli\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted, provided that the above\ncopyright notice and this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\nWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\nANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\nACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\nOR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n</code></pre>"},{"location":"insiders/","title":"Insiders","text":"<p>Markdown Exec follows the sponsorware release strategy, which means that new features are first exclusively released to sponsors as part of Insiders. Read on to learn what sponsorships achieve, how to become a sponsor to get access to Insiders, and what's in it for you!</p>"},{"location":"insiders/#what-is-insiders","title":"What is Insiders?","text":"<p>Markdown Exec Insiders is a private fork of Markdown Exec, hosted as a private GitHub repository. Almost<sup>1</sup> all new features are developed as part of this fork, which means that they are immediately available to all eligible sponsors, as they are made collaborators of this repository.</p> <p>Every feature is tied to a funding goal in monthly subscriptions. When a funding goal is hit, the features that are tied to it are merged back into Markdown Exec and released for general availability, making them available to all users. Bugfixes are always released in tandem.</p> <p>Sponsorships start as low as $10 a month.<sup>2</sup></p>"},{"location":"insiders/#what-sponsorships-achieve","title":"What sponsorships achieve","text":"<p>Sponsorships make this project sustainable, as they buy the maintainers of this project time \u2013 a very scarce resource \u2013 which is spent on the development of new features, bug fixing, stability improvement, issue triage and general support. The biggest bottleneck in Open Source is time.<sup>3</sup></p> <p>If you're unsure if you should sponsor this project, check out the list of completed funding goals to learn whether you're already using features that were developed with the help of sponsorships. You're most likely using at least a handful of them, thanks to our awesome sponsors!</p>"},{"location":"insiders/#whats-in-it-for-me","title":"What's in it for me?","text":"<p>The moment you become a sponsor, you'll get immediate access to 1 additional features that you can start using right away, and which are currently exclusively available to sponsors:</p> <ul> <li> Pyodide fence </li> </ul>"},{"location":"insiders/#how-to-become-a-sponsor","title":"How to become a sponsor","text":"<p>Thanks for your interest in sponsoring! In order to become an eligible sponsor with your GitHub account, visit pawamoy's sponsor profile, and complete a sponsorship of $10 a month or more. You can use your individual or organization GitHub account for sponsoring.</p> <p>Important: If you're sponsoring @pawamoy through a GitHub organization, please send a short email to pawamoy@pm.me with the name of your organization and the GitHub account of the individual that should be added as a collaborator.<sup>4</sup></p> <p>You can cancel your sponsorship anytime.<sup>5</sup></p> <p> \u00a0 Join our 12 awesome sponsors</p> <p></p> <p> </p> <p></p> <p>   If you sponsor publicly, you're automatically added here with a link to   your profile and avatar to show your support for Markdown Exec.   Alternatively, if you wish to keep your sponsorship private, you'll be a   silent +1. You can select visibility during checkout and change it   afterwards. </p>"},{"location":"insiders/#funding","title":"Funding","text":"<p>Current funding is at $ 161  a month.</p>"},{"location":"insiders/#goals","title":"Goals","text":"<p>The following section lists all funding goals. Each goal contains a list of features prefixed with a checkmark symbol, denoting whether a feature is  already available or   planned, but not yet implemented. When the funding goal is hit, the features are released for general availability. </p> <p></p>"},{"location":"insiders/#500-plasmavac-user-guide","title":"$ 500 \u2014 PlasmaVac User Guide","text":"<ul> <li> Pyodide fence</li> </ul>"},{"location":"insiders/#goals-completed","title":"Goals completed","text":"<p>This section lists all funding goals that were previously completed, which means that those features were part of Insiders, but are now generally available and can be used by all users.</p> <p></p>"},{"location":"insiders/#frequently-asked-questions","title":"Frequently asked questions","text":""},{"location":"insiders/#compatibility","title":"Compatibility","text":"<p>We're building an open source project and want to allow outside collaborators to use Markdown Exec locally without having access to Insiders. Is this still possible?</p> <p>Yes. Insiders is compatible with Markdown Exec. Almost all new features and configuration options are either backward-compatible or implemented behind feature flags. Most Insiders features enhance the overall experience, though while these features add value for the users of your project, they shouldn't be necessary for previewing when making changes to content.</p>"},{"location":"insiders/#payment","title":"Payment","text":"<p>We don't want to pay for sponsorship every month. Are there any other options?</p> <p>Yes. You can sponsor on a yearly basis by switching your GitHub account to a yearly billing cycle. If for some reason you cannot do that, you could also create a dedicated GitHub account with a yearly billing cycle, which you only use for sponsoring (some sponsors already do that).</p> <p>If you have any problems or further questions, please reach out to pawamoy@pm.me.</p>"},{"location":"insiders/#terms","title":"Terms","text":"<p>Are we allowed to use Insiders under the same terms and conditions as Markdown Exec?</p> <p>Yes. Whether you're an individual or a company, you may use Markdown Exec Insiders precisely under the same terms as Markdown Exec, which are given by the ISC License. However, we kindly ask you to respect our fair use policy:</p> <ul> <li> <p>Please don't distribute the source code of Insiders. You may freely use   it for public, private or commercial projects, privately fork or mirror it,   but please don't make the source code public, as it would counteract the    sponsorware strategy.</p> </li> <li> <p>If you cancel your subscription, you're automatically removed as a   collaborator and will miss out on all future updates of Insiders. However, you   may use the latest version that's available to you as long as you like.   Just remember that GitHub deletes private forks.</p> </li> </ul> <ol> <li> <p>In general, every new feature is first exclusively released to sponsors, but sometimes upstream dependencies enhance existing features that must be supported by Markdown Exec.\u00a0\u21a9</p> </li> <li> <p>Note that $10 a month is the minimum amount to become eligible for Insiders. While GitHub Sponsors also allows to sponsor lower amounts or one-time amounts, those can't be granted access to Insiders due to technical reasons. Such contributions are still very much welcome as they help ensuring the project's sustainability.\u00a0\u21a9</p> </li> <li> <p>Making an Open Source project sustainable is exceptionally hard: maintainers burn out, projects are abandoned. That's not great and very unpredictable. The sponsorware model ensures that if you decide to use Markdown Exec, you can be sure that bugs are fixed quickly and new features are added regularly.\u00a0\u21a9</p> </li> <li> <p>It's currently not possible to grant access to each member of an organization, as GitHub only allows for adding users. Thus, after sponsoring, please send an email to pawamoy@pm.me, stating which account should become a collaborator of the Insiders repository. We're working on a solution which will make access to organizations much simpler. To ensure that access is not tied to a particular individual GitHub account, create a bot account (i.e. a GitHub account that is not tied to a specific individual), and use this account for the sponsoring. After being added to the list of collaborators, the bot account can create a private fork of the private Insiders GitHub repository, and grant access to all members of the organizations.\u00a0\u21a9</p> </li> <li> <p>If you cancel your sponsorship, GitHub schedules a cancellation request which will become effective at the end of the billing cycle. This means that even though you cancel your sponsorship, you will keep your access to Insiders as long as your cancellation isn't effective. All charges are processed by GitHub through Stripe. As we don't receive any information regarding your payment, and GitHub doesn't offer refunds, sponsorships are non-refundable.\u00a0\u21a9</p> </li> </ol>"},{"location":"insiders/changelog/","title":"Changelog","text":""},{"location":"insiders/changelog/#markdown-exec-insiders","title":"Markdown Exec Insiders","text":""},{"location":"insiders/changelog/#1.0.0","title":"1.0.0 April 26, 2023","text":"<ul> <li>Add a <code>pyodide</code> fence</li> </ul>"},{"location":"insiders/installation/","title":"Getting started with Insiders","text":"<p>Markdown Exec Insiders is a compatible drop-in replacement for Markdown Exec, and can be installed similarly using <code>pip</code> or <code>git</code>. Note that in order to access the Insiders  repository, you need to become an eligible sponsor of @pawamoy on GitHub.</p>"},{"location":"insiders/installation/#installation","title":"Installation","text":""},{"location":"insiders/installation/#with-pip-sshhttps","title":"with pip (ssh/https)","text":"<p>Markdown Exec Insiders can be installed with <code>pip</code> using SSH:</p> <pre><code>pip install git+ssh://git@github.com/pawamoy-insiders/markdown-exec.git\n</code></pre> <p>Or using HTTPS:</p> <pre><code>pip install git+https://${GH_TOKEN}@github.com/pawamoy-insiders/markdown-exec.git\n</code></pre> How to get a GitHub personal access token <p>The <code>GH_TOKEN</code> environment variable is a GitHub token. It can be obtained by creating a personal access token for your GitHub account. It will give you access to the Insiders repository, programmatically, from the command line or GitHub Actions workflows:</p> <ol> <li>Go to https://github.com/settings/tokens</li> <li>Click on Generate a new token</li> <li>Enter a name and select the <code>repo</code> scope</li> <li>Generate the token and store it in a safe place</li> </ol> <p>Note that the personal access token must be kept secret at all times, as it allows the owner to access your private repositories.</p>"},{"location":"insiders/installation/#with-pip-self-hosted","title":"with pip (self-hosted)","text":"<p>Self-hosting the Insiders package makes it possible to depend on Markdown Exec normally, while transparently downloading and installing the Insiders version locally. It means that you can specify your dependencies normally, and your contributors without access to Insiders will get the public version, while you get the Insiders version on your machine.</p> <p>Limitation</p> <p>With this method, there is no way to force the installation of an Insiders version rather than a public version. If there is a public version that is more recent than your self-hosted Insiders version, the public version will take precedence. Remember to regularly update your self-hosted versions by uploading latest distributions.</p> <p>You can build the distributions for Insiders yourself, by cloning the repository and using build to build the distributions, or you can download them from our GitHub Releases. You can upload these distributions to a private PyPI-like registry (Artifactory, Google Cloud, pypiserver, etc.) with Twine:</p> <pre><code># download distributions in ~/dists, then upload with:\ntwine upload --repository-url https://your-private-index.com ~/dists/*\n</code></pre> <p>You might also need to provide a username and password/token to authenticate against the registry. Please check Twine's documentation.</p> <p>You can then configure pip (or other tools) to look for packages into your package index. For example, with pip:</p> <pre><code>pip config set global.extra-index-url https://your-private-index.com/simple\n</code></pre> <p>Note that the URL might differ depending on whether your are uploading a package (with Twine) or installing a package (with pip), and depending on the registry you are using (Artifactory, Google Cloud, etc.). Please check the documentation of your registry to learn how to configure your environment.</p> <p>We kindly ask that you do not upload the distributions to public registries, as it is against our Terms of use.</p> Full example with <code>pypiserver</code> <p>In this example we use pypiserver to serve a local PyPI index.</p> <pre><code>pip install --user pypiserver\n# or pipx install pypiserver\n\n# create a packages directory\nmkdir -p ~/.local/pypiserver/packages\n\n# run the pypi server without authentication\npypi-server run -p 8080 -a . -P . ~/.local/pypiserver/packages &amp;\n</code></pre> <p>We can configure the credentials to access the server in <code>~/.pypirc</code>:</p> .pypirc<pre><code>[distutils]\nindex-servers =\nlocal\n\n[local]\nrepository: http://localhost:8080\nusername:\npassword:\n</code></pre> <p>We then clone the Insiders repository, build distributions and upload them to our local server:</p> <pre><code># clone the repository\ngit clone git@github.com:pawamoy-insiders/markdown-exec\ncd markdown-exec\n\n# install build\npip install --user build\n# or pipx install build\n\n# build the distributions\npyproject-build\n\n# upload them to our local server\ntwine upload -r local dist/* --skip-existing\n</code></pre> <p>Finally, we configure pip, and for example PDM, to use our local index to find packages:</p> <pre><code>pip config set global.extra-index-url http://localhost:8080/simple\npdm config pypi.extra.url http://localhost:8080/simple\n</code></pre> <p>Now when running <code>pip install markdown-exec</code>, or resolving dependencies with PDM, both tools will look into our local index and find the Insiders version. Remember to update your local index regularly!</p>"},{"location":"insiders/installation/#with-git","title":"with git","text":"<p>Of course, you can use Markdown Exec Insiders directly from <code>git</code>:</p> <pre><code>git clone git@github.com:pawamoy-insiders/markdown-exec\n</code></pre> <p>When cloning from <code>git</code>, the package must be installed:</p> <pre><code>pip install -e markdown-exec\n</code></pre>"},{"location":"insiders/installation/#upgrading","title":"Upgrading","text":"<p>When upgrading Insiders, you should always check the version of Markdown Exec which makes up the first part of the version qualifier. For example, a version like <code>8.x.x.4.x.x</code> means that Insiders <code>4.x.x</code> is currently based on <code>8.x.x</code>.</p> <p>If the major version increased, it's a good idea to consult the changelog and go through the steps to ensure your configuration is up to date and all necessary changes have been made.</p>"},{"location":"reference/markdown_exec/","title":"Index","text":"<p>Markdown Exec package.</p> <p>Utilities to execute code blocks in Markdown files.</p>"},{"location":"reference/markdown_exec/#markdown_exec.formatter","title":"formatter","text":"<pre><code>formatter(\n    source,\n    language,\n    css_class,\n    options,\n    md,\n    classes=None,\n    id_value=\"\",\n    attrs=None,\n    **kwargs\n)\n</code></pre> <p>Execute code and return HTML.</p> <p>Parameters:</p> Name Type Description Default <code>source</code> <code>str</code> <p>The code to execute.</p> required <code>language</code> <code>str</code> <p>The code language, like python or bash.</p> required <code>css_class</code> <code>str</code> <p>The CSS class to add to the HTML element.</p> required <code>options</code> <code>dict[str, Any]</code> <p>The container for options.</p> required <code>attrs</code> <code>dict[str, Any] | None</code> <p>The container for attrs:</p> <code>None</code> <code>md</code> <code>Markdown</code> <p>The Markdown instance.</p> required <code>classes</code> <code>list[str] | None</code> <p>Additional CSS classes.</p> <code>None</code> <code>id_value</code> <code>str</code> <p>An optional HTML id.</p> <code>''</code> <code>attrs</code> <code>dict[str, Any] | None</code> <p>Additional attributes</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Additional arguments passed to SuperFences default formatters.</p> <code>{}</code> <p>Returns:</p> Type Description <code>str</code> <p>HTML contents.</p> Source code in <code>src/markdown_exec/__init__.py</code> <pre><code>def formatter(\n    source: str,\n    language: str,\n    css_class: str,  # noqa: ARG001\n    options: dict[str, Any],\n    md: Markdown,\n    classes: list[str] | None = None,  # noqa: ARG001\n    id_value: str = \"\",  # noqa: ARG001\n    attrs: dict[str, Any] | None = None,  # noqa: ARG001\n    **kwargs: Any,  # noqa: ARG001\n) -&gt; str:\n\"\"\"Execute code and return HTML.\n\n    Parameters:\n        source: The code to execute.\n        language: The code language, like python or bash.\n        css_class: The CSS class to add to the HTML element.\n        options: The container for options.\n        attrs: The container for attrs:\n        md: The Markdown instance.\n        classes: Additional CSS classes.\n        id_value: An optional HTML id.\n        attrs: Additional attributes\n        **kwargs: Additional arguments passed to SuperFences default formatters.\n\n    Returns:\n        HTML contents.\n    \"\"\"\n    fmt = formatters.get(language, lambda source, **kwargs: source)\n    return fmt(code=source, md=md, **options)  # type: ignore[operator]\n</code></pre>"},{"location":"reference/markdown_exec/#markdown_exec.validator","title":"validator","text":"<pre><code>validator(language, inputs, options, attrs, md)\n</code></pre> <p>Validate code blocks inputs.</p> <p>Parameters:</p> Name Type Description Default <code>language</code> <code>str</code> <p>The code language, like python or bash.</p> required <code>inputs</code> <code>dict[str, str]</code> <p>The code block inputs, to be sorted into options and attrs.</p> required <code>options</code> <code>dict[str, Any]</code> <p>The container for options.</p> required <code>attrs</code> <code>dict[str, Any]</code> <p>The container for attrs:</p> required <code>md</code> <code>Markdown</code> <p>The Markdown instance.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>Success or not.</p> Source code in <code>src/markdown_exec/__init__.py</code> <pre><code>def validator(\n    language: str,\n    inputs: dict[str, str],\n    options: dict[str, Any],\n    attrs: dict[str, Any],  # noqa: ARG001\n    md: Markdown,  # noqa: ARG001\n) -&gt; bool:\n\"\"\"Validate code blocks inputs.\n\n    Parameters:\n        language: The code language, like python or bash.\n        inputs: The code block inputs, to be sorted into options and attrs.\n        options: The container for options.\n        attrs: The container for attrs:\n        md: The Markdown instance.\n\n    Returns:\n        Success or not.\n    \"\"\"\n    exec_value = _to_bool(inputs.pop(\"exec\", \"no\"))\n    if language not in {\"tree\", \"pyodide\"} and not exec_value:\n        return False\n    id_value = inputs.pop(\"id\", \"\")\n    id_prefix_value = inputs.pop(\"idprefix\", None)\n    html_value = _to_bool(inputs.pop(\"html\", \"no\"))\n    source_value = inputs.pop(\"source\", \"\")\n    result_value = inputs.pop(\"result\", \"\")\n    returncode_value = int(inputs.pop(\"returncode\", \"0\"))\n    session_value = inputs.pop(\"session\", \"\")\n    update_toc_value = _to_bool(inputs.pop(\"updatetoc\", \"yes\"))\n    tabs_value = inputs.pop(\"tabs\", \"|\".join(default_tabs))\n    tabs = tuple(_tabs_re.split(tabs_value, maxsplit=1))\n    options[\"id\"] = id_value\n    options[\"id_prefix\"] = id_prefix_value\n    options[\"html\"] = html_value\n    options[\"source\"] = source_value\n    options[\"result\"] = result_value\n    options[\"returncode\"] = returncode_value\n    options[\"session\"] = session_value\n    options[\"update_toc\"] = update_toc_value\n    options[\"tabs\"] = tabs\n    options[\"extra\"] = inputs\n    return True\n</code></pre>"},{"location":"reference/markdown_exec/logger/","title":"logger","text":"<p>This module contains logging utilities.</p> <p>We provide the <code>patch_loggers</code> function so dependant libraries can patch loggers as they see fit.</p> <p>For example, to fit in the MkDocs logging configuration and prefix each log message with the module name:</p> <pre><code>import logging\nfrom markdown_exec.logger import patch_loggers\n\n\nclass LoggerAdapter(logging.LoggerAdapter):\n    def __init__(self, prefix, logger):\n        super().__init__(logger, {})\n        self.prefix = prefix\n\n    def process(self, msg, kwargs):\n        return f\"{self.prefix}: {msg}\", kwargs\n\n\ndef get_logger(name):\n    logger = logging.getLogger(f\"mkdocs.plugins.{name}\")\n    return LoggerAdapter(name.split(\".\", 1)[0], logger)\n\n\npatch_loggers(get_logger)\n</code></pre>"},{"location":"reference/markdown_exec/logger/#markdown_exec.logger.get_logger","title":"get_logger","text":"<pre><code>get_logger(name)\n</code></pre> <p>Create and return a new logger instance.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The logger name.</p> required <p>Returns:</p> Type Description <code>_Logger</code> <p>The logger.</p> Source code in <code>src/markdown_exec/logger.py</code> <pre><code>def get_logger(name: str) -&gt; _Logger:\n\"\"\"Create and return a new logger instance.\n\n    Parameters:\n        name: The logger name.\n\n    Returns:\n        The logger.\n    \"\"\"\n    return _Logger(name)\n</code></pre>"},{"location":"reference/markdown_exec/logger/#markdown_exec.logger.patch_loggers","title":"patch_loggers","text":"<pre><code>patch_loggers(get_logger_func)\n</code></pre> <p>Patch loggers.</p> <p>Parameters:</p> Name Type Description Default <code>get_logger_func</code> <code>Callable[[str], Any]</code> <p>A function accepting a name as parameter and returning a logger.</p> required Source code in <code>src/markdown_exec/logger.py</code> <pre><code>def patch_loggers(get_logger_func: Callable[[str], Any]) -&gt; None:\n\"\"\"Patch loggers.\n\n    Parameters:\n        get_logger_func: A function accepting a name as parameter and returning a logger.\n    \"\"\"\n    _Logger._patch_loggers(get_logger_func)\n</code></pre>"},{"location":"reference/markdown_exec/mkdocs_plugin/","title":"mkdocs_plugin","text":"<p>This module contains an optional plugin for MkDocs.</p>"},{"location":"reference/markdown_exec/mkdocs_plugin/#markdown_exec.mkdocs_plugin.MarkdownExecPlugin","title":"MarkdownExecPlugin","text":"<p>         Bases: <code>BasePlugin</code></p> <p>MkDocs plugin to easily enable custom fences for code blocks execution.</p>"},{"location":"reference/markdown_exec/mkdocs_plugin/#markdown_exec.mkdocs_plugin.MarkdownExecPlugin.on_config","title":"on_config","text":"<pre><code>on_config(config, **kwargs)\n</code></pre> <p>Configure the plugin.</p> <p>Hook for the <code>on_config</code> event. In this hook, we add custom fences for all the supported languages.</p> <p>We also save the Markdown extensions configuration into <code>markdown_config</code>.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>Config</code> <p>The MkDocs config object.</p> required <code>**kwargs</code> <code>Any</code> <p>Additional arguments passed by MkDocs.</p> <code>{}</code> <p>Returns:</p> Type Description <code>Config</code> <p>The modified config.</p> Source code in <code>src/markdown_exec/mkdocs_plugin.py</code> <pre><code>def on_config(self, config: Config, **kwargs: Any) -&gt; Config:  # noqa: ARG002\n\"\"\"Configure the plugin.\n\n    Hook for the [`on_config` event](https://www.mkdocs.org/user-guide/plugins/#on_config).\n    In this hook, we add custom fences for all the supported languages.\n\n    We also save the Markdown extensions configuration\n    into [`markdown_config`][markdown_exec.rendering.markdown_config].\n\n    Arguments:\n        config: The MkDocs config object.\n        **kwargs: Additional arguments passed by MkDocs.\n\n    Returns:\n        The modified config.\n    \"\"\"\n    self.languages = self.config[\"languages\"]\n    mdx_configs = config.setdefault(\"mdx_configs\", {})\n    superfences = mdx_configs.setdefault(\"pymdownx.superfences\", {})\n    custom_fences = superfences.setdefault(\"custom_fences\", [])\n    for language in self.languages:\n        custom_fences.append(\n            {\n                \"name\": language,\n                \"class\": language,\n                \"validator\": validator,\n                \"format\": formatter,\n            },\n        )\n    markdown_config.save(config[\"markdown_extensions\"], config[\"mdx_configs\"])\n    return config\n</code></pre>"},{"location":"reference/markdown_exec/processors/","title":"processors","text":"<p>This module contains a Markdown extension allowing to integrate generated headings into the ToC.</p>"},{"location":"reference/markdown_exec/processors/#markdown_exec.processors.HeadingReportingTreeprocessor","title":"HeadingReportingTreeprocessor","text":"<pre><code>HeadingReportingTreeprocessor(md, headings)\n</code></pre> <p>         Bases: <code>Treeprocessor</code></p> <p>Records the heading elements encountered in the document.</p> Source code in <code>src/markdown_exec/processors.py</code> <pre><code>def __init__(self, md: Markdown, headings: list[Element]):  # noqa: D107\n    super().__init__(md)\n    self.headings = headings\n</code></pre>"},{"location":"reference/markdown_exec/processors/#markdown_exec.processors.IdPrependingTreeprocessor","title":"IdPrependingTreeprocessor","text":"<pre><code>IdPrependingTreeprocessor(md, id_prefix)\n</code></pre> <p>         Bases: <code>Treeprocessor</code></p> <p>Prepend the configured prefix to IDs of all HTML elements.</p> Source code in <code>src/markdown_exec/processors.py</code> <pre><code>def __init__(self, md: Markdown, id_prefix: str) -&gt; None:  # noqa: D107\n    super().__init__(md)\n    self.id_prefix = id_prefix\n</code></pre>"},{"location":"reference/markdown_exec/processors/#markdown_exec.processors.InsertHeadings","title":"InsertHeadings","text":"<pre><code>InsertHeadings(md)\n</code></pre> <p>         Bases: <code>Treeprocessor</code></p> <p>Our headings insertor.</p> <p>Parameters:</p> Name Type Description Default <code>md</code> <code>Markdown</code> <p>A <code>markdown.Markdown</code> instance.</p> required Source code in <code>src/markdown_exec/processors.py</code> <pre><code>def __init__(self, md: Markdown):\n\"\"\"Initialize the object.\n\n    Arguments:\n        md: A `markdown.Markdown` instance.\n    \"\"\"\n    super().__init__(md)\n    self.headings: dict[Markup, list[Element]] = {}\n</code></pre>"},{"location":"reference/markdown_exec/processors/#markdown_exec.processors.RemoveHeadings","title":"RemoveHeadings","text":"<p>         Bases: <code>Treeprocessor</code></p> <p>Our headings remover.</p>"},{"location":"reference/markdown_exec/rendering/","title":"rendering","text":"<p>Markdown extensions and helpers.</p>"},{"location":"reference/markdown_exec/rendering/#markdown_exec.rendering.markdown_config","title":"markdown_config  <code>module-attribute</code>","text":"<pre><code>markdown_config = MarkdownConfig()\n</code></pre> <p>This object can be used to save the configuration of your Markdown extensions.</p> <p>For example, since we provide a MkDocs plugin, we use it to store the configuration that was read from <code>mkdocs.yml</code>:</p> <pre><code>from markdown_exec.rendering import markdown_config\n\n# ...in relevant events/hooks, access and modify extensions and their configs, then:\nmarkdown_config.save(extensions, extensions_config)\n</code></pre> <p>See the actual event hook: <code>on_config</code>. See the <code>save</code> and <code>reset</code> methods.</p> <p>Without it, Markdown Exec will rely on the <code>registeredExtensions</code> attribute of the original Markdown instance, which does not forward everything that was configured, notably extensions like <code>tables</code>. Other extensions such as <code>attr_list</code> are visible, but fail to register properly when reusing their instances. It means that the rendered HTML might differ from what you expect (tables not rendered, attribute lists not injected, emojis not working, etc.).</p>"},{"location":"reference/markdown_exec/rendering/#markdown_exec.rendering.MarkdownConfig","title":"MarkdownConfig","text":"<pre><code>MarkdownConfig()\n</code></pre> <p>This class returns a singleton used to store Markdown extensions configuration.</p> <p>You don't have to instantiate the singleton yourself: we provide it as <code>markdown_config</code>.</p> Source code in <code>src/markdown_exec/rendering.py</code> <pre><code>def __init__(self) -&gt; None:  # noqa: D107\n    self.exts: list[str | Extension] | None = None\n    self.exts_config: dict[str, dict[str, Any]] | None = None\n</code></pre>"},{"location":"reference/markdown_exec/rendering/#markdown_exec.rendering.MarkdownConfig.reset","title":"reset","text":"<pre><code>reset()\n</code></pre> <p>Reset Markdown extensions and their configuration.</p> Source code in <code>src/markdown_exec/rendering.py</code> <pre><code>def reset(self) -&gt; None:\n\"\"\"Reset Markdown extensions and their configuration.\"\"\"\n    self.exts = None\n    self.exts_config = None\n</code></pre>"},{"location":"reference/markdown_exec/rendering/#markdown_exec.rendering.MarkdownConfig.save","title":"save","text":"<pre><code>save(exts, exts_config)\n</code></pre> <p>Save Markdown extensions and their configuration.</p> <p>Parameters:</p> Name Type Description Default <code>exts</code> <code>list[str | Extension]</code> <p>The Markdown extensions.</p> required <code>exts_config</code> <code>dict[str, dict[str, Any]]</code> <p>The extensions configuration.</p> required Source code in <code>src/markdown_exec/rendering.py</code> <pre><code>def save(self, exts: list[str | Extension], exts_config: dict[str, dict[str, Any]]) -&gt; None:\n\"\"\"Save Markdown extensions and their configuration.\n\n    Parameters:\n        exts: The Markdown extensions.\n        exts_config: The extensions configuration.\n    \"\"\"\n    self.exts = exts\n    self.exts_config = exts_config\n</code></pre>"},{"location":"reference/markdown_exec/rendering/#markdown_exec.rendering.MarkdownConverter","title":"MarkdownConverter","text":"<pre><code>MarkdownConverter(md, *, update_toc=True)\n</code></pre> <p>Helper class to avoid breaking the original Markdown instance state.</p> Source code in <code>src/markdown_exec/rendering.py</code> <pre><code>def __init__(self, md: Markdown, *, update_toc: bool = True) -&gt; None:  # noqa: D107\n    self._md_ref: Markdown = md\n    self._headings: list[Element] = []\n    self._update_toc = update_toc\n</code></pre>"},{"location":"reference/markdown_exec/rendering/#markdown_exec.rendering.MarkdownConverter.convert","title":"convert","text":"<pre><code>convert(text, stash=None, id_prefix=None)\n</code></pre> <p>Convert Markdown text to safe HTML.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Markdown text.</p> required <code>stash</code> <code>dict[str, str] | None</code> <p>An HTML stash.</p> <code>None</code> <p>Returns:</p> Type Description <code>Markup</code> <p>Safe HTML.</p> Source code in <code>src/markdown_exec/rendering.py</code> <pre><code>def convert(self, text: str, stash: dict[str, str] | None = None, id_prefix: str | None = None) -&gt; Markup:\n\"\"\"Convert Markdown text to safe HTML.\n\n    Parameters:\n        text: Markdown text.\n        stash: An HTML stash.\n\n    Returns:\n        Safe HTML.\n    \"\"\"\n    md = _mimic(self._original_md, self._headings, update_toc=self._update_toc)\n\n    # convert markdown to html\n    with _id_prefix(md, id_prefix):\n        converted = md.convert(text)\n\n    # restore html from stash\n    for placeholder, stashed in (stash or {}).items():\n        converted = converted.replace(placeholder, stashed)\n\n    markup = Markup(converted)\n\n    # pass headings to upstream conversion layer\n    if self._update_toc:\n        self._report_headings(markup)\n\n    return markup\n</code></pre>"},{"location":"reference/markdown_exec/rendering/#markdown_exec.rendering.add_source","title":"add_source","text":"<pre><code>add_source(\n    *,\n    source,\n    location,\n    output,\n    language,\n    tabs,\n    result=\"\",\n    **extra\n)\n</code></pre> <p>Add source code block to the output.</p> <p>Parameters:</p> Name Type Description Default <code>source</code> <code>str</code> <p>The source code block.</p> required <code>location</code> <code>str</code> <p>Where to add the source (above, below, tabbed-left, tabbed-right, console).</p> required <code>output</code> <code>str</code> <p>The current output.</p> required <code>language</code> <code>str</code> <p>The code language.</p> required <code>tabs</code> <code>tuple[str, str]</code> <p>Tabs titles (if used).</p> required <code>result</code> <code>str</code> <p>Syntax to use when concatenating source and result with \"console\" location.</p> <code>''</code> <code>**extra</code> <code>str</code> <p>Extra options added back to source code block.</p> <code>{}</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>When the given location is not supported.</p> <p>Returns:</p> Type Description <code>str</code> <p>The updated output.</p> Source code in <code>src/markdown_exec/rendering.py</code> <pre><code>def add_source(\n    *,\n    source: str,\n    location: str,\n    output: str,\n    language: str,\n    tabs: tuple[str, str],\n    result: str = \"\",\n    **extra: str,\n) -&gt; str:\n\"\"\"Add source code block to the output.\n\n    Parameters:\n        source: The source code block.\n        location: Where to add the source (above, below, tabbed-left, tabbed-right, console).\n        output: The current output.\n        language: The code language.\n        tabs: Tabs titles (if used).\n        result: Syntax to use when concatenating source and result with \"console\" location.\n        **extra: Extra options added back to source code block.\n\n    Raises:\n        ValueError: When the given location is not supported.\n\n    Returns:\n        The updated output.\n    \"\"\"\n    source = _hide_lines(source)\n    if location == \"console\":\n        return code_block(result or language, source + \"\\n\" + output, **extra)\n\n    source_block = code_block(language, source, **extra)\n    if location == \"above\":\n        return source_block + \"\\n\\n\" + output\n    if location == \"below\":\n        return output + \"\\n\\n\" + source_block\n    if location == \"material-block\":\n        return source_block + f'\\n\\n&lt;div class=\"result\" markdown=\"1\" &gt;\\n\\n{output}\\n\\n&lt;/div&gt;'\n\n    source_tab_title, result_tab_title = tabs\n    if location == \"tabbed-left\":\n        return tabbed((source_tab_title, source_block), (result_tab_title, output))\n    if location == \"tabbed-right\":\n        return tabbed((result_tab_title, output), (source_tab_title, source_block))\n\n    raise ValueError(f\"unsupported location for sources: {location}\")\n</code></pre>"},{"location":"reference/markdown_exec/rendering/#markdown_exec.rendering.code_block","title":"code_block","text":"<pre><code>code_block(language, code, **options)\n</code></pre> <p>Format code as a code block.</p> <p>Parameters:</p> Name Type Description Default <code>language</code> <code>str</code> <p>The code block language.</p> required <code>code</code> <code>str</code> <p>The source code to format.</p> required <code>**options</code> <code>str</code> <p>Additional options passed from the source, to add back to the generated code block.</p> <code>{}</code> <p>Returns:</p> Type Description <code>str</code> <p>The formatted code block.</p> Source code in <code>src/markdown_exec/rendering.py</code> <pre><code>def code_block(language: str, code: str, **options: str) -&gt; str:\n\"\"\"Format code as a code block.\n\n    Parameters:\n        language: The code block language.\n        code: The source code to format.\n        **options: Additional options passed from the source, to add back to the generated code block.\n\n    Returns:\n        The formatted code block.\n    \"\"\"\n    opts = \" \".join(f'{opt_name}=\"{opt_value}\"' for opt_name, opt_value in options.items())\n    return f\"````````{language} {opts}\\n{code}\\n````````\"\n</code></pre>"},{"location":"reference/markdown_exec/rendering/#markdown_exec.rendering.tabbed","title":"tabbed","text":"<pre><code>tabbed(*tabs)\n</code></pre> <p>Format tabs using <code>pymdownx.tabbed</code> extension.</p> <p>Parameters:</p> Name Type Description Default <code>*tabs</code> <code>tuple[str, str]</code> <p>Tuples of strings: title and text.</p> <code>()</code> <p>Returns:</p> Type Description <code>str</code> <p>The formatted tabs.</p> Source code in <code>src/markdown_exec/rendering.py</code> <pre><code>def tabbed(*tabs: tuple[str, str]) -&gt; str:\n\"\"\"Format tabs using `pymdownx.tabbed` extension.\n\n    Parameters:\n        *tabs: Tuples of strings: title and text.\n\n    Returns:\n        The formatted tabs.\n    \"\"\"\n    parts = []\n    for title, text in tabs:\n        title = title.replace(r\"\\|\", \"|\").strip()  # noqa: PLW2901\n        parts.append(f'=== \"{title}\"')\n        parts.append(indent(text, prefix=\" \" * 4))\n        parts.append(\"\")\n    return \"\\n\".join(parts)\n</code></pre>"},{"location":"reference/markdown_exec/formatters/","title":"Index","text":"<p>This subpackage contains all the formatters.</p>"},{"location":"reference/markdown_exec/formatters/base/","title":"base","text":"<p>Generic formatter for executing code.</p>"},{"location":"reference/markdown_exec/formatters/base/#markdown_exec.formatters.base.ExecutionError","title":"ExecutionError","text":"<pre><code>ExecutionError(message, returncode=None)\n</code></pre> <p>         Bases: <code>Exception</code></p> <p>Exception raised for errors during execution of a code block.</p> <p>Attributes:</p> Name Type Description <code>message</code> <p>The exception message.</p> <code>returncode</code> <p>The code returned by the execution of the code block.</p> Source code in <code>src/markdown_exec/formatters/base.py</code> <pre><code>def __init__(self, message: str, returncode: int | None = None) -&gt; None:  # noqa: D107\n    super().__init__(message)\n    self.returncode = returncode\n</code></pre>"},{"location":"reference/markdown_exec/formatters/base/#markdown_exec.formatters.base.base_format","title":"base_format","text":"<pre><code>base_format(\n    *,\n    language,\n    run,\n    code,\n    md,\n    html=False,\n    source=\"\",\n    result=\"\",\n    tabs=default_tabs,\n    id=\"\",\n    id_prefix=None,\n    returncode=0,\n    transform_source=None,\n    session=None,\n    update_toc=True,\n    **options\n)\n</code></pre> <p>Execute code and return HTML.</p> <p>Parameters:</p> Name Type Description Default <code>language</code> <code>str</code> <p>The code language.</p> required <code>run</code> <code>Callable</code> <p>Function that runs code and returns output.</p> required <code>code</code> <code>str</code> <p>The code to execute.</p> required <code>md</code> <code>Markdown</code> <p>The Markdown instance.</p> required <code>html</code> <code>bool</code> <p>Whether to inject output as HTML directly, without rendering.</p> <code>False</code> <code>source</code> <code>str</code> <p>Whether to show source as well, and where.</p> <code>''</code> <code>result</code> <code>str</code> <p>If provided, use as language to format result in a code block.</p> <code>''</code> <code>tabs</code> <code>tuple[str, str]</code> <p>Titles of tabs (if used).</p> <code>default_tabs</code> <code>id</code> <code>str</code> <p>An optional ID for the code block (useful when warning about errors).</p> <code>''</code> <code>id_prefix</code> <code>str | None</code> <p>A string used to prefix HTML ids in the generated HTML.</p> <code>None</code> <code>returncode</code> <code>int</code> <p>The expected exit code.</p> <code>0</code> <code>transform_source</code> <code>Callable[[str], tuple[str, str]] | None</code> <p>An optional callable that returns transformed versions of the source. The input source is the one that is ran, the output source is the one that is rendered (when the source option is enabled).</p> <code>None</code> <code>session</code> <code>str | None</code> <p>A session name, to persist state between executed code blocks.</p> <code>None</code> <code>update_toc</code> <code>bool</code> <p>Whether to include generated headings into the Markdown table of contents (toc extension).</p> <code>True</code> <code>**options</code> <code>Any</code> <p>Additional options passed from the formatter.</p> <code>{}</code> <p>Returns:</p> Type Description <code>Markup</code> <p>HTML contents.</p> Source code in <code>src/markdown_exec/formatters/base.py</code> <pre><code>def base_format(\n    *,\n    language: str,\n    run: Callable,\n    code: str,\n    md: Markdown,\n    html: bool = False,\n    source: str = \"\",\n    result: str = \"\",\n    tabs: tuple[str, str] = default_tabs,\n    id: str = \"\",  # noqa: A002\n    id_prefix: str | None = None,\n    returncode: int = 0,\n    transform_source: Callable[[str], tuple[str, str]] | None = None,\n    session: str | None = None,\n    update_toc: bool = True,\n    **options: Any,\n) -&gt; Markup:\n\"\"\"Execute code and return HTML.\n\n    Parameters:\n        language: The code language.\n        run: Function that runs code and returns output.\n        code: The code to execute.\n        md: The Markdown instance.\n        html: Whether to inject output as HTML directly, without rendering.\n        source: Whether to show source as well, and where.\n        result: If provided, use as language to format result in a code block.\n        tabs: Titles of tabs (if used).\n        id: An optional ID for the code block (useful when warning about errors).\n        id_prefix: A string used to prefix HTML ids in the generated HTML.\n        returncode: The expected exit code.\n        transform_source: An optional callable that returns transformed versions of the source.\n            The input source is the one that is ran, the output source is the one that is\n            rendered (when the source option is enabled).\n        session: A session name, to persist state between executed code blocks.\n        update_toc: Whether to include generated headings\n            into the Markdown table of contents (toc extension).\n        **options: Additional options passed from the formatter.\n\n    Returns:\n        HTML contents.\n    \"\"\"\n    markdown = MarkdownConverter(md, update_toc=update_toc)\n    extra = options.get(\"extra\", {})\n\n    if transform_source:\n        source_input, source_output = transform_source(code)\n    else:\n        source_input = code\n        source_output = code\n\n    try:\n        output = run(source_input, returncode=returncode, session=session, id=id, **extra)\n    except ExecutionError as error:\n        identifier = id or extra.get(\"title\", \"\")\n        identifier = identifier and f\"'{identifier}' \"\n        exit_message = \"errors\" if error.returncode is None else f\"unexpected code {error.returncode}\"\n        log_message = (\n            f\"Execution of {language} code block {identifier}exited with {exit_message}\\n\\n\"\n            f\"Code block is:\\n\\n{_format_log_details(source_input)}\\n\\n\"\n            f\"Output is:\\n\\n{_format_log_details(str(error), strip_fences=True)}\\n\"\n        )\n        logger.warning(log_message)\n        return markdown.convert(str(error))\n\n    if html:\n        if source:\n            placeholder = str(uuid4())\n            wrapped_output = add_source(\n                source=source_output,\n                location=source,\n                output=placeholder,\n                language=language,\n                tabs=tabs,\n                **extra,\n            )\n            return markdown.convert(wrapped_output, stash={placeholder: output})\n        return Markup(output)\n\n    wrapped_output = output\n    if result and source != \"console\":\n        wrapped_output = code_block(result, output)\n    if source:\n        wrapped_output = add_source(\n            source=source_output,\n            location=source,\n            output=wrapped_output,\n            language=language,\n            tabs=tabs,\n            result=result,\n            **extra,\n        )\n    prefix = id_prefix if id_prefix is not None else (f\"{id}-\" if id else None)\n    return markdown.convert(wrapped_output, id_prefix=prefix)\n</code></pre>"},{"location":"reference/markdown_exec/formatters/bash/","title":"bash","text":"<p>Formatter for executing shell code.</p>"},{"location":"reference/markdown_exec/formatters/console/","title":"console","text":"<p>Formatter for executing shell console code.</p>"},{"location":"reference/markdown_exec/formatters/markdown/","title":"markdown","text":"<p>Formatter for literate Markdown.</p>"},{"location":"reference/markdown_exec/formatters/pycon/","title":"pycon","text":"<p>Formatter for executing <code>pycon</code> code.</p>"},{"location":"reference/markdown_exec/formatters/pyodide/","title":"pyodide","text":"<p>Formatter for creating a Pyodide interactive editor.</p>"},{"location":"reference/markdown_exec/formatters/python/","title":"python","text":"<p>Formatter for executing Python code.</p>"},{"location":"reference/markdown_exec/formatters/sh/","title":"sh","text":"<p>Formatter for executing shell code.</p>"},{"location":"reference/markdown_exec/formatters/tree/","title":"tree","text":"<p>Formatter for file-system trees.</p>"},{"location":"usage/","title":"Usage","text":"<p>Once the extension is configured (see README/Overview), you can execute code blocks by enabling the <code>exec</code> option:</p> <pre><code>```python exec=\"on\"\nprint(\"Hello Markdown!\")\n```\n</code></pre> <p>The <code>exec</code> option will be true for every possible value except <code>0</code>, <code>no</code>, <code>off</code> and <code>false</code> (case insensitive).</p>"},{"location":"usage/#options-summary","title":"Options summary","text":"<p>As the number of options grew over time, we now provide this summary listing every option, linking to their related documentation:</p> <ul> <li><code>exec</code>: The mother of all other options, enabling code execution.</li> <li><code>html</code>: Whether the output is alredady HTML, or needs to be converted from Markdown to HTML.</li> <li><code>id</code>: Give an identifier to your code blocks to help     debugging errors, or to prefix HTML ids.</li> <li><code>idprefix</code>: Change or remove the prefix in front of HTML ids/hrefs.</li> <li><code>result</code>: Choose the syntax highlight of your code block output.</li> <li><code>returncode</code>: Tell what return code is expected (shell code).</li> <li><code>session</code>: Execute code blocks within a named session, reusing previously defined variables, etc..</li> <li><code>source</code>: Render the source as well as the output.</li> <li><code>tabs</code>: When rendering the source using tabs, choose the tabs titles.</li> <li><code>title</code>: Title is a Material for MkDocs option.</li> <li><code>updatetoc</code>: Whether to update the Table of Contents with generated headings.</li> </ul>"},{"location":"usage/#html-vs-markdown","title":"HTML vs. Markdown","text":"<p>By default, Markdown Exec will render what you print as Markdown. If you want to skip rendering, to inject HTML directly, you can set the <code>html</code> option to true.</p> <p>HTML Example:</p> MarkdownRendered <pre><code>System information:\n\n```python exec=\"true\" html=\"true\"\nimport platform\n\nprint(\n    f\"\"\"\n    &lt;ul&gt;\n    &lt;li&gt;machine: &lt;code&gt;{platform.machine()}&lt;/code&gt;&lt;/li&gt;\n    &lt;li&gt;version: &lt;code&gt;{platform.version()}&lt;/code&gt;&lt;/li&gt;\n    &lt;li&gt;platform: &lt;code&gt;{platform.platform()}&lt;/code&gt;&lt;/li&gt;\n    &lt;li&gt;system: &lt;code&gt;{platform.system()}&lt;/code&gt;&lt;/li&gt;\n    &lt;/ul&gt;\n    \"\"\"\n)\n```\n</code></pre> <p>System information:</p> <p> <ul> <li>machine: <code>x86_64</code></li> <li>version: <code>#1 SMP PREEMPT_DYNAMIC Thu, 20 Apr 2023 16:11:55 +0000</code></li> <li>platform: <code>Linux-6.2.12-arch1-1-x86_64-with-glibc2.37</code></li> <li>system: <code>Linux</code></li> </ul> </p> <p>Markdown Example:</p> MarkdownRendered <pre><code>System information:\n\n```python exec=\"true\"\nimport platform\nfrom textwrap import dedent\n\nprint(\n    # we must dedent, otherwise Markdown\n    # will render it as a code block!\n    dedent(\n        f\"\"\"\n        - machine: `{platform.machine()}`\n- version: `{platform.version()}`\n- platform: `{platform.platform()}`\n- system: `{platform.system()}`\n        \"\"\"\n    )\n)\n```\n</code></pre> <p>System information:</p> <ul> <li>machine: <code>x86_64</code></li> <li>version: <code>#1 SMP PREEMPT_DYNAMIC Thu, 20 Apr 2023 16:11:55 +0000</code></li> <li>platform: <code>Linux-6.2.12-arch1-1-x86_64-with-glibc2.37</code></li> <li>system: <code>Linux</code></li> </ul>"},{"location":"usage/#generated-headings-in-table-of-contents","title":"Generated headings in Table of Contents","text":"<p>If you are using Python Markdown's <code>toc</code> extension, or writing docs with MkDocs, you will notice that the headings you generated by executing a code block appear in the table of contents. If you don't want those headings to appear in the ToC, you can use the <code>updatetoc=\"no\"</code> boolean option:</p> <pre><code>```python exec=\"1\" updatetoc=\"no\"\nprint(\"# XL heading\\n\")\nprint(\"## L heading\\n\")\nprint(\"### M heading\\n\")\nprint(\"#### S heading\\n\")\n```\n</code></pre>"},{"location":"usage/#html-ids","title":"HTML ids","text":"<p>When your executed code blocks output Markdown, this Markdown is rendered to HTML, and every HTML id is automatically prefixed with <code>exec-N--</code>, where N is an integer incremented with each code block. To avoid breaking links, every <code>href</code> attribute is also updated when relevant.</p> <p>You can change this prefix, or completely remove it with the <code>idprefix</code> option.</p> <p>The following ids are not prefixed:</p> <pre><code>```python exec=\"1\" idprefix=\"\" updatetoc=\"no\"\nprint(\"#### Commands\")\nprint(\"\\n[link to commands](#commands)\")\n```\n</code></pre> <p>The following ids are prefixed with <code>cli-</code>:</p> <pre><code>```python exec=\"1\" idprefix=\"cli-\" updatetoc=\"no\"\nprint(\"#### Commands\")\nprint(\"\\n[link to commands](#commands)\")\n```\n</code></pre> <p>If <code>idprefix</code> is not specified, and <code>id</code> is specified, then the id is used as prefix:</p> <p>The following ids are prefixed with <code>super-cli-</code>:</p> <pre><code>```python exec=\"1\" id=\"super-cli\" updatetoc=\"no\"\nprint(\"#### Commands\")\nprint(\"\\n[link to commands](#commands)\")\n```\n</code></pre>"},{"location":"usage/#commands","title":"Commands","text":"<p>link to commands</p>"},{"location":"usage/#cli-commands","title":"Commands","text":"<p>link to commands</p>"},{"location":"usage/#super-cli-commands","title":"Commands","text":"<p>link to commands</p>"},{"location":"usage/#render-the-source-code-as-well","title":"Render the source code as well","text":"<p>It's possible to render both the result of the executed code block and the code block itself. For this, use the <code>source</code> option with one of the following values:</p> <ul> <li><code>above</code>: The source code will be rendered above the result.</li> <li><code>below</code>: The source code will be rendered below the result.</li> <li><code>material-block</code>: The source code and result will be wrapped in a nice-looking block     (only works with Material for MkDocs,     and requires the <code>md_in_html</code> extension)</li> <li><code>tabbed-left</code>: The source code and result will be rendered in tabs, in that order     (requires the <code>pymdownx.tabbed</code> extension).</li> <li><code>tabbed-right</code>: The result and source code will be rendered in tabs, in that order     (requires the <code>pymdownx.tabbed</code> extension).</li> <li><code>console</code>: The source and result are concatenated in a single code block, like an interactive console session.</li> </ul> <p>Source above:</p> MarkdownRendered <pre><code>```python exec=\"true\" source=\"above\"\nprint(\"I'm the result!\")\n```\n</code></pre> <pre><code>print(\"I'm the result!\")\n</code></pre> <p>I'm the result!</p> <p>Source below:</p> MarkdownRendered <pre><code>```python exec=\"true\" source=\"below\"\nprint(\"I'm the result!\")\n```\n</code></pre> <p>I'm the result!</p> <pre><code>print(\"I'm the result!\")\n</code></pre> <p>Material block:</p> MarkdownRendered <pre><code>```python exec=\"true\" source=\"material-block\"\nprint(\"I'm the result!\")\n```\n</code></pre> <pre><code>print(\"I'm the result!\")\n</code></pre> <p>I'm the result!</p> <p>Important</p> <p>The <code>material-block</code> source option requires that you enable the <code>md_in_html</code> Markdown extension.</p> <p>Tabbed on the left:</p> MarkdownRendered <pre><code>```python exec=\"true\" source=\"tabbed-left\"\nprint(\"I'm the result!\")\n```\n</code></pre> SourceResult <pre><code>print(\"I'm the result!\")\n</code></pre> <p>I'm the result!</p> <p>Important</p> <p>The <code>tabbed-left</code> source option requires that you enable the <code>pymdownx.tabbed</code> Markdown extension.</p> <p>Tabbed on the right:</p> MarkdownRendered <pre><code>```python exec=\"true\" source=\"tabbed-right\"\nprint(\"I'm the result!\")\n```\n</code></pre> ResultSource <p>I'm the result!</p> <pre><code>print(\"I'm the result!\")\n</code></pre> <p>Important</p> <p>The <code>tabbed-left</code> source option requires that you enable the <code>pymdownx.tabbed</code> Markdown extension.</p> <p>Console (best used with actual session syntax like <code>pycon</code> or <code>console</code>):</p> MarkdownRendered <pre><code>```pycon exec=\"true\" source=\"console\"\n&gt;&gt;&gt; print(\"I'm the result!\")\nI'm not the result...\n```\n</code></pre> <pre><code>&gt;&gt;&gt; print(\"I'm the result!\")\nI'm the result!\n</code></pre>"},{"location":"usage/#hiding-lines-from-the-source","title":"Hiding lines from the source","text":"<p>Every line that contains the string <code>markdown-exec: hide</code> will be hidden from the displayed source.</p> MarkdownRendered <pre><code>```python exec=\"true\" source=\"above\"\nprint(\"Hello World!\")\nprint(\"&lt;hr&gt;\")  # markdown-exec: hide\n```\n</code></pre> <p><pre><code>print(\"Hello World!\")\n</code></pre> <p>Hello World!</p> </p>"},{"location":"usage/#change-the-titles-of-tabs","title":"Change the titles of tabs","text":"<p>In the previous example, we didn't specify any title for tabs, so Markdown Exec used \"Source\" and \"Result\" by default. You can customize the titles with the <code>tabs</code> option:</p> MarkdownRendered <pre><code>```python exec=\"1\" source=\"tabbed-left\" tabs=\"Source code|Output\"\nprint(\"I'm the result!\")\n```\n</code></pre> Source codeOutput <pre><code>print(\"I'm the result!\")\n</code></pre> <p>I'm the result!</p> <p>As you can see, titles are separated with a pipe <code>|</code>. Both titles are stripped so you can add space around the pipe. If you need to use that character in a title, simply escape it with <code>\\|</code>:</p> MarkdownRendered <pre><code>```python exec=\"1\" source=\"tabbed-left\" tabs=\"OR operator: a \\|\\| b | Boolean matrix\"\nprint()\nprint(\"a   | b   | a \\\\|\\\\| b\")\nprint(\"--- | --- | ---\")\nfor a in (True, False):\n    for b in (True, False):\n        print(f\"{a} | {b} | {a or b}\")\nprint()\n```\n</code></pre> OR operator: a || bBoolean matrix <pre><code>print()\nprint(\"a   | b   | a \\\\|\\\\| b\")\nprint(\"--- | --- | ---\")\nfor a in (True, False):\n    for b in (True, False):\n        print(f\"{a} | {b} | {a or b}\")\nprint()\n</code></pre> a b a || b True True True True False True False True True False False False <p>Important</p> <p>The <code>tabs</code> option always expects the \"Source\" tab title first, and the \"Result\" tab title second. It allows to switch from tabbed-left to tabbed-right and inversely without having to switch the titles as well.</p> <p>Limitation</p> <p>Changing the title for only one tab is not supported.</p>"},{"location":"usage/#wrap-result-in-a-code-block","title":"Wrap result in a code block","text":"<p>You can wrap the result in a code block by specifying a code block language:</p> MarkdownRendered <pre><code>```console exec=\"1\" result=\"json\"\n$ pdm info --env\n```\n</code></pre> <pre><code>{\n\"implementation_name\": \"cpython\",\n\"implementation_version\": \"3.10.8\",\n\"os_name\": \"posix\",\n\"platform_machine\": \"x86_64\",\n\"platform_release\": \"6.2.12-arch1-1\",\n\"platform_system\": \"Linux\",\n\"platform_version\": \"#1 SMP PREEMPT_DYNAMIC Thu, 20 Apr 2023 16:11:55 +0000\",\n\"python_full_version\": \"3.10.8\",\n\"platform_python_implementation\": \"CPython\",\n\"python_version\": \"3.10\",\n\"sys_platform\": \"linux\"\n}\n</code></pre> <p>Limitation</p> <p>Wrapping the result is not possible when HTML output is enabled.</p>"},{"location":"usage/#additional-options","title":"Additional options","text":"<p>If you are using Material for MkDocs, you are probably familiar with the <code>title</code> option on code blocks:</p> <pre><code>```python title=\"setup.py\"\nfrom setuptools import setup\nsetup(...)\n```\n</code></pre> <p>Markdown Exec will add back these unrecognized options when rendering the source, so you can keep using them normally.</p> <p>Example:</p> MarkdownRendered <pre><code>```python exec=\"1\" source=\"above\" title=\"source.py\"\nprint(\"I'm the result!\")\n```\n</code></pre> source.py<pre><code>print(\"I'm the result!\")\n</code></pre> <p>I'm the result!</p>"},{"location":"usage/#handling-errors","title":"Handling errors","text":"<p>Code blocks execution can fail. For example, your Python code may raise exceptions, or your shell code may return a non-zero exit code (for shell commands that are expected to return non-zero, see Expecting a non-zero exit code).</p> <p>In these cases, the exception and traceback (Python), or the current output (shell) will be rendered instead of the result, and a warning will be logged.</p> <p>Example of failing code:</p> <pre><code>```python exec=\"true\"\nprint(\"hello\")\nassert 1 + 1 == 11\n```\n</code></pre> MkDocs output<pre><code>WARNING  -  markdown_exec: Execution of python code block exited with errors\n</code></pre> Rendered traceback<pre><code>Traceback (most recent call last):\n  File \"/path/to/markdown_exec/formatters/python.py\", line 23, in _run_python\n    exec(code, exec_globals)  # noqa: S102\n  File \"&lt;executed code block&gt;\", line 2, in &lt;module&gt;\n    assert 1 + 1 == 11\nAssertionError\n</code></pre> <p>With many executed code blocks in your docs, it will be hard to know which code block failed exactly. To make it easier, you can set an ID on each code block with the <code>id</code> option, and this ID will be shown in the logs:</p> <pre><code>```python exec=\"true\" id=\"print hello\"\nprint(\"hello\")\nassert 1 + 1 == 11\n```\n</code></pre> MkDocs output<pre><code>WARNING  -  markdown_exec: Execution of python code block 'print hello' exited with errors\n</code></pre> <p>Titles act as IDs as well!</p> <p>You don't need to provide an ID if you already set a (Material for MkDocs) title:</p> <pre><code>```python exec=\"true\" title=\"print world\"\nprint(\"world\")\nassert 1 + 1 == 11\n```\n</code></pre> MkDocs output<pre><code>WARNING  -  markdown_exec: Execution of python code block 'print world' exited with errors\n</code></pre>"},{"location":"usage/#sessions","title":"Sessions","text":"<p>Markdown Exec makes it possible to persist state between executed code blocks. To persist state and reuse it in other code blocks, give a session name to your blocks:</p> Sessions<pre><code>```python exec=\"1\" session=\"greet\"\ndef greet(name):\n    print(f\"Hello {name}!\")\n```\n\nHello Mushu!\n\n```python exec=\"1\" session=\"greet\"\ngreet(\"Ping\")\n```\n</code></pre> <p></p> <p>Hello Mushu!</p> <p>Hello Ping!</p> <p>Limitation</p> <p>Sessions only work with Python and Pycon syntax for now.</p>"},{"location":"usage/#literate-markdown","title":"Literate Markdown","text":"<p>With this extension, it is also possible to write \"literate programming\" Markdown.</p> <p>From Wikipedia:</p> <p>Literate programming (LP) tools are used to obtain two representations from a source file:   one understandable by a compiler or interpreter, the \"tangled\" code,   and another for viewing as formatted documentation, which is said to be \"woven\" from the literate source.</p> <p>We effectively support executing multiple nested code blocks to generate complex output. That makes for a very meta-markdown markup:</p> SourceResult <pre><code>```md exec=\"1\" source=\"material-block\" title=\"Markdown link\"\n[Link to example.com](https://example.com)\n```\n</code></pre> Markdown link<pre><code>[Link to example.com](https://example.com)\n</code></pre> <p>Link to example.com</p> <p>So power, such meta</p> <p>The above example (both tabs) was entirely generated using a literate code block in a literate code block \ud83e\udd2f:</p> <pre><code>````md exec=\"1\" source=\"tabbed-left\"\n```md exec=\"1\" source=\"material-block\" title=\"Markdown link\"\n[Link to example.com](https://example.com)\n```\n````\n</code></pre> <p>In fact, all the examples on this page were generated using this method! Check out the source here: https://github.com/pawamoy/markdown-exec/blob/master/docs/usage/index.md (click on \"Raw\" to see the code blocks execution options).</p> <p>Of course \"executing\" Markdown (or rather, making it \"literate\") only makes sense when the source is shown as well.</p>"},{"location":"usage/pyodide/","title":"Pyodide","text":"<p> Sponsors only \u2014  Insiders 1.0.0</p> <p>This special <code>pyodide</code> fence uses Pyodide, Ace and Highlight.js to render an interactive Python editor. Everything runs on the client side. The first time Pyodide is loaded by the browser can be a bit long, but then it will be cached and the next time you load the page it will be much faster.</p> <p>Click the \"Run\" button in the top-right corner, or hit Ctrl+Enter to run the code. You can install packages with Micropip:</p> RenderedMarkdown <p> Editor (session: default) Run import micropip  print(\"Installing cowsay...\") await micropip.install(\"cowsay\") print(\"done!\") Output Clear <pre><code></code></pre> </p> <pre><code>```pyodide\nimport micropip\n\nprint(\"Installing cowsay...\")\nawait micropip.install(\"cowsay\")\nprint(\"done!\")\n```\n</code></pre> <p>Then you can import and use the packages you installed:</p> RenderedMarkdown <p> Editor (session: default) Run import cowsay cowsay.cow(\"Hello World\") Output Clear <pre><code></code></pre> </p> <pre><code>```pyodide\nimport cowsay\ncowsay.cow(\"Hello World\")\n```\n</code></pre> <p>Packages installed with Micropip are cached by the browser as well, making future installations much faster.</p>"},{"location":"usage/pyodide/#sessions","title":"Sessions","text":"<p>Editors with the same session share the same <code>globals()</code> dictionary, so you can reuse variables, classes, imports, etc., from another editor within the same session. This is why you can import <code>cowsay</code> in this editor, given you actually installed it in the first. Sessions are ephemeral: everything is reset when reloading the page. This means you cannot persist sessions across multiple pages. Try refreshing your page and running the code of the second editor: you should get a ModuleNotFoundError.</p> <p>To use other sessions, simply pass the <code>session=\"name\"</code> option to the code block:</p> RenderedMarkdown <p> Editor (session: something) Run something = \"hello\" Output Clear <pre><code></code></pre> </p> <pre><code>```pyodide session=\"something\"\nsomething = \"hello\"\n```\n</code></pre> <p>Now lets print it in another editor with the same session:</p> RenderedMarkdown <p> Editor (session: something) Run print(something) Output Clear <pre><code></code></pre> </p> <pre><code>```pyodide session=\"something\"\nprint(something)\n```\n</code></pre> <p>And in another editor with the default session:</p> RenderedMarkdown <p> Editor (session: default) Run print(something) Output Clear <pre><code></code></pre> </p> <pre><code>```pyodide\nprint(something)\n```\n</code></pre>"},{"location":"usage/pyodide/#pre-installing-packages","title":"Pre-installing packages","text":"<p>In your own documentation pages, you might not want to add <code>import micropip; await micropip.install(\"your-package\")</code> to every editor to show how to use your package. In this case, you can use the <code>install</code> option to pre-install packages. The option takes a list of comma-separated package distribution names:</p> RenderedMarkdown <p> Editor (session: default) Run import griffe import dependenpy print(\"OK!\") Output Clear <pre><code></code></pre> </p> <pre><code>```pyodide install=\"griffe,dependenpy\"\nimport griffe\nimport dependenpy\nprint(\"OK!\")\n```\n</code></pre>"},{"location":"usage/python/","title":"Python","text":""},{"location":"usage/python/#regular-python","title":"Regular Python","text":"<p>Python code is executed in the current process, with isolated global variables.</p> <p>To capture the output of your code, Markdown Exec patches the <code>print</code> function so that it writes to a buffer instead of standard output.</p> MarkdownRendered <pre><code>```python exec=\"1\"\nprint(\"**Hello world!**\")\n```\n</code></pre> <p>Hello world!</p> <p>See the Gallery for more complex examples.</p>"},{"location":"usage/python/#python-console-code","title":"Python console code","text":"<p>Code blocks syntax-highlighted with the <code>pycon</code> identifier are also supported. These code blocks will be pre-processed to keep only the lines starting with <code>&gt;&gt;&gt;</code>, and the chevrons (prompt) will be removed from these lines, so we can execute them.</p> MarkdownRendered <pre><code>```pycon exec=\"1\" source=\"console\"\n&gt;&gt;&gt; print(\"I'm the result!\")\nI'm not the result...\n```\n</code></pre> <pre><code>&gt;&gt;&gt; print(\"I'm the result!\")\nI'm the result!\n</code></pre> <p>It also means that multiple blocks of instructions will be concatenated, as well as their output:</p> MarkdownRendered <pre><code>```pycon exec=\"1\" source=\"console\"\n&gt;&gt;&gt; name = \"Baron\"\n&gt;&gt;&gt; print(name)\nBaron\n&gt;&gt;&gt; age = \"???\"\n&gt;&gt;&gt; print(age)\n???\n```\n</code></pre> <pre><code>&gt;&gt;&gt; name = \"Baron\"\n&gt;&gt;&gt; print(name)\n&gt;&gt;&gt; age = \"???\"\n&gt;&gt;&gt; print(age)\nBaron\n???\n</code></pre>"},{"location":"usage/shell/","title":"Shell","text":"<p>Shell code blocks are executed using the same interpreter specified as language of the code block, in sub-processes. The output is captured and rendered as Markdown or HTML (see Usage).</p>"},{"location":"usage/shell/#bash","title":"Bash","text":"MarkdownRendered <pre><code>```bash exec=\"1\" source=\"material-block\"\necho $BASH_VERSION\n```\n</code></pre> <pre><code>echo $BASH_VERSION\n</code></pre> <p>5.1.16(1)-release</p>"},{"location":"usage/shell/#console","title":"Console","text":"MarkdownRendered <pre><code>```console exec=\"1\" source=\"console\"\n$ mkdocs --help\n```\n</code></pre> <pre><code>$ mkdocs --help\nUsage: mkdocs [OPTIONS] COMMAND [ARGS]...\n\n  MkDocs - Project documentation with Markdown.\n\nOptions:\n  -V, --version  Show the version and exit.\n  -q, --quiet    Silence warnings\n  -v, --verbose  Enable verbose output\n  -h, --help     Show this message and exit.\n\nCommands:\n  build      Build the MkDocs documentation\n  gh-deploy  Deploy your documentation to GitHub Pages\n  new        Create a new MkDocs project\n  serve      Run the builtin development server\n</code></pre>"},{"location":"usage/shell/#sh","title":"sh","text":"MarkdownRendered <pre><code>```sh exec=\"1\" source=\"material-block\"\necho Markdown is **cool**\n```\n</code></pre> <pre><code>echo Markdown is **cool**\n</code></pre> <p>Markdown is cool</p>"},{"location":"usage/shell/#expecting-a-non-zero-exit-code","title":"Expecting a non-zero exit code","text":"<p>You will sometimes want to run a command that returns a non-zero exit code, for example to show how errors look to your users.</p> <p>You can tell Markdown Exec to expect a particular exit code with the <code>returncode</code> option:</p> <pre><code>```bash exec=\"true\" returncode=\"1\"\necho Not in the mood today\nexit 1\n```\n</code></pre> <p>In that case, the executed code won't be considered to have failed, its output will be rendered normally, and no warning will be logged in the MkDocs output, allowing your strict builds to pass.</p> <p>If the exit code is different than the one specified with <code>returncode</code>, it will be considered a failure, its output will be renderer anyway (stdout and stderr combined), and a warning will be logged in the MkDocs output.</p>"},{"location":"usage/tree/","title":"Tree","text":"<p>Markdown Exec provides a <code>tree</code> formatter that can be used to render file-system trees easily:</p> MarkdownRendered <pre><code>```tree\nroot1\n    file1\n    dir1\n        file\n    dir2\n        file1\n        file2\n    file2\n    file3\nroot2\n    file1\n```\n</code></pre> <pre><code>\ud83d\udcc1 root1\n\u251c\u2500\u2500 \ud83d\udcc4 file1\n\u251c\u2500\u2500 \ud83d\udcc1 dir1\n\u2502   \u2514\u2500\u2500 \ud83d\udcc4 file\n\u251c\u2500\u2500 \ud83d\udcc1 dir2\n\u2502   \u251c\u2500\u2500 \ud83d\udcc4 file1\n\u2502   \u2514\u2500\u2500 \ud83d\udcc4 file2\n\u251c\u2500\u2500 \ud83d\udcc4 file2\n\u2514\u2500\u2500 \ud83d\udcc4 file3\n\ud83d\udcc1 root2\n\u2514\u2500\u2500 \ud83d\udcc4 file1\n</code></pre> <p>By default, the language used for syntax highlight is <code>bash</code>. It means you can add comments with <code>#</code>:</p> MarkdownRendered <pre><code>```tree\nroot1            # comment 1\n    file1\n    dir1\n        file\n    dir2\n        file1    # comment 2\n        file2    # comment 3\n    file2\n    file3\nroot2\n    file1\n```\n</code></pre> <pre><code>\ud83d\udcc1 root1            # comment 1\n\u251c\u2500\u2500 \ud83d\udcc4 file1\n\u251c\u2500\u2500 \ud83d\udcc1 dir1\n\u2502   \u2514\u2500\u2500 \ud83d\udcc4 file\n\u251c\u2500\u2500 \ud83d\udcc1 dir2\n\u2502   \u251c\u2500\u2500 \ud83d\udcc4 file1    # comment 2\n\u2502   \u2514\u2500\u2500 \ud83d\udcc4 file2    # comment 3\n\u251c\u2500\u2500 \ud83d\udcc4 file2\n\u2514\u2500\u2500 \ud83d\udcc4 file3\n\ud83d\udcc1 root2\n\u2514\u2500\u2500 \ud83d\udcc4 file1\n</code></pre> <p>You can change the syntax highlight language with the <code>result</code> option:</p> MarkdownRendered <pre><code>```tree result=\"javascript\"\nroot1            // comment 1\n    file1\n    dir1\n        file\n    dir2\n        file1    // comment 2\n        file2    // comment 3\n    file2\n    file3\nroot2\n    file1\n```\n</code></pre> <pre><code>\ud83d\udcc1 root1            // comment 1\n\u251c\u2500\u2500 \ud83d\udcc4 file1\n\u251c\u2500\u2500 \ud83d\udcc1 dir1\n\u2502   \u2514\u2500\u2500 \ud83d\udcc4 file\n\u251c\u2500\u2500 \ud83d\udcc1 dir2\n\u2502   \u251c\u2500\u2500 \ud83d\udcc4 file1    // comment 2\n\u2502   \u2514\u2500\u2500 \ud83d\udcc4 file2    // comment 3\n\u251c\u2500\u2500 \ud83d\udcc4 file2\n\u2514\u2500\u2500 \ud83d\udcc4 file3\n\ud83d\udcc1 root2\n\u2514\u2500\u2500 \ud83d\udcc4 file1\n</code></pre> <p>You can force an entry to be displayed as a directory instead of a regular file by appending a trailing slash to the name:</p> MarkdownRendered <pre><code>```tree\nroot1\n    dir1/\n    dir2/\n    dir3/\n```\n</code></pre> <pre><code>\ud83d\udcc1 root1\n\u251c\u2500\u2500 \ud83d\udcc1 dir1/\n\u251c\u2500\u2500 \ud83d\udcc1 dir2/\n\u2514\u2500\u2500 \ud83d\udcc1 dir3/\n</code></pre> <p>It is recommended to always append trailing slashes to directory anyway.</p> <p>Limitation</p> <p>Spaces in file names are not supported when searching for a trailing slash.</p>"},{"location":"coverage/","title":"Coverage report","text":""}]}