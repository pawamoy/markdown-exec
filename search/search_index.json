{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"],"fields":{"title":{"boost":1000.0},"text":{"boost":1.0},"tags":{"boost":1000000.0}}},"docs":[{"location":"","title":"Markdown Exec","text":"<p>Utilities to execute code blocks in Markdown files.</p> <p>For example, you write a Python code block that computes some HTML, and this HTML is injected in place of the code block.</p>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install \"markdown-exec[ansi]\"\n</code></pre> <p>The <code>ansi</code> extra provides the necessary bits (<code>pygments-ansi-color</code> and a CSS file) to render ANSI colors in HTML code blocks. The CSS file is automatically added to MkDocs' <code>extra_css</code> when Markdown Exec is activated via <code>plugins</code> (see below).</p>"},{"location":"#configuration","title":"Configuration","text":"<p>This extension relies on the SuperFences extension of PyMdown Extensions.</p> <p>To allow execution of code blocks, configure a custom fence from Python:</p> <pre><code>from markdown import Markdown\nfrom markdown_exec import formatter, validator\n\nMarkdown(\n    extensions=[\"pymdownx.superfences\"],\n    extension_configs={\n        \"pymdownx.superfences\": {\n            \"custom_fences\": [\n                {\n                    \"name\": \"python\",\n                    \"class\": \"python\",\n                    \"validator\": validator,\n                    \"format\": formatter,\n                }\n                # ...one fence for each language we support:\n                # bash, console, md, markdown, py, python, pycon, sh, tree\n            ]\n        }\n    }\n)\n</code></pre> <p>...or in MkDocs configuration file, as a Markdown extension:</p> <pre><code># mkdocs.yml\nmarkdown_extensions:\n- pymdownx.superfences:\n    custom_fences:\n    - name: python\n      class: python\n      validator: !!python/name:markdown_exec.validator\n      format: !!python/name:markdown_exec.formatter\n    # ...one fence for each language we support:\n    # bash, console, md, markdown, py, python, pycon, sh, tree\n</code></pre> <p>...or in MkDocs configuration file, as a plugin:</p> <pre><code># mkdocs.yml\nplugins:\n- search\n- markdown-exec\n\n# SuperFences must still be enabled!\nmarkdown_extensions:\n- pymdownx.superfences\n</code></pre> <p>We do recommend enabling Markdown Exec with the MkDocs plugin if you are using MkDocs: it will take care of adding relevant assets (CSS/JS) to the final site when needed. </p>"},{"location":"#usage","title":"Usage","text":"<p>You are now able to execute code blocks instead of displaying them:</p> <pre><code>```python exec=\"on\"\nprint(\"Hello Markdown!\")\n```\n</code></pre> <p>The <code>exec</code> option will be true for every possible value except <code>0</code>, <code>no</code>, <code>off</code> and <code>false</code> (case insensitive).</p> <p>Below you can see an example of running a bash script that is expected to return a non-zero exit code:</p> <pre><code>```bash exec=\"1\" source=\"tabbed-left\" returncode=\"2\"\ngrep extra_css README.md &amp;&amp; exit 2\n```\n</code></pre> <p>See usage for more details, and the gallery for more examples!</p>"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog and this project adheres to Semantic Versioning.</p>"},{"location":"changelog/#1110-2025-06-28","title":"1.11.0 - 2025-06-28","text":"<p>Compare with 1.10.4</p>"},{"location":"changelog/#features","title":"Features","text":"<ul> <li>Add option to set height of Pyodide/Ace editors (c64a2ef by Jayant Pranjal). Issue-41, Co-authored-by: Jayant jayant@Jayants-MacBook-Air.local, Co-authored-by: Timoth\u00e9e Mazzucotelli dev@pawamoy.fr</li> </ul>"},{"location":"changelog/#1104-2025-06-27","title":"1.10.4 - 2025-06-27","text":"<p>Compare with 1.10.3</p>"},{"location":"changelog/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>Don't fail when used as Markdown extension and MkDocs is not installed (7722250 by Timoth\u00e9e Mazzucotelli). Issue-91</li> </ul>"},{"location":"changelog/#1103-2025-03-24","title":"1.10.3 - 2025-03-24","text":"<p>Compare with 1.10.2</p>"},{"location":"changelog/#bug-fixes_1","title":"Bug Fixes","text":"<ul> <li>Also escape strings printed directly to the output (a668aeb by Timoth\u00e9e Mazzucotelli). Issue-87</li> <li>Don't forget to clear \"Initializing\" in Pyodide output (e0b52b4 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#1102-2025-03-18","title":"1.10.2 - 2025-03-18","text":"<p>Compare with 1.10.1</p>"},{"location":"changelog/#deprecations","title":"Deprecations","text":"<p>Expose public API under top-level module <code>markdown_exec</code>. Importing from submodules is now deprecated.</p>"},{"location":"changelog/#bug-fixes_2","title":"Bug Fixes","text":"<ul> <li>Escape Pyodide output, improve error handling (ec83f48 by Timoth\u00e9e Mazzucotelli). Issue-87</li> </ul>"},{"location":"changelog/#code-refactoring","title":"Code Refactoring","text":"<ul> <li>Sync API and docs (1245ed9 by Timoth\u00e9e Mazzucotelli).</li> <li>Move code under internal folder (b132e78 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#1101-2025-03-11","title":"1.10.1 - 2025-03-11","text":"<p>Compare with 1.10.0</p>"},{"location":"changelog/#build","title":"Build","text":"<ul> <li>Add lower bound to pygments-ansi-color extra (a8e17c9 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#bug-fixes_3","title":"Bug Fixes","text":"<ul> <li>Fix emoji display in pyodide fence for themes other than Material (e09e9b2 by Timoth\u00e9e Mazzucotelli). Issue-83, PR-84</li> </ul>"},{"location":"changelog/#1100-2024-12-06","title":"1.10.0 - 2024-12-06","text":"<p>Compare with 1.9.3</p>"},{"location":"changelog/#build_1","title":"Build","text":"<ul> <li>Drop support for Python 3.8 (103bc1d by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#features_1","title":"Features","text":"<ul> <li>Allow setting Pyodide version (912c8c7 by Andrew). Issue-66, PR-67, Co-authored-by: Timoth\u00e9e Mazzucotelli dev@pawamoy.fr</li> </ul>"},{"location":"changelog/#193-2024-06-24","title":"1.9.3 - 2024-06-24","text":"<p>Compare with 1.9.2</p>"},{"location":"changelog/#bug-fixes_4","title":"Bug Fixes","text":"<ul> <li>Fix patching lines in tracebacks on Python 3.13 (917af4c by Timoth\u00e9e Mazzucotelli). Issue-58</li> </ul>"},{"location":"changelog/#192-2024-06-20","title":"1.9.2 - 2024-06-20","text":"<p>Compare with 1.9.1</p>"},{"location":"changelog/#bug-fixes_5","title":"Bug Fixes","text":"<ul> <li>Render source even if output is empty (d3f1e6b by Timoth\u00e9e Mazzucotelli). Issue-57</li> </ul>"},{"location":"changelog/#191-2024-06-14","title":"1.9.1 - 2024-06-14","text":"<p>Compare with 1.9.0</p>"},{"location":"changelog/#build_2","title":"Build","text":"<ul> <li>Re-include tests folder in source distributions (ae549db by Timoth\u00e9e Mazzucotelli). Issue-55</li> </ul>"},{"location":"changelog/#190-2024-06-13","title":"1.9.0 - 2024-06-13","text":"<p>Compare with 1.8.3</p>"},{"location":"changelog/#features_2","title":"Features","text":"<ul> <li>Abort with error when the plugin is configured to require the ANSI extra but it is not installed (25bcbbe by Timoth\u00e9e Mazzucotelli).</li> <li>Allow excluding assets when rendering Pyodide fence (5412353 by Timoth\u00e9e Mazzucotelli).</li> <li>Detect when SuperFences is not enabled and error out early (5d771d2 by Timoth\u00e9e Mazzucotelli). Issue-39</li> <li>Allow changing the console width for the execution of code blocks (76d603c by Timoth\u00e9e Mazzucotelli). Issue-34</li> <li>Allow automatic execution of code blocks thanks to the <code>MARKDOWN_EXEC_AUTO</code> environment variable (0db27b2 by Timoth\u00e9e Mazzucotelli). Issue-24</li> <li>Allow changing working directory for code blocks execution (ee3fae9 by Timoth\u00e9e Mazzucotelli). Issue-20</li> </ul>"},{"location":"changelog/#bug-fixes_6","title":"Bug Fixes","text":"<ul> <li>Reuse existing loggers tp prevent wrong dispatch (8967270 by Timoth\u00e9e Mazzucotelli).</li> <li>Don't render anything when code block output is empty (4337d13 by Timoth\u00e9e Mazzucotelli). Issue-17</li> <li>Increase minimum height of Pyodide output code blocks (93598b2 by Timoth\u00e9e Mazzucotelli). Issue-40</li> <li>Fix removal of temporary div for headings forwarding (c012c1d by Timoth\u00e9e Mazzucotelli). Issue-50</li> </ul>"},{"location":"changelog/#code-refactoring_1","title":"Code Refactoring","text":"<ul> <li>Wrap placeholders in <code>&lt;div&gt;</code> to avoid them being wrapped in <code>&lt;p&gt;</code> (500ed1b by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#183-2024-05-22","title":"1.8.3 - 2024-05-22","text":"<p>Compare with 1.8.2</p>"},{"location":"changelog/#bug-fixes_7","title":"Bug Fixes","text":"<ul> <li>Don't leak future annotations in user code (ba0c35e by Timoth\u00e9e Mazzucotelli). Issue-47</li> </ul>"},{"location":"changelog/#182-2024-05-20","title":"1.8.2 - 2024-05-20","text":"<p>Compare with 1.8.1</p>"},{"location":"changelog/#bug-fixes_8","title":"Bug Fixes","text":"<ul> <li>Give <code>__name__</code> to executed Python \"modules\", and populate <code>sys.modules</code> too (db25ee7 by Timoth\u00e9e Mazzucotelli). Issue-47</li> </ul>"},{"location":"changelog/#181-2024-04-15","title":"1.8.1 - 2024-04-15","text":"<p>Compare with 1.8.0</p>"},{"location":"changelog/#bug-fixes_9","title":"Bug Fixes","text":"<ul> <li>Add missing CSS classes to the ANSI stylesheet (51493f2 by Timoth\u00e9e Mazzucotelli). Issue-43</li> </ul>"},{"location":"changelog/#180-2024-01-05","title":"1.8.0 - 2024-01-05","text":"<p>Compare with 1.7.0</p>"},{"location":"changelog/#features_3","title":"Features","text":"<ul> <li>Add <code>pyodide</code> fence (3a2fab0 by Timoth\u00e9e Mazzucotelli).</li> <li>Add <code>ansi</code> option to mark ANSI extra as required or not (27743c2 by Timoth\u00e9e Mazzucotelli). Issue #28, Issue #29</li> </ul>"},{"location":"changelog/#code-refactoring_2","title":"Code Refactoring","text":"<ul> <li>Modernize MkDocs plugin (4864608 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#170-2023-10-17","title":"1.7.0 - 2023-10-17","text":"<p>Compare with 1.6.0</p>"},{"location":"changelog/#features_4","title":"Features","text":"<ul> <li>Set <code>MKDOCS_CONFIG_DIR</code> environment variable to build file path relative to it (a2cbea5 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#160-2023-04-18","title":"1.6.0 - 2023-04-18","text":"<p>Compare with 1.5.3</p>"},{"location":"changelog/#features_5","title":"Features","text":"<ul> <li>Add <code>idprefix</code> option allowing to change/remove HTML id/href prefixes (4d91463 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#153-2023-04-18","title":"1.5.3 - 2023-04-18","text":"<p>Compare with 1.5.2</p>"},{"location":"changelog/#code-refactoring_3","title":"Code Refactoring","text":"<ul> <li>Reuse Markdown configuration as declared in mkdocs.yml (afe091c by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#152-2023-04-18","title":"1.5.2 - 2023-04-18","text":"<p>Compare with 1.5.1</p>"},{"location":"changelog/#code-refactoring_4","title":"Code Refactoring","text":"<ul> <li>Reset counter in post build event (3bf80de by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#151-2023-04-17","title":"1.5.1 - 2023-04-17","text":"<p>Compare with 1.5.0</p>"},{"location":"changelog/#bug-fixes_10","title":"Bug Fixes","text":"<ul> <li>Remove pycon output lines when rendering source as console (fb5a23d by Timoth\u00e9e Mazzucotelli).</li> <li>Fix nested rendering (a110d44 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#150-2023-04-17","title":"1.5.0 - 2023-04-17","text":"<p>Compare with 1.4.1</p>"},{"location":"changelog/#features_6","title":"Features","text":"<ul> <li>Update ToC with generated headings (5ea2263 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#141-2023-04-16","title":"1.4.1 - 2023-04-16","text":"<p>Compare with 1.4.0</p>"},{"location":"changelog/#bug-fixes_11","title":"Bug Fixes","text":"<ul> <li>Improve handling of errors within sessions (87ac5f3 by Timoth\u00e9e Mazzucotelli).</li> <li>Swallow non-extra parameters in run functions (f5d4fef by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#code-refactoring_5","title":"Code Refactoring","text":"<ul> <li>Simplify tree formatter signature (09d5427 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#140-2023-03-15","title":"1.4.0 - 2023-03-15","text":"<p>Compare with 1.3.0</p>"},{"location":"changelog/#features_7","title":"Features","text":"<ul> <li>Sessions: persist and reuse state for Python and Pycon code blocks (a8fef5e by Timoth\u00e9e Mazzucotelli). Issue #16</li> </ul>"},{"location":"changelog/#130-2023-02-18","title":"1.3.0 - 2023-02-18","text":"<p>Compare with 1.2.0</p>"},{"location":"changelog/#features_8","title":"Features","text":"<ul> <li>Support wrapping result with console source (268c82e by Timoth\u00e9e Mazzucotelli). Issue #13</li> </ul>"},{"location":"changelog/#code-refactoring_6","title":"Code Refactoring","text":"<ul> <li>Remove margin hack from Material source (beec237 by Timoth\u00e9e Mazzucotelli).</li> <li>Better support pycon syntax (22b51c6 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#120-2023-02-01","title":"1.2.0 - 2023-02-01","text":"<p>Compare with 1.1.0</p>"},{"location":"changelog/#features_9","title":"Features","text":"<ul> <li>Support ANSI code blocks (39719c5 by Timoth\u00e9e Mazzucotelli). Issue #11</li> </ul>"},{"location":"changelog/#110-2023-01-27","title":"1.1.0 - 2023-01-27","text":"<p>Compare with 1.0.0</p>"},{"location":"changelog/#features_10","title":"Features","text":"<ul> <li>Log details to help debugging errors (4c0228d by Timoth\u00e9e Mazzucotelli). Issue #12</li> <li>Allow expecting specific exit codes (620ec66 by Timoth\u00e9e Mazzucotelli). Issue #10</li> </ul>"},{"location":"changelog/#code-refactoring_7","title":"Code Refactoring","text":"<ul> <li>Formatters now only accept keyword arguments (0940ca9 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#100-2022-11-24","title":"1.0.0 - 2022-11-24","text":"<p>Compare with 0.7.4</p>"},{"location":"changelog/#features_11","title":"Features","text":"<ul> <li>Allow defining IDs on code blocks (for warnings) (0091167 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#code-refactoring_8","title":"Code Refactoring","text":"<ul> <li>Use base format everywhere (more flexible) (cefba70 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#074-2022-11-13","title":"0.7.4 - 2022-11-13","text":"<p>Compare with 0.7.3</p>"},{"location":"changelog/#bug-fixes_12","title":"Bug Fixes","text":"<ul> <li>Render source for non-HTML output (regression) (3028dcd by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#073-2022-11-13","title":"0.7.3 - 2022-11-13","text":"<p>Compare with 0.7.2</p>"},{"location":"changelog/#bug-fixes_13","title":"Bug Fixes","text":"<ul> <li>Don't wrap HTML in <code>p</code> tag (420d79d by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#072-2022-09-01","title":"0.7.2 - 2022-09-01","text":"<p>Compare with 0.7.1</p>"},{"location":"changelog/#bug-fixes_14","title":"Bug Fixes","text":"<ul> <li>Make <code>tree</code> formatter forward extra options (54996a9 by Timoth\u00e9e Mazzucotelli).</li> <li>Fix race condition issue (37d7f86 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#071-2022-08-28","title":"0.7.1 - 2022-08-28","text":"<p>Compare with 0.7.0</p>"},{"location":"changelog/#bug-fixes_15","title":"Bug Fixes","text":"<ul> <li>Allow printing non-string objects (ceaa482 by Timoth\u00e9e Mazzucotelli). Issue #7</li> </ul>"},{"location":"changelog/#070-2022-05-28","title":"0.7.0 - 2022-05-28","text":"<p>Compare with 0.6.0</p>"},{"location":"changelog/#features_12","title":"Features","text":"<ul> <li>Add ability to hide source lines (3cb1934 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#060-2022-05-21","title":"0.6.0 - 2022-05-21","text":"<p>Compare with 0.5.0</p>"},{"location":"changelog/#features_13","title":"Features","text":"<ul> <li>Add tree formatter (8096990 by Timoth\u00e9e Mazzucotelli).</li> <li>Handle code blocks execution errors and log warnings (34e16db by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#bug-fixes_16","title":"Bug Fixes","text":"<ul> <li>Fix Python execution to support nested scopes (74b9a95 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#050-2022-05-09","title":"0.5.0 - 2022-05-09","text":"<p>Compare with 0.4.0</p>"},{"location":"changelog/#features_14","title":"Features","text":"<ul> <li>Allow wrapping result in code block (37201e4 by Timoth\u00e9e Mazzucotelli).</li> <li>Add support for shell code blocks (f2b4b67 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#code-refactoring_9","title":"Code Refactoring","text":"<ul> <li>Fetch plugin languages from dict (de8309e by Timoth\u00e9e Mazzucotelli).</li> <li>Add reusable base formatter (c265bee by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#040-2022-05-09","title":"0.4.0 - 2022-05-09","text":"<p>Compare with 0.3.1</p>"},{"location":"changelog/#features_15","title":"Features","text":"<ul> <li>Add literate Markdown support (8d3ed7e by Timoth\u00e9e Mazzucotelli).</li> <li>Add <code>material-block</code> style to show source (ff10ee1 by Timoth\u00e9e Mazzucotelli).</li> <li>Support up to 8 levels of exec code block nesting (bfde808 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#031-2022-05-07","title":"0.3.1 - 2022-05-07","text":"<p>Compare with 0.3.0</p>"},{"location":"changelog/#bug-fixes_17","title":"Bug Fixes","text":"<ul> <li>Actually prevent HTML re-rendering (4374852 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#030-2022-05-01","title":"0.3.0 - 2022-05-01","text":"<p>Compare with 0.2.0</p>"},{"location":"changelog/#features_16","title":"Features","text":"<ul> <li>Support <code>pycon</code> code blocks (2c86394 by Timoth\u00e9e Mazzucotelli).</li> <li>Add <code>console</code> source integration option (62dfd74 by Timoth\u00e9e Mazzucotelli).</li> <li>Provide a MkDocs plugin for easier setup (5fce814 by Timoth\u00e9e Mazzucotelli).</li> <li>Support changing tabs titles (d150596 by Timoth\u00e9e Mazzucotelli).</li> <li>Allow using <code>print</code> in code blocks (7c124fd by Timoth\u00e9e Mazzucotelli).</li> <li>Allow passing extra opts like title to source code blocks (bb3252a by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#code-refactoring_10","title":"Code Refactoring","text":"<ul> <li>Split Python formatter to allow reuse (fc56702 by Timoth\u00e9e Mazzucotelli).</li> <li>Setup a more robust Markdown converter (395f4c4 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#020-2022-04-18","title":"0.2.0 - 2022-04-18","text":"<p>Compare with 0.1.0</p>"},{"location":"changelog/#features_17","title":"Features","text":"<ul> <li>Add ability to render using tabs (91a95ae by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#010-2022-02-19","title":"0.1.0 - 2022-02-19","text":"<p>Compare with first commit</p>"},{"location":"changelog/#features_18","title":"Features","text":"<ul> <li>Implement execution of code blocks (41c8d81 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"code_of_conduct/","title":"Contributor Covenant Code of Conduct","text":""},{"location":"code_of_conduct/#our-pledge","title":"Our Pledge","text":"<p>We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, or sexual identity and orientation.</p> <p>We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.</p>"},{"location":"code_of_conduct/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to a positive environment for our community include:</p> <ul> <li>Demonstrating empathy and kindness toward other people</li> <li>Being respectful of differing opinions, viewpoints, and experiences</li> <li>Giving and gracefully accepting constructive feedback</li> <li>Accepting responsibility and apologizing to those affected by our mistakes, and learning from the experience</li> <li>Focusing on what is best not just for us as individuals, but for the overall community</li> </ul> <p>Examples of unacceptable behavior include:</p> <ul> <li>The use of sexualized language or imagery, and sexual attention or advances of any kind</li> <li>Trolling, insulting or derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or email address, without their explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a professional setting</li> </ul>"},{"location":"code_of_conduct/#enforcement-responsibilities","title":"Enforcement Responsibilities","text":"<p>Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.</p> <p>Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.</p>"},{"location":"code_of_conduct/#scope","title":"Scope","text":"<p>This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.</p>"},{"location":"code_of_conduct/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at dev@pawamoy.fr. All complaints will be reviewed and investigated promptly and fairly.</p> <p>All community leaders are obligated to respect the privacy and security of the reporter of any incident.</p>"},{"location":"code_of_conduct/#enforcement-guidelines","title":"Enforcement Guidelines","text":"<p>Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:</p>"},{"location":"code_of_conduct/#1-correction","title":"1. Correction","text":"<p>Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.</p> <p>Consequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.</p>"},{"location":"code_of_conduct/#2-warning","title":"2. Warning","text":"<p>Community Impact: A violation through a single incident or series of actions.</p> <p>Consequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.</p>"},{"location":"code_of_conduct/#3-temporary-ban","title":"3. Temporary Ban","text":"<p>Community Impact: A serious violation of community standards, including sustained inappropriate behavior.</p> <p>Consequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.</p>"},{"location":"code_of_conduct/#4-permanent-ban","title":"4. Permanent Ban","text":"<p>Community Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals.</p> <p>Consequence: A permanent ban from any sort of public interaction within the community.</p>"},{"location":"code_of_conduct/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 2.1, available at https://www.contributor-covenant.org/version/2/1/code_of_conduct.html.</p> <p>Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder.</p> <p>For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations.</p>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p>"},{"location":"contributing/#environment-setup","title":"Environment setup","text":"<p>Nothing easier!</p> <p>Fork and clone the repository, then:</p> <pre><code>cd markdown-exec\nmake setup\n</code></pre> <p>Note</p> <p>If it fails for some reason, you'll need to install uv manually.</p> <p>You can install it with:</p> <pre><code>curl -LsSf https://astral.sh/uv/install.sh | sh\n</code></pre> <p>Now you can try running <code>make setup</code> again, or simply <code>uv sync</code>.</p> <p>You now have the dependencies installed.</p> <p>Run <code>make help</code> to see all the available actions!</p>"},{"location":"contributing/#tasks","title":"Tasks","text":"<p>The entry-point to run commands and tasks is the <code>make</code> Python script, located in the <code>scripts</code> directory. Try running <code>make</code> to show the available commands and tasks. The commands do not need the Python dependencies to be installed, while the tasks do. The cross-platform tasks are written in Python, thanks to duty.</p> <p>If you work in VSCode, we provide an action to configure VSCode for the project.</p>"},{"location":"contributing/#development","title":"Development","text":"<p>As usual:</p> <ol> <li>create a new branch: <code>git switch -c feature-or-bugfix-name</code></li> <li>edit the code and/or the documentation</li> </ol> <p>Before committing:</p> <ol> <li>run <code>make format</code> to auto-format the code</li> <li>run <code>make check</code> to check everything (fix any warning)</li> <li>run <code>make test</code> to run the tests (fix any issue)</li> <li>if you updated the documentation or the project dependencies:<ol> <li>run <code>make docs</code></li> <li>go to http://localhost:8000 and check that everything looks good</li> </ol> </li> <li>follow our commit message convention</li> </ol> <p>If you are unsure about how to fix or ignore a warning, just let the continuous integration fail, and we will help you during review.</p> <p>Don't bother updating the changelog, we will take care of this.</p>"},{"location":"contributing/#commit-message-convention","title":"Commit message convention","text":"<p>Commit messages must follow our convention based on the Angular style or the Karma convention:</p> <pre><code>&lt;type&gt;[(scope)]: Subject\n\n[Body]\n</code></pre> <p>Subject and body must be valid Markdown. Subject must have proper casing (uppercase for first letter if it makes sense), but no dot at the end, and no punctuation in general.</p> <p>Scope and body are optional. Type can be:</p> <ul> <li><code>build</code>: About packaging, building wheels, etc.</li> <li><code>chore</code>: About packaging or repo/files management.</li> <li><code>ci</code>: About Continuous Integration.</li> <li><code>deps</code>: Dependencies update.</li> <li><code>docs</code>: About documentation.</li> <li><code>feat</code>: New feature.</li> <li><code>fix</code>: Bug fix.</li> <li><code>perf</code>: About performance.</li> <li><code>refactor</code>: Changes that are not features or bug fixes.</li> <li><code>style</code>: A change in code style/format.</li> <li><code>tests</code>: About tests.</li> </ul> <p>If you write a body, please add trailers at the end (for example issues and PR references, or co-authors), without relying on GitHub's flavored Markdown:</p> <pre><code>Body.\n\nIssue #10: https://github.com/namespace/project/issues/10\nRelated to PR namespace/other-project#15: https://github.com/namespace/other-project/pull/15\n</code></pre> <p>These \"trailers\" must appear at the end of the body, without any blank lines between them. The trailer title can contain any character except colons <code>:</code>. We expect a full URI for each trailer, not just GitHub autolinks (for example, full GitHub URLs for commits and issues, not the hash or the #issue-number).</p> <p>We do not enforce a line length on commit messages summary and body, but please avoid very long summaries, and very long lines in the body, unless they are part of code blocks that must not be wrapped.</p>"},{"location":"contributing/#pull-requests-guidelines","title":"Pull requests guidelines","text":"<p>Link to any related issue in the Pull Request message.</p> <p>During the review, we recommend using fixups:</p> <pre><code># SHA is the SHA of the commit you want to fix\ngit commit --fixup=SHA\n</code></pre> <p>Once all the changes are approved, you can squash your commits:</p> <pre><code>git rebase -i --autosquash main\n</code></pre> <p>And force-push:</p> <pre><code>git push -f\n</code></pre> <p>If this seems all too complicated, you can push or force-push each new commit, and we will squash them ourselves if needed, before merging.</p>"},{"location":"credits/","title":"Credits","text":""},{"location":"credits/#exec-1--credits","title":"Credits","text":"<p>These projects were used to build markdown-exec. Thank you!</p> <p>Python | uv | copier-uv</p>"},{"location":"credits/#exec-1--runtime-dependencies","title":"Runtime dependencies","text":"Project Summary Version (accepted) Version (last resolved) License importlib_metadata Read metadata from Python packages <code>&gt;=4.4, &gt;=3.6</code> <code>8.7.0</code> Apache Software License Markdown Python implementation of John Gruber's Markdown. <code>&gt;=3.6, &gt;=3.3.3</code> <code>3.8.2</code> BSD-3-Clause Pygments Pygments is a syntax highlighting package written in Python. <code>&gt;=2.19, !=2.7.3</code> <code>2.19.2</code> BSD-2-Clause pygments-ansi-color <code>&gt;=0.3</code> <code>0.3.0</code> Apache Software License pymdown-extensions Extension pack for Python Markdown. <code>~=10.2, &gt;=9</code> <code>10.16</code> MIT PyYAML YAML parser and emitter for Python <code>&gt;=5.1</code> <code>6.0.2</code> MIT typing_extensions Backported and Experimental Type Hints for Python 3.9+ <code>&gt;=4.4.0, &gt;=3.6.4, &lt;5.0.0</code> <code>4.14.0</code> PSF-2.0 zipp Backport of pathlib-compatible object wrapper for zip files <code>&gt;=3.20</code> <code>3.23.0</code> MIT"},{"location":"credits/#exec-1--development-dependencies","title":"Development dependencies","text":"Project Summary Version (accepted) Version (last resolved) License ansimarkup Produce colored terminal text with an xml-like markup <code>~=1.4</code> <code>1.5.0</code> Revised BSD License appdirs A small Python module for determining appropriate platform-specific dirs, e.g. a \"user data dir\". <code>&gt;=1.4</code> <code>1.4.4</code> MIT babel Internationalization utilities <code>&gt;=2.7.0</code> <code>2.17.0</code> BSD-3-Clause backrefs A wrapper around re and regex that adds additional back references. <code>~=5.7.post1</code> <code>5.9</code> MIT beautifulsoup4 Screen-scraping library <code>&gt;=4.12</code> <code>4.13.4</code> MIT License build A simple, correct Python build frontend <code>&gt;=1.2</code> <code>1.2.2.post1</code> MIT License cappa Declarative CLI argument parser. <code>&gt;=0.22</code> <code>0.28.0</code> ? certifi Python package for providing Mozilla's CA Bundle. <code>&gt;=2017.4.17</code> <code>2025.6.15</code> MPL-2.0 cffi Foreign Function Interface for Python calling C code. <code>&gt;=1.14</code> <code>1.17.1</code> MIT cfgv Validate configuration and produce human readable error messages. <code>&gt;=2.0.0</code> <code>3.4.0</code> MIT chalk-diagrams A declarative drawing API <code>&gt;=0.2.2</code> <code>0.2.2</code> MIT chalk-planar 2D planar geometry library for Python. <code>0.4</code> BSD charset-normalizer The Real First Universal Charset Detector. Open, modern and actively maintained alternative to Chardet. <code>&gt;=2, &lt;4</code> <code>3.4.2</code> MIT click Composable command line interface toolkit <code>&gt;=7.0</code> <code>8.2.1</code> BSD-3-Clause colorama Cross-platform colored terminal text. <code>&gt;=0.4</code> <code>0.4.6</code> BSD License colour converts and manipulates various color representation (HSL, RVB, web, X11, ...) <code>0.1.5</code> BSD 3-Clause License contourpy Python library for calculating contours of 2D quadrilateral grids <code>&gt;=1.0.1</code> <code>1.3.2</code> BSD License coverage Code coverage measurement for Python <code>&gt;=7.5</code> <code>7.9.1</code> Apache-2.0 cryptography cryptography is a package which provides cryptographic recipes and primitives to Python developers. <code>&gt;=2.0</code> <code>45.0.4</code> Apache-2.0 OR BSD-3-Clause csscompressor A python port of YUI CSS Compressor <code>&gt;=0.9.5</code> <code>0.9.5</code> BSD cycler Composable style cycles <code>&gt;=0.10</code> <code>0.12.1</code> BSD License diagrams Diagram as Code <code>&gt;=0.24.1</code> <code>0.24.4</code> MIT distlib Distribution utilities <code>&gt;=0.3.7, &lt;1</code> <code>0.3.9</code> PSF-2.0 docutils Docutils -- Python Documentation Utilities <code>&gt;=0.21.2</code> <code>0.21.2</code> Public Domain + Python Software Foundation License + BSD License + GNU General Public License (GPL) drawsvg A Python 3 library for programmatically generating SVG (vector) images and animations.  Drawsvg can also render to PNG, MP4, and display your drawings in Jupyter notebook and Jupyter lab. <code>&gt;=2.4</code> <code>2.4.0</code> MIT License duty A simple task runner. <code>&gt;=1.6</code> <code>1.6.0</code> ISC execnet execnet: rapid multi-Python deployment <code>&gt;=2.1</code> <code>2.1.1</code> MIT failprint Run a command, print its output only if it fails. <code>&gt;=0.11, !=1.0.0</code> <code>1.0.3</code> ISC filelock A platform independent file lock. <code>&gt;=3.12.2, &lt;4</code> <code>3.18.0</code> Unlicense fonttools Tools to manipulate font files <code>&gt;=4.22.0</code> <code>4.58.4</code> MIT ghp-import Copy your docs directly to the gh-pages branch. <code>&gt;=1.0</code> <code>2.1.0</code> Apache Software License git-changelog Automatic Changelog generator using Jinja2 templates. <code>&gt;=2.5</code> <code>2.5.3</code> ISC gitdb Git Object Database <code>&gt;=4.0.1, &lt;5</code> <code>4.0.12</code> BSD License GitPython GitPython is a Python library used to interact with Git repositories <code>&gt;=3.1.44</code> <code>3.1.44</code> BSD-3-Clause graphviz Simple Python interface for Graphviz <code>&gt;=0.13.2, &lt;0.21.0</code> <code>0.20.3</code> MIT griffe Signatures for entire Python programs. Extract the structure, the frame, the skeleton of your project, to generate API documentation or find breaking changes in your API. <code>&gt;=1.6.2</code> <code>1.7.3.1.3.1</code> ISC htmlmin2 An HTML Minifier <code>&gt;=0.1.13</code> <code>0.1.13</code> BSD humanize Python humanize utilities <code>&gt;=4.9</code> <code>4.12.3</code> MIT hyperbolic A Python 3 library for constructing and drawing hyperbolic geometry <code>&gt;=2.0</code> <code>2.0.0</code> MIT License id A tool for generating OIDC identities <code>1.5.0</code> Apache Software License identify File identification library for Python <code>&gt;=1.0.0</code> <code>2.6.12</code> MIT idna Internationalized Domain Names in Applications (IDNA) <code>&gt;=2.5, &lt;4</code> <code>3.10</code> BSD License importlib_metadata Read metadata from Python packages <code>&gt;=4.4, &gt;=3.6</code> <code>8.7.0</code> Apache Software License iniconfig brain-dead simple config-ini parsing <code>&gt;=1</code> <code>2.1.0</code> MIT jaraco.classes Utility functions for Python class constructs <code>3.4.0</code> MIT License jaraco.context Useful decorators and context managers <code>6.0.1</code> MIT License jaraco.functools Functools like those found in stdlib <code>4.2.1</code> MIT jeepney Low-level, pure Python DBus protocol wrapper. <code>&gt;=0.4.2</code> <code>0.9.0</code> MIT Jinja2 A very fast and expressive template engine. <code>&gt;=2.10</code> <code>3.1.6</code> BSD License jsmin JavaScript minifier. <code>&gt;=3.0.1</code> <code>3.0.1</code> MIT License keyring Store and access your passwords safely. <code>&gt;=15.1</code> <code>25.6.0</code> MIT License kiwisolver A fast implementation of the Cassowary constraint solver <code>&gt;=1.3.1</code> <code>1.4.8</code> BSD License loguru Python logging made (stupidly) simple <code>0.7.3</code> MIT License Markdown Python implementation of John Gruber's Markdown. <code>&gt;=3.6, &gt;=3.3.3</code> <code>3.8.2</code> BSD-3-Clause markdown-callouts Markdown extension: a classier syntax for admonitions <code>&gt;=0.4</code> <code>0.4.0</code> MIT markdown-it-py Python port of markdown-it. Markdown parsing, done right! <code>&gt;=2.1.0</code> <code>3.0.0</code> MIT License markdownify Convert HTML to markdown. <code>&gt;=0.14</code> <code>1.1.0</code> MIT License MarkupSafe Safely add untrusted strings to HTML/XML markup. <code>&gt;=2.0</code> <code>3.0.2</code> BSD License matplotlib Python plotting package <code>&gt;=3.9</code> <code>3.10.3</code> Python Software Foundation License mdformat CommonMark compliant Markdown formatter <code>&gt;=0.7.21</code> <code>0.7.22</code> MIT License mdurl Markdown URL utilities <code>~=0.1</code> <code>0.1.2</code> MIT License mergedeep A deep merge function for \ud83d\udc0d. <code>~=1.3</code> <code>1.3.4</code> MIT License mkdocs Project documentation with Markdown. <code>&gt;=1.6</code> <code>1.6.1</code> BSD-2-Clause mkdocs-autorefs Automatically link across pages in MkDocs. <code>&gt;=1.4</code> <code>1.4.2</code> ISC mkdocs-coverage MkDocs plugin to integrate your coverage HTML report into your site. <code>&gt;=1.0</code> <code>1.1.0</code> ISC mkdocs-get-deps MkDocs extension that lists all dependencies according to a mkdocs.yml file <code>&gt;=0.2.0</code> <code>0.2.0</code> MIT mkdocs-git-revision-date-localized-plugin Mkdocs plugin that enables displaying the localized date of the last git modification of a markdown file. <code>&gt;=1.2</code> <code>1.4.7</code> MIT mkdocs-llmstxt MkDocs plugin to generate an /llms.txt file. <code>&gt;=0.2</code> <code>0.2.0</code> ISC mkdocs-material Documentation that simply works <code>&gt;=9.5</code> <code>9.6.14+insiders.4.53.16</code> MIT mkdocs-material-extensions Extension pack for Python Markdown and MkDocs Material. <code>~=1.3</code> <code>1.3.1</code> MIT mkdocs-minify-plugin An MkDocs plugin to minify HTML, JS or CSS files prior to being written to disk <code>&gt;=0.8</code> <code>0.8.0</code> MIT mkdocs-section-index MkDocs plugin to allow clickable sections that lead to an index page <code>&gt;=0.3</code> <code>0.3.10</code> MIT mkdocstrings Automatic documentation from sources, for MkDocs. <code>&gt;=0.29</code> <code>0.29.1</code> ISC mkdocstrings-python A Python handler for mkdocstrings. <code>&gt;=1.16.2</code> <code>1.16.12.1.12.1</code> ISC more-itertools More routines for operating on iterables, beyond itertools <code>10.7.0</code> MIT License mypy Optional static typing for Python <code>&gt;=1.10</code> <code>1.16.1</code> MIT mypy_extensions Type system extensions for programs checked with the mypy type checker. <code>&gt;=1.0.0</code> <code>1.1.0</code> MIT narwhals Extremely lightweight compatibility layer between dataframe libraries <code>&gt;=1.15.1</code> <code>1.44.0</code> MIT License nh3 Python binding to Ammonia HTML sanitizer Rust crate <code>&gt;=0.2.14</code> <code>0.2.21</code> MIT nodeenv Node.js virtual environment builder <code>&gt;=0.11.1</code> <code>1.9.1</code> BSD numpy Fundamental package for array computing in Python <code>&gt;=2.1</code> <code>2.3.1</code> BSD License packaging Core utilities for Python packages <code>25.0</code> Apache Software License + BSD License paginate Divides large result sets into pages for easier browsing <code>~=0.5</code> <code>0.5.7</code> MIT pandas Powerful data structures for data analysis, time series, and statistics <code>&gt;=2.2</code> <code>2.3.0</code> BSD License pathspec Utility library for gitignore style pattern matching of file paths. <code>&gt;=0.9.0</code> <code>0.12.1</code> Mozilla Public License 2.0 (MPL 2.0) pillow Python Imaging Library (Fork) <code>&gt;=8</code> <code>11.2.1</code> MIT-CMU pip The PyPA recommended tool for installing Python packages. <code>&gt;=25</code> <code>25.1.1</code> MIT pipdeptree Command line utility to show dependency tree of packages. <code>&gt;=2.25</code> <code>2.26.1</code> MIT platformdirs A small Python package for determining appropriate platform-specific dirs, e.g. a <code>user data dir</code>. <code>&gt;=3.6.0, &lt;5</code> <code>4.3.8</code> MIT plotly An open-source interactive data visualization library for Python <code>&gt;=6.0</code> <code>6.2.0</code> MIT License pluggy plugin and hook calling mechanisms for python <code>&gt;=1.2</code> <code>1.6.0</code> MIT pre_commit A framework for managing and maintaining multi-language pre-commit hooks. <code>&gt;=4.0.1, &lt;5.0.0</code> <code>4.2.0</code> MIT ptyprocess Run a subprocess in a pseudo terminal <code>~=0.6</code> <code>0.7.0</code> ISC License (ISCL) pycparser C parser in Python <code>2.22</code> BSD-3-Clause pydeps Display module dependencies <code>&gt;=3.0</code> <code>3.0.1</code> BSD Pygments Pygments is a syntax highlighting package written in Python. <code>&gt;=2.19, !=2.7.3</code> <code>2.19.2</code> BSD-2-Clause pymdown-extensions Extension pack for Python Markdown. <code>~=10.2, &gt;=9</code> <code>10.16</code> MIT pyparsing pyparsing module - Classes and methods to define and execute parsing grammars <code>&gt;=2.3.1</code> <code>3.2.3</code> MIT License pyproject_hooks Wrappers to call pyproject.toml-based build backend hooks. <code>1.2.0</code> MIT License pytest pytest: simple powerful testing with Python <code>&gt;=8.2</code> <code>8.4.1</code> MIT pytest-cov Pytest plugin for measuring coverage. <code>&gt;=5.0</code> <code>6.2.1</code> MIT pytest-randomly Pytest plugin to randomly order tests and control random.seed. <code>&gt;=3.15</code> <code>3.16.0</code> MIT License pytest-xdist pytest xdist plugin for distributed testing, most importantly across multiple CPUs <code>&gt;=3.6</code> <code>3.7.0</code> MIT python-dateutil Extensions to the standard Python datetime module <code>&gt;=2.7</code> <code>2.9.0.post0</code> BSD License + Apache Software License pytz World timezone definitions, modern and historical <code>&gt;=2025.1</code> <code>2025.2</code> MIT PyYAML YAML parser and emitter for Python <code>&gt;=5.1</code> <code>6.0.2</code> MIT pyyaml_env_tag A custom YAML tag for referencing environment variables in YAML files. <code>&gt;=0.1</code> <code>1.1</code> MIT qrcode QR Code image generator <code>&gt;=8.0</code> <code>8.2</code> BSD readme_renderer readme_renderer is a library for rendering readme descriptions for Warehouse <code>&gt;=35.0</code> <code>44.0</code> Apache License, Version 2.0 requests Python HTTP for Humans. <code>&gt;=2.20</code> <code>2.32.4</code> Apache-2.0 requests-toolbelt A utility belt for advanced users of python-requests <code>&gt;=0.8.0, !=0.9.0</code> <code>1.0.0</code> Apache 2.0 rfc3986 Validating URI References per RFC 3986 <code>&gt;=1.4.0</code> <code>2.0.0</code> Apache 2.0 rich Render rich text, tables, progress bars, syntax highlighting, markdown and more to the terminal <code>&gt;=13.9</code> <code>14.0.0</code> MIT ruff An extremely fast Python linter and code formatter, written in Rust. <code>&gt;=0.4</code> <code>0.12.1</code> MIT SecretStorage Python bindings to FreeDesktop.org Secret Service API <code>&gt;=3.2</code> <code>3.3.3</code> BSD 3-Clause License semver Python helper for Semantic Versioning (https://semver.org) <code>&gt;=2.13</code> <code>3.0.4</code> BSD License six Python 2 and 3 compatibility utilities <code>&gt;=1.15, &lt;2</code> <code>1.17.0</code> MIT smmap A pure Python implementation of a sliding window memory map manager <code>&gt;=3.0.1, &lt;6</code> <code>5.0.2</code> BSD-3-Clause soupsieve A modern CSS selector implementation for Beautiful Soup. <code>&gt;1.2</code> <code>2.7</code> MIT stdlib-list A list of Python Standard Libraries (2.7 through 3.13). <code>0.11.1</code> MIT License svgwrite A Python library to create SVG drawings. <code>1.4.3</code> MIT License textual Modern Text User Interface framework <code>&gt;=1.0</code> <code>3.5.0</code> MIT toolz List processing tools and functional utilities <code>1.0.0</code> BSD twine Collection of utilities for publishing packages on PyPI <code>&gt;=5.1</code> <code>6.1.0</code> Apache Software License type-lens type-lens is a Python template project designed to simplify the setup of a new project. <code>&gt;=0.2.3</code> <code>0.2.3</code> MIT types-Markdown Typing stubs for Markdown <code>&gt;=3.6</code> <code>3.8.0.20250415</code> Apache-2.0 types-PyYAML Typing stubs for PyYAML <code>&gt;=6.0</code> <code>6.0.12.20250516</code> Apache-2.0 typing_extensions Backported and Experimental Type Hints for Python 3.9+ <code>&gt;=4.4.0, &gt;=3.6.4, &lt;5.0.0</code> <code>4.14.0</code> PSF-2.0 tzdata Provider of IANA time zone data <code>&gt;=2022.7</code> <code>2025.2</code> Apache-2.0 urllib3 HTTP library with thread-safe connection pooling, file post, and more. <code>&gt;=1.26.0</code> <code>2.5.0</code> MIT virtualenv Virtual Python Environment builder <code>&gt;=20.10.0</code> <code>20.31.2</code> MIT watchdog Filesystem events monitoring <code>&gt;=2.0</code> <code>6.0.0</code> Apache-2.0 yore Manage legacy code with comments. <code>&gt;=0.3.3</code> <code>0.4.3</code> ISC zipp Backport of pathlib-compatible object wrapper for zip files <code>&gt;=3.20</code> <code>3.23.0</code> MIT <p>More credits from the author</p>"},{"location":"gallery/","title":"Gallery","text":"<p>Welcome to our gallery of examples!</p>"},{"location":"gallery/#diagrams-charts-graphs-plots","title":"Diagrams, charts, graphs, plots","text":""},{"location":"gallery/#with-diagrams","title":"with Diagrams","text":"<p>Diagram as Code for prototyping cloud system architectures.</p> ResultSource <pre><code>```python exec=\"true\" html=\"true\"\nfrom base64 import b64encode\nfrom contextlib import suppress\n\nfrom diagrams import Diagram\nfrom diagrams.k8s.clusterconfig import HPA\nfrom diagrams.k8s.compute import Deployment, Pod, ReplicaSet\nfrom diagrams.k8s.network import Ingress, Service\n\n# By default, Diagrams tries to write the result on disk, so we prevent that by patching its `render` method,\n# and by ignoring the `FileNotFoundError` that ensues.\n#\n# Then we use its internal `dot` object and its `pipe` method to store the diagram in a variable,\n# as base64 encoded PNG data.\n#\n# Finally we output an HTML image with the base64 data.\n# Using SVG is not possible here since Diagrams embeds actual, smaller PNG files in the result,\n# files which are not automatically added to the final site.\nwith suppress(FileNotFoundError):\n    with Diagram(\"Exposed Pod with 3 Replicas\", show=False) as diagram:\n        diagram.render = lambda: None\n        net = Ingress(\"domain.com\") &gt;&gt; Service(\"svc\")\n        net &gt;&gt; [Pod(\"pod1\"), Pod(\"pod2\"), Pod(\"pod3\")] &lt;&lt; ReplicaSet(\"rs\") &lt;&lt; Deployment(\"dp\") &lt;&lt; HPA(\"hpa\")\n        png = b64encode(diagram.dot.pipe(format=\"png\")).decode()\n\n# Wrapping the image in a div prevents it from being wrapped in a paragraph,\n# which would add unnecessary space around it.\nprint(f'&lt;div&gt;&lt;img src=\"data:image/png;base64, {png}\"/&gt;&lt;/div&gt;')\n\n```\n</code></pre>"},{"location":"gallery/#with-d2","title":"with D2","text":"<p>A modern diagram scripting language that turns text to diagrams.</p> ResultSource Before and after becoming friendsOffice chatter in 2007Office chatter in 2012yearslaterAliceBobbyAliceBobby Fiveawkward small talkicebreaker attemptunfortunate outcomeuhm, hioh, hellowhat did you have for lunch?that's personalWant to play with ChatGPT?Yes!Write a play...about 2 friends...who find love...in a sequence diagram <pre><code>```python exec=\"true\" html=\"true\"\nimport subprocess\n\ndiagram = \"\"\"\ndirection: right\n\nBefore and after becoming friends: {\n  2007: Office chatter in 2007 {\n    shape: sequence_diagram\n    alice: Alice\n    bob: Bobby\n\n    awkward small talk: {\n      alice -&gt; bob: uhm, hi\n      bob -&gt; alice: oh, hello\n\n      icebreaker attempt: {\n        alice -&gt; bob: what did you have for lunch?\n      }\n\n      unfortunate outcome: {\n        bob -&gt; alice: that's personal\n      }\n    }\n  }\n\n  2012: Office chatter in 2012 {\n    shape: sequence_diagram\n    alice: Alice\n    bob: Bobby\n    alice -&gt; bob: Want to play with ChatGPT?\n    bob -&gt; alice: Yes!\n    bob -&gt; alice.play: Write a play...\n    alice.play -&gt; bob.play: about 2 friends...\n    bob.play -&gt; alice.play: who find love...\n    alice.play -&gt; bob.play: in a sequence diagram\n  }\n\n  2007 -&gt; 2012: Five\\nyears\\nlater\n}\n\"\"\"\n\n# We simply run `d2` in a subprocess, passing it our diagram as input and capturing its output to print it.\nsvg = subprocess.check_output([\"d2\", \"-\", \"-\"], input=diagram, stderr=subprocess.DEVNULL, text=True)\nprint(svg)\n\n```\n</code></pre>"},{"location":"gallery/#with-matplotlib","title":"with Matplotlib","text":"<p>Matplotlib is a comprehensive library for creating static, animated, and interactive visualizations in Python.</p> ResultSource 2025-06-28T12:31:53.761667 image/svg+xml Matplotlib v3.10.3, https://matplotlib.org/ <pre><code>```python exec=\"1\" html=\"1\"\n# https://matplotlib.org/stable/gallery/lines_bars_and_markers/scatter_demo2.html\nfrom io import StringIO\n\nimport matplotlib.cbook as cbook\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Load a numpy record array from yahoo csv data with fields date, open, close,\n# volume, adj_close from the mpl-data/example directory. The record array\n# stores the date as an np.datetime64 with a day unit ('D') in the date column.\nprice_data = cbook.get_sample_data(\"goog.npz\")[\"price_data\"]\nprice_data = price_data[-250:]  # get the most recent 250 trading days\n\ndelta1 = np.diff(price_data[\"adj_close\"]) / price_data[\"adj_close\"][:-1]\n\n# Marker size in units of points^2\nvolume = (15 * price_data[\"volume\"][:-2] / price_data[\"volume\"][0])**2\nclose = 0.003 * price_data[\"close\"][:-2] / 0.003 * price_data[\"open\"][:-2]\n\nfig, ax = plt.subplots()\nax.scatter(delta1[:-1], delta1[1:], c=close, s=volume, alpha=0.5)\n\nax.set_xlabel(r\"$\\Delta_i$\", fontsize=15)\nax.set_ylabel(r\"$\\Delta_{i+1}$\", fontsize=15)\nax.set_title(\"Volume and percent change\")\n\nax.grid(True)\nfig.tight_layout()\n\nbuffer = StringIO()\nplt.savefig(buffer, format=\"svg\")\nprint(buffer.getvalue())\n\n```\n</code></pre>"},{"location":"gallery/#with-pipdeptree","title":"with pipdeptree","text":"<p>A command line utility to display dependency tree of the installed Python packages.</p> <p>We call <code>pipdeptree</code> with its <code>--mermaid</code> option to generate a Mermaid diagram.</p> ResultSource <pre><code>flowchart TD\n    classDef missing stroke-dasharray: 5\n    markdown-exec[\"markdown-exec\\n1.10.4.1.1.0\"]\n    markdown[\"Markdown\\n3.8.2\"]\n    pymdown-extensions[\"pymdown-extensions\\n10.16\"]\n    pyyaml[\"PyYAML\\n6.0.2\"]\n    markdown-exec -- \"&gt;=9\" --&gt; pymdown-extensions\n    pymdown-extensions -- \"&gt;=3.6\" --&gt; markdown\n    pymdown-extensions -- \"any\" --&gt; pyyaml\n\n</code></pre> <pre><code>```bash exec=\"1\" result=\"mermaid\"\n# Change the direction of the graph from top-down to left-right,\n# and remove local version identifiers from our own package.\npipdeptree -p markdown-exec --mermaid 2&gt;/dev/null |\n    sed -E 's/\\.dev.+\"\\]$/\"]/;s/\\+d.*\"\\]$/\"]/'\n```\n</code></pre> <p>Another example with more dependencies:</p> ResultSource <pre><code>flowchart LR\n    classDef missing stroke-dasharray: 5\n    click_0[\"click\\n8.2.1\"]\n    colorama[\"colorama\\n0.4.6\"]\n    ghp-import[\"ghp-import\\n2.1.0\"]\n    griffe[\"griffe\\n1.7.3.1.3.1\"]\n    jinja2[\"Jinja2\\n3.1.6\"]\n    markdown[\"Markdown\\n3.8.2\"]\n    markupsafe[\"MarkupSafe\\n3.0.2\"]\n    mergedeep[\"mergedeep\\n1.3.4\"]\n    mkdocs-autorefs[\"mkdocs-autorefs\\n1.4.2\"]\n    mkdocs-get-deps[\"mkdocs-get-deps\\n0.2.0\"]\n    mkdocs[\"mkdocs\\n1.6.1\"]\n    mkdocstrings-python[\"mkdocstrings-python\\n1.16.12.1.12.1\"]\n    mkdocstrings[\"mkdocstrings\\n0.29.1\"]\n    packaging[\"packaging\\n25.0\"]\n    pathspec[\"pathspec\\n0.12.1\"]\n    platformdirs[\"platformdirs\\n4.3.8\"]\n    pymdown-extensions[\"pymdown-extensions\\n10.16\"]\n    python-dateutil[\"python-dateutil\\n2.9.0.post0\"]\n    pyyaml-env-tag[\"pyyaml_env_tag\\n1.1\"]\n    pyyaml[\"PyYAML\\n6.0.2\"]\n    six[\"six\\n1.17.0\"]\n    watchdog[\"watchdog\\n6.0.0\"]\n    ghp-import -- \"&gt;=2.8.1\" --&gt; python-dateutil\n    griffe -- \"&gt;=0.4\" --&gt; colorama\n    jinja2 -- \"&gt;=2.0\" --&gt; markupsafe\n    mkdocs -- \"&gt;=0.1\" --&gt; pyyaml-env-tag\n    mkdocs -- \"&gt;=0.11.1\" --&gt; pathspec\n    mkdocs -- \"&gt;=0.2.0\" --&gt; mkdocs-get-deps\n    mkdocs -- \"&gt;=1.0\" --&gt; ghp-import\n    mkdocs -- \"&gt;=1.3.4\" --&gt; mergedeep\n    mkdocs -- \"&gt;=2.0\" --&gt; watchdog\n    mkdocs -- \"&gt;=2.0.1\" --&gt; markupsafe\n    mkdocs -- \"&gt;=2.11.1\" --&gt; jinja2\n    mkdocs -- \"&gt;=20.5\" --&gt; packaging\n    mkdocs -- \"&gt;=3.3.6\" --&gt; markdown\n    mkdocs -- \"&gt;=5.1\" --&gt; pyyaml\n    mkdocs -- \"&gt;=7.0\" --&gt; click_0\n    mkdocs-autorefs -- \"&gt;=1.1\" --&gt; mkdocs\n    mkdocs-autorefs -- \"&gt;=2.0.1\" --&gt; markupsafe\n    mkdocs-autorefs -- \"&gt;=3.3\" --&gt; markdown\n    mkdocs-get-deps -- \"&gt;=1.3.4\" --&gt; mergedeep\n    mkdocs-get-deps -- \"&gt;=2.2.0\" --&gt; platformdirs\n    mkdocs-get-deps -- \"&gt;=5.1\" --&gt; pyyaml\n    mkdocstrings -- \"&gt;=1.1\" --&gt; markupsafe\n    mkdocstrings -- \"&gt;=1.4\" --&gt; mkdocs-autorefs\n    mkdocstrings -- \"&gt;=1.6\" --&gt; mkdocs\n    mkdocstrings -- \"&gt;=2.11.1\" --&gt; jinja2\n    mkdocstrings -- \"&gt;=3.6\" --&gt; markdown\n    mkdocstrings -- \"&gt;=6.3\" --&gt; pymdown-extensions\n    mkdocstrings-python -- \"&gt;=0.28.3\" --&gt; mkdocstrings\n    mkdocstrings-python -- \"&gt;=1.4\" --&gt; mkdocs-autorefs\n    mkdocstrings-python -- \"&gt;=1.6.2\" --&gt; griffe\n    pymdown-extensions -- \"&gt;=3.6\" --&gt; markdown\n    pymdown-extensions -- \"any\" --&gt; pyyaml\n    python-dateutil -- \"&gt;=1.5\" --&gt; six\n    pyyaml-env-tag -- \"any\" --&gt; pyyaml\n\n</code></pre> <pre><code>```bash exec=\"1\" result=\"mermaid\"\npipdeptree -p mkdocstrings-python --mermaid 2&gt;/dev/null |\n    sed 's/flowchart TD/flowchart LR/'\n```\n</code></pre>"},{"location":"gallery/#with-plotly","title":"with Plotly","text":"<p>The interactive graphing library for Python \u2728</p> ResultSource <pre><code>```python exec=\"true\" html=\"true\"\nimport plotly.express as px\n\nfig = px.bar(x=[\"a\", \"b\", \"c\"], y=[1, 3, 2])\nprint(fig.to_html(full_html=False, include_plotlyjs=\"cdn\"))\n\n```\n</code></pre>"},{"location":"gallery/#with-pydeps","title":"with pydeps","text":"<p>Python Module Dependency graphs.</p> <p>pydeps uses Graphviz under the hood to generate graphs. In this example we add links to the code reference in related nodes. Try clicking on the <code>markdown_exec</code> nodes!</p> ResultSource <p>Gjinja2jinja2markdown_exec__internal_mkdocs_pluginmarkdown_exec._internal.mkdocs_pluginjinja2-&gt;markdown_exec__internal_mkdocs_pluginmkdocs_pluginsmkdocs.pluginsjinja2-&gt;mkdocs_pluginsmkdocs_structure_filesmkdocs.structure.filesjinja2-&gt;mkdocs_structure_filesmarkdownmarkdownmarkdown_exec__internal_formatters_basemarkdown_exec._internal.formatters.basemarkdown-&gt;markdown_exec__internal_formatters_basemarkdown_exec__internal_formatters_pyodidemarkdown_exec._internal.formatters.pyodidemarkdown-&gt;markdown_exec__internal_formatters_pyodidemarkdown_exec__internal_formatters_treemarkdown_exec._internal.formatters.treemarkdown-&gt;markdown_exec__internal_formatters_treemarkdown_exec__internal_mainmarkdown_exec._internal.mainmarkdown-&gt;markdown_exec__internal_mainmarkdown_exec__internal_processorsmarkdown_exec._internal.processorsmarkdown-&gt;markdown_exec__internal_processorsmarkdown_exec__internal_renderingmarkdown_exec._internal.renderingmarkdown-&gt;markdown_exec__internal_renderingmkdocs_config_config_optionsmkdocs.config.config_optionsmarkdown-&gt;mkdocs_config_config_optionsmarkdown_coremarkdown.coremarkdown_core-&gt;markdownmarkdown_core-&gt;markdown_exec__internal_formatters_basemarkdown_treeprocessorsmarkdown.treeprocessorsmarkdown_treeprocessors-&gt;markdown_coremarkdown_treeprocessors-&gt;markdown_exec__internal_processorsmarkdown_utilmarkdown.utilmarkdown_util-&gt;markdown_coremarkdown_util-&gt;markdown_treeprocessorsmarkdown_util-&gt;markdown_exec__internal_processorsmarkdown_execmarkdown_execmarkdown_exec__internalmarkdown_exec._internalmarkdown_exec__internal-&gt;markdown_execmarkdown_exec.formattersmarkdown_exec.formattersmarkdown_exec__internal-&gt;markdown_exec_formattersmarkdown_exec.formatters.basemarkdown_exec.formatters.basemarkdown_exec__internal-&gt;markdown_exec_formatters_basemarkdown_exec.formatters.bashmarkdown_exec.formatters.bashmarkdown_exec__internal-&gt;markdown_exec_formatters_bashmarkdown_exec.formatters.consolemarkdown_exec.formatters.consolemarkdown_exec__internal-&gt;markdown_exec_formatters_consolemarkdown_exec.formatters.markdownmarkdown_exec.formatters.markdownmarkdown_exec__internal-&gt;markdown_exec_formatters_markdownmarkdown_exec.formatters.pyconmarkdown_exec.formatters.pyconmarkdown_exec__internal-&gt;markdown_exec_formatters_pyconmarkdown_exec.formatters.pyodidemarkdown_exec.formatters.pyodidemarkdown_exec__internal-&gt;markdown_exec_formatters_pyodidemarkdown_exec.formatters.pythonmarkdown_exec.formatters.pythonmarkdown_exec__internal-&gt;markdown_exec_formatters_pythonmarkdown_exec.formatters.shmarkdown_exec.formatters.shmarkdown_exec__internal-&gt;markdown_exec_formatters_shmarkdown_exec.formatters.treemarkdown_exec.formatters.treemarkdown_exec__internal-&gt;markdown_exec_formatters_treemarkdown_exec.loggermarkdown_exec.loggermarkdown_exec__internal-&gt;markdown_exec_loggermarkdown_exec.mkdocs_pluginmarkdown_exec.mkdocs_pluginmarkdown_exec__internal-&gt;markdown_exec_mkdocs_pluginmarkdown_exec.processorsmarkdown_exec.processorsmarkdown_exec__internal-&gt;markdown_exec_processorsmarkdown_exec.renderingmarkdown_exec.renderingmarkdown_exec__internal-&gt;markdown_exec_renderingmarkdown_exec__internal_formattersmarkdown_exec._internal.formattersmarkdown_exec__internal_formatters-&gt;markdown_execmarkdown_exec__internal_formatters-&gt;markdown_exec__internal_mainmarkdown_exec__internal_formatters-&gt;markdown_exec_formattersmarkdown_exec__internal_formatters-&gt;markdown_exec_formatters_basemarkdown_exec__internal_formatters-&gt;markdown_exec_formatters_bashmarkdown_exec__internal_formatters-&gt;markdown_exec_formatters_consolemarkdown_exec__internal_formatters-&gt;markdown_exec_formatters_markdownmarkdown_exec__internal_formatters-&gt;markdown_exec_formatters_pyconmarkdown_exec__internal_formatters-&gt;markdown_exec_formatters_pyodidemarkdown_exec__internal_formatters-&gt;markdown_exec_formatters_pythonmarkdown_exec__internal_formatters-&gt;markdown_exec_formatters_shmarkdown_exec__internal_formatters-&gt;markdown_exec_formatters_treemarkdown_exec__internal_formatters__exec_pythonmarkdown_exec._internal.formatters._exec_pythonmarkdown_exec__internal_formatters_pythonmarkdown_exec._internal.formatters.pythonmarkdown_exec__internal_formatters__exec_python-&gt;markdown_exec__internal_formatters_pythonmarkdown_exec__internal_formatters_base-&gt;markdown_execmarkdown_exec__internal_formatters_bashmarkdown_exec._internal.formatters.bashmarkdown_exec__internal_formatters_base-&gt;markdown_exec__internal_formatters_bashmarkdown_exec__internal_formatters_consolemarkdown_exec._internal.formatters.consolemarkdown_exec__internal_formatters_base-&gt;markdown_exec__internal_formatters_consolemarkdown_exec__internal_formatters_markdownmarkdown_exec._internal.formatters.markdownmarkdown_exec__internal_formatters_base-&gt;markdown_exec__internal_formatters_markdownmarkdown_exec__internal_formatters_pyconmarkdown_exec._internal.formatters.pyconmarkdown_exec__internal_formatters_base-&gt;markdown_exec__internal_formatters_pyconmarkdown_exec__internal_formatters_base-&gt;markdown_exec__internal_formatters_pythonmarkdown_exec__internal_formatters_shmarkdown_exec._internal.formatters.shmarkdown_exec__internal_formatters_base-&gt;markdown_exec__internal_formatters_shmarkdown_exec__internal_formatters_base-&gt;markdown_exec__internal_mainmarkdown_exec__internal_formatters_base-&gt;markdown_exec_formatters_basemarkdown_exec__internal_formatters_bash-&gt;markdown_exec__internal_mainmarkdown_exec__internal_formatters_bash-&gt;markdown_exec_formatters_bashmarkdown_exec__internal_formatters_console-&gt;markdown_exec__internal_mainmarkdown_exec__internal_formatters_console-&gt;markdown_exec_formatters_consolemarkdown_exec__internal_formatters_markdown-&gt;markdown_exec__internal_mainmarkdown_exec__internal_formatters_markdown-&gt;markdown_exec_formatters_markdownmarkdown_exec__internal_formatters_pycon-&gt;markdown_exec__internal_mainmarkdown_exec__internal_formatters_pycon-&gt;markdown_exec_formatters_pyconmarkdown_exec__internal_formatters_pyodide-&gt;markdown_exec__internal_mainmarkdown_exec__internal_formatters_pyodide-&gt;markdown_exec_formatters_pyodidemarkdown_exec__internal_formatters_python-&gt;markdown_exec__internal_formatters_pyconmarkdown_exec__internal_formatters_python-&gt;markdown_exec__internal_mainmarkdown_exec__internal_formatters_python-&gt;markdown_exec_formatters_pythonmarkdown_exec__internal_formatters_sh-&gt;markdown_exec__internal_formatters_consolemarkdown_exec__internal_formatters_sh-&gt;markdown_exec__internal_mainmarkdown_exec__internal_formatters_sh-&gt;markdown_exec_formatters_shmarkdown_exec__internal_formatters_tree-&gt;markdown_exec__internal_mainmarkdown_exec__internal_formatters_tree-&gt;markdown_exec_formatters_treemarkdown_exec__internal_loggermarkdown_exec._internal.loggermarkdown_exec__internal_logger-&gt;markdown_execmarkdown_exec__internal_logger-&gt;markdown_exec__internal_formatters_basemarkdown_exec__internal_logger-&gt;markdown_exec__internal_formatters_consolemarkdown_exec__internal_logger-&gt;markdown_exec__internal_mkdocs_pluginmarkdown_exec__internal_logger-&gt;markdown_exec_loggermarkdown_exec__internal_main-&gt;markdown_execmarkdown_exec__internal_main-&gt;markdown_exec__internal_mkdocs_pluginmarkdown_exec__internal_mkdocs_plugin-&gt;markdown_execmarkdown_exec__internal_mkdocs_plugin-&gt;markdown_exec_mkdocs_pluginmarkdown_exec__internal_processors-&gt;markdown_execmarkdown_exec__internal_processors-&gt;markdown_exec__internal_renderingmarkdown_exec__internal_processors-&gt;markdown_exec_processorsmarkdown_exec__internal_rendering-&gt;markdown_execmarkdown_exec__internal_rendering-&gt;markdown_exec__internal_formatters_basemarkdown_exec__internal_rendering-&gt;markdown_exec__internal_formatters_bashmarkdown_exec__internal_rendering-&gt;markdown_exec__internal_formatters_pythonmarkdown_exec__internal_rendering-&gt;markdown_exec__internal_formatters_shmarkdown_exec__internal_rendering-&gt;markdown_exec__internal_formatters_treemarkdown_exec__internal_rendering-&gt;markdown_exec__internal_mkdocs_pluginmarkdown_exec__internal_rendering-&gt;markdown_exec_renderingmarkupsafemarkupsafemarkupsafe-&gt;markdown_exec__internal_formatters_basemarkupsafe-&gt;markdown_exec__internal_formatters_consolemarkupsafe-&gt;markdown_exec__internal_formatters_pyconmarkupsafe-&gt;markdown_exec__internal_formatters_treemarkupsafe-&gt;markdown_exec__internal_processorsmarkupsafe-&gt;markdown_exec__internal_renderingmaterialmaterialmaterial-&gt;markdown_exec__internal_formatters_treemkdocsmkdocsmkdocs-&gt;markdown_exec__internal_mkdocs_pluginmkdocs_configmkdocs.configmkdocs_config-&gt;markdown_exec__internal_mkdocs_pluginmkdocs_config-&gt;mkdocs_pluginsmkdocs_config-&gt;mkdocs_structure_filesmkdocs_config_basemkdocs.config.basemkdocs_config_base-&gt;markdown_exec__internal_mkdocs_pluginmkdocs_config_base-&gt;mkdocs_configmkdocs_config_base-&gt;mkdocs_config_config_optionsmkdocs_config_defaultsmkdocs.config.defaultsmkdocs_config_base-&gt;mkdocs_pluginsmkdocs_config_config_options-&gt;markdown_exec__internal_mkdocs_pluginmkdocs_config_config_options-&gt;mkdocs_config_defaultsmkdocs_config_defaults-&gt;markdown_exec__internal_mkdocs_pluginmkdocs_config_defaults-&gt;mkdocs_config_basemkdocs_config_defaults-&gt;mkdocs_pluginsmkdocs_config_defaults-&gt;mkdocs_structure_filesmkdocs_exceptionsmkdocs.exceptionsmkdocs_exceptions-&gt;markdown_exec__internal_mkdocs_pluginmkdocs_exceptions-&gt;mkdocs_config_basemkdocs_exceptions-&gt;mkdocs_config_config_optionsmkdocs_utilsmkdocs.utilsmkdocs_exceptions-&gt;mkdocs_utilsmkdocs_plugins-&gt;markdown_exec__internal_mkdocs_pluginmkdocs_plugins-&gt;mkdocs_config_config_optionsmkdocs_structuremkdocs.structuremkdocs_structure-&gt;markdown_exec__internal_mkdocs_pluginmkdocs_structure-&gt;mkdocs_config_defaultsmkdocs_structure-&gt;mkdocs_pluginsmkdocs_structure-&gt;mkdocs_utilsmkdocs_structure_files-&gt;markdown_exec__internal_mkdocs_pluginmkdocs_structure_files-&gt;mkdocs_pluginsmkdocs_utils-&gt;markdown_exec__internal_mkdocs_pluginmkdocs_utils-&gt;mkdocs_config_basemkdocs_utils-&gt;mkdocs_config_config_optionsmkdocs_utils-&gt;mkdocs_config_defaultsmkdocs_utils-&gt;mkdocs_pluginsmkdocs_utils-&gt;mkdocs_structure_files </p> <pre><code>```python exec=\"true\" html=\"true\"\nfrom pydeps import cli, colors, dot, py2depgraph\nfrom pydeps.pydeps import depgraph_to_dotsrc\nfrom pydeps.target import Target\n\n# Note: pydeps wasn't designed to be used in such a programatic way, so the code is a bit convoluted,\n# but you could make a function of it, put it in an importable script/module,\n# and reuse it cleanly in your executed code blocks.\n\ncli.verbose = cli._not_verbose\noptions = cli.parse_args([\"src/markdown_exec\", \"--noshow\"])\ncolors.START_COLOR = options[\"start_color\"]\ntarget = Target(options[\"fname\"])\nwith target.chdir_work():\n    dep_graph = py2depgraph.py2dep(target, **options)\ndot_src = depgraph_to_dotsrc(target, dep_graph, **options)\nsvg = dot.call_graphviz_dot(dot_src, \"svg\").decode()\nsvg = \"\".join(svg.splitlines()[6:])\nsvg = svg.replace('fill=\"white\"', 'fill=\"transparent\"')\nreference = \"../reference\"\nmodules = (\n    \"markdown_exec\",\n    \"markdown_exec.formatters\",\n    \"markdown_exec.formatters.base\",\n    \"markdown_exec.formatters.bash\",\n    \"markdown_exec.formatters.console\",\n    \"markdown_exec.formatters.markdown\",\n    \"markdown_exec.formatters.pycon\",\n    \"markdown_exec.formatters.pyodide\",\n    \"markdown_exec.formatters.python\",\n    \"markdown_exec.formatters.sh\",\n    \"markdown_exec.formatters.tree\",\n    \"markdown_exec.logger\",\n    \"markdown_exec.mkdocs_plugin\",\n    \"markdown_exec.processors\",\n    \"markdown_exec.rendering\",\n)\nfor module in modules:\n    svg_title = module.replace(\".\", \"_\")\n    title_tag = f\"&lt;title&gt;{svg_title}&lt;/title&gt;\"\n    href = f\"{reference}/{module.replace('.', '/')}/\"\n    svg = svg.replace(title_tag, f'&lt;a href=\"{href}\"&gt;&lt;title&gt;{module}&lt;/title&gt;')\nsvg = svg.replace(\"&lt;/text&gt;&lt;/g&gt;\", \"&lt;/text&gt;&lt;/a&gt;&lt;/g&gt;\")\nprint(svg)\n\n```\n</code></pre>"},{"location":"gallery/#code-snippets","title":"Code snippets","text":""},{"location":"gallery/#with-rich","title":"with Rich","text":"<p>Rich is a Python library for rich text and beautiful formatting in the terminal.</p> ResultSource async\u00a0context\u00a0manager fromcontextlibimportasynccontextmanager importhttpx classBookClient(httpx.AsyncClient): asyncdefget_book(self,book_id:int)-&gt;str: response=awaitself.get(f\"/books/{book_id}\") returnresponse.text @asynccontextmanager asyncdefbook_client(*args,**kwargs): asyncwithBookClient(*args,**kwargs)asclient: yieldclient <pre><code>```python exec=\"true\" html=\"true\"\nimport os\n\nfrom rich.console import Console\nfrom rich.padding import Padding\nfrom rich.syntax import Syntax\n\n# Here we hardcode the code snippet we want to render,\n# but we could instead include it from somewhere else using the `pymdownx.snippets` extension\n# (https://facelessuser.github.io/pymdown-extensions/extensions/snippets/)\n# or by reading it dynamically from Python.\ncode = \"\"\"\n    from contextlib import asynccontextmanager\n    import httpx\n\n\n    class BookClient(httpx.AsyncClient):\n        async def get_book(self, book_id: int) -&gt; str:\n            response = await self.get(f\"/books/{book_id}\")\n            return response.text\n\n\n    @asynccontextmanager\n    async def book_client(*args, **kwargs):\n        async with BookClient(*args, **kwargs) as client:\n            yield client\n\"\"\"\n\n# We prevent Rich from actually writing to the terminal.\nwith open(os.devnull, \"w\") as devnull:\n    console = Console(record=True, width=65, file=devnull, markup=False)\n    renderable = Syntax(code, \"python\", theme=\"material\")\n    renderable = Padding(renderable, (0,), expand=False)\n    console.print(renderable, markup=False)\nsvg = console.export_svg(title=\"async context manager\")\n\n# Wrapping the SVG in a div prevents it from being wrapped in a paragraph,\n# which would add unnecessary space around it.\nprint(f\"&lt;div&gt;{svg}&lt;/div&gt;\")\n\n```\n</code></pre>"},{"location":"gallery/#console-output","title":"Console output","text":"<p>If you installed Markdown Exec with the <code>ansi</code> extra (<code>pip install markdown-exec[ansi]</code>), the ANSI colors in the output of shell commands will be translated to HTML/CSS, allowing to render them naturally in your documentation pages. For this to happen, use the <code>result=\"ansi\"</code> option.</p> ResultSource <pre><code>                40m   41m   42m   43m   44m   45m   46m   47m\n     m   xYz    xYz   xYz   xYz   xYz   xYz   xYz   xYz   xYz \n    1m   xYz    xYz   xYz   xYz   xYz   xYz   xYz   xYz   xYz \n   30m   xYz    xYz   xYz   xYz   xYz   xYz   xYz   xYz   xYz \n 1;30m   xYz    xYz   xYz   xYz   xYz   xYz   xYz   xYz   xYz \n   31m   xYz    xYz   xYz   xYz   xYz   xYz   xYz   xYz   xYz \n 1;31m   xYz    xYz   xYz   xYz   xYz   xYz   xYz   xYz   xYz \n   32m   xYz    xYz   xYz   xYz   xYz   xYz   xYz   xYz   xYz \n 1;32m   xYz    xYz   xYz   xYz   xYz   xYz   xYz   xYz   xYz \n   33m   xYz    xYz   xYz   xYz   xYz   xYz   xYz   xYz   xYz \n 1;33m   xYz    xYz   xYz   xYz   xYz   xYz   xYz   xYz   xYz \n   34m   xYz    xYz   xYz   xYz   xYz   xYz   xYz   xYz   xYz \n 1;34m   xYz    xYz   xYz   xYz   xYz   xYz   xYz   xYz   xYz \n   35m   xYz    xYz   xYz   xYz   xYz   xYz   xYz   xYz   xYz \n 1;35m   xYz    xYz   xYz   xYz   xYz   xYz   xYz   xYz   xYz \n   36m   xYz    xYz   xYz   xYz   xYz   xYz   xYz   xYz   xYz \n 1;36m   xYz    xYz   xYz   xYz   xYz   xYz   xYz   xYz   xYz \n   37m   xYz    xYz   xYz   xYz   xYz   xYz   xYz   xYz   xYz \n 1;37m   xYz    xYz   xYz   xYz   xYz   xYz   xYz   xYz   xYz \n</code></pre> <pre><code>```bash exec=\"true\" result=\"ansi\"\n#!/bin/bash\n# credits to https://github.com/42picky/42picky.github.io\ntext=\"xYz\"  # Some test text\necho -e \"\\n                40m   41m   42m   43m   44m   45m   46m   47m\"\nfor FGs in '    m' '   1m' '  30m' '1;30m' '  31m' '1;31m' '  32m' \\\n           '1;32m' '  33m' '1;33m' '  34m' '1;34m' '  35m' '1;35m' \\\n           '  36m' '1;36m' '  37m' '1;37m'; do\n    FG=${FGs// /}\n    echo -en \" $FGs \\033[$FG  ${text}  \"\n    for BG in 40m 41m 42m 43m 44m 45m 46m 47m; do\n        echo -en \"$EINS \\033[$FG\\033[${BG} ${text} \\033[0m\"\n    done\n    echo\ndone\necho\n```\n</code></pre>"},{"location":"gallery/#with-rich_1","title":"with Rich","text":"<p>Rich is a Python library for rich text and beautiful formatting in the terminal.</p> ResultSource <pre><code>$ griffe check griffe -ssrc -b0.24.0 -a0.23.0\nsrc/griffe/loader.py:156: GriffeLoader.resolve_aliases(only_exported): Parameter kind was changed: positional or keyword -&gt; keyword-only\nsrc/griffe/loader.py:156: GriffeLoader.resolve_aliases(only_exported): Parameter default was changed: True -&gt; None\nsrc/griffe/loader.py:156: GriffeLoader.resolve_aliases(only_known_modules): Parameter kind was changed: positional or keyword -&gt; keyword-only\nsrc/griffe/loader.py:156: GriffeLoader.resolve_aliases(only_known_modules): Parameter default was changed: True -&gt; None\nsrc/griffe/loader.py:156: GriffeLoader.resolve_aliases(max_iterations): Parameter kind was changed: positional or keyword -&gt; keyword-only\nsrc/griffe/loader.py:308: GriffeLoader.resolve_module_aliases(only_exported): Parameter was removed\nsrc/griffe/loader.py:308: GriffeLoader.resolve_module_aliases(only_known_modules): Parameter was removed\nsrc/griffe/git.py:39: tmp_worktree(commit): Parameter was removed\nsrc/griffe/git.py:39: tmp_worktree(repo): Positional parameter was moved: position: from 2 to 1 (-1)\nsrc/griffe/git.py:75: load_git(commit): Parameter was removed\nsrc/griffe/git.py:75: load_git(repo): Parameter kind was changed: positional or keyword -&gt; keyword-only\nsrc/griffe/git.py:75: load_git(submodules): Parameter kind was changed: positional or keyword -&gt; keyword-only\nsrc/griffe/git.py:75: load_git(try_relative_path): Parameter was removed\nsrc/griffe/git.py:75: load_git(extensions): Parameter kind was changed: positional or keyword -&gt; keyword-only\nsrc/griffe/git.py:75: load_git(search_paths): Parameter kind was changed: positional or keyword -&gt; keyword-only\nsrc/griffe/git.py:75: load_git(docstring_parser): Parameter kind was changed: positional or keyword -&gt; keyword-only\nsrc/griffe/git.py:75: load_git(docstring_options): Parameter kind was changed: positional or keyword -&gt; keyword-only\nsrc/griffe/git.py:75: load_git(lines_collection): Parameter kind was changed: positional or keyword -&gt; keyword-only\nsrc/griffe/git.py:75: load_git(modules_collection): Parameter kind was changed: positional or keyword -&gt; keyword-only\nsrc/griffe/git.py:75: load_git(allow_inspection): Parameter kind was changed: positional or keyword -&gt; keyword-only\n\n</code></pre> <pre><code>```python exec=\"true\" html=\"true\"\nimport os\n\nfrom rich.console import Console\n\nreport = \"\"\"$ griffe check griffe -ssrc -b0.24.0 -a0.23.0\n[bold]src/griffe/loader.py[/]:156: GriffeLoader.resolve_aliases([#7faeff]only_exported[/]): [#afaf72]Parameter kind was changed[/]: positional or keyword -&gt; keyword-only\n[bold]src/griffe/loader.py[/]:156: GriffeLoader.resolve_aliases([#7faeff]only_exported[/]): [#afaf72]Parameter default was changed[/]: True -&gt; None\n[bold]src/griffe/loader.py[/]:156: GriffeLoader.resolve_aliases([#7faeff]only_known_modules[/]): [#afaf72]Parameter kind was changed[/]: positional or keyword -&gt; keyword-only\n[bold]src/griffe/loader.py[/]:156: GriffeLoader.resolve_aliases([#7faeff]only_known_modules[/]): [#afaf72]Parameter default was changed[/]: True -&gt; None\n[bold]src/griffe/loader.py[/]:156: GriffeLoader.resolve_aliases([#7faeff]max_iterations[/]): [#afaf72]Parameter kind was changed[/]: positional or keyword -&gt; keyword-only\n[bold]src/griffe/loader.py[/]:308: GriffeLoader.resolve_module_aliases([#7faeff]only_exported[/]): [#afaf72]Parameter was removed[/]\n[bold]src/griffe/loader.py[/]:308: GriffeLoader.resolve_module_aliases([#7faeff]only_known_modules[/]): [#afaf72]Parameter was removed[/]\n[bold]src/griffe/git.py[/]:39: tmp_worktree([#7faeff]commit[/]): [#afaf72]Parameter was removed[/]\n[bold]src/griffe/git.py[/]:39: tmp_worktree([#7faeff]repo[/]): [#afaf72]Positional parameter was moved[/]: position: from 2 to 1 (-1)\n[bold]src/griffe/git.py[/]:75: load_git([#7faeff]commit[/]): [#afaf72]Parameter was removed[/]\n[bold]src/griffe/git.py[/]:75: load_git([#7faeff]repo[/]): [#afaf72]Parameter kind was changed[/]: positional or keyword -&gt; keyword-only\n[bold]src/griffe/git.py[/]:75: load_git([#7faeff]submodules[/]): [#afaf72]Parameter kind was changed[/]: positional or keyword -&gt; keyword-only\n[bold]src/griffe/git.py[/]:75: load_git([#7faeff]try_relative_path[/]): [#afaf72]Parameter was removed[/]\n[bold]src/griffe/git.py[/]:75: load_git([#7faeff]extensions[/]): [#afaf72]Parameter kind was changed[/]: positional or keyword -&gt; keyword-only\n[bold]src/griffe/git.py[/]:75: load_git([#7faeff]search_paths[/]): [#afaf72]Parameter kind was changed[/]: positional or keyword -&gt; keyword-only\n[bold]src/griffe/git.py[/]:75: load_git([#7faeff]docstring_parser[/]): [#afaf72]Parameter kind was changed[/]: positional or keyword -&gt; keyword-only\n[bold]src/griffe/git.py[/]:75: load_git([#7faeff]docstring_options[/]): [#afaf72]Parameter kind was changed[/]: positional or keyword -&gt; keyword-only\n[bold]src/griffe/git.py[/]:75: load_git([#7faeff]lines_collection[/]): [#afaf72]Parameter kind was changed[/]: positional or keyword -&gt; keyword-only\n[bold]src/griffe/git.py[/]:75: load_git([#7faeff]modules_collection[/]): [#afaf72]Parameter kind was changed[/]: positional or keyword -&gt; keyword-only\n[bold]src/griffe/git.py[/]:75: load_git([#7faeff]allow_inspection[/]): [#afaf72]Parameter kind was changed[/]: positional or keyword -&gt; keyword-only\n\"\"\"\n\nwith open(os.devnull, \"w\") as devnull:\n    console = Console(record=True, width=150, file=devnull)\n    console.print(report, markup=True, highlight=False)\nprint(console.export_html(inline_styles=True, code_format=\"&lt;pre&gt;&lt;code&gt;{code}&lt;/code&gt;&lt;/pre&gt;\"))\n\n```\n</code></pre>"},{"location":"gallery/#svg-drawings","title":"SVG drawings","text":""},{"location":"gallery/#with-chalk","title":"with Chalk","text":"<p>A declarative drawing API in Python.</p> ResultSource <pre><code>```python exec=\"true\" html=\"true\"\nfrom tempfile import NamedTemporaryFile\nfrom chalk import Diagram, triangle, unit_x\nfrom colour import Color\n\npapaya = Color(\"#ff9700\")\n\ndef sierpinski(n: int, size: int) -&gt; Diagram:\n    if n &lt;= 1:\n        return triangle(size)\n    else:\n        smaller = sierpinski(n - 1, size / 2)\n        return smaller.above(smaller.beside(smaller, unit_x).center_xy())\n\nd = sierpinski(5, 4).fill_color(papaya)\n\n# Chalk doesn't provide an easy method to get a string directly,\n# so we use a temporary file.\nwith NamedTemporaryFile(\"w+\") as tmpfile:\n    d.render_svg(tmpfile.name, height=256)\n    tmpfile.seek(0)\n    svg = tmpfile.read()\n\nprint(svg)\n\n```\n</code></pre>"},{"location":"gallery/#with-drawsvg-2","title":"with Drawsvg 2","text":"<p>Programmatically generate SVG (vector) images, animations, and interactive Jupyter widgets.</p> ResultSource <pre><code>```python exec=\"true\" html=\"true\"\nimport drawsvg as draw\n\nd = draw.Drawing(200, 200, origin='center')\n\n# Animate the position and color of circle\nc = draw.Circle(0, 0, 20, fill='red')\n# See for supported attributes:\n# https://developer.mozilla.org/en-US/docs/Web/SVG/Element/animate\nc.append_anim(draw.Animate('cy', '6s', '-80;80;-80',\n                           repeatCount='indefinite'))\nc.append_anim(draw.Animate('cx', '6s', '0;80;0;-80;0',\n                           repeatCount='indefinite'))\nc.append_anim(draw.Animate('fill', '6s', 'red;green;blue;yellow',\n                           calc_mode='discrete',\n                           repeatCount='indefinite'))\nd.append(c)\n\n# Animate a black circle around an ellipse\nellipse = draw.Path()\nellipse.M(-90, 0)\nellipse.A(90, 40, 360, True, True, 90, 0)  # Ellipse path\nellipse.A(90, 40, 360, True, True, -90, 0)\nellipse.Z()\nc2 = draw.Circle(0, 0, 10)\n# See for supported attributes:\n# https://developer.mozilla.org/en-US/docs/Web/SVG/Element/animate_motion\nc2.append_anim(draw.AnimateMotion(ellipse, '3s',\n                                  repeatCount='indefinite'))\n# See for supported attributes:\n# https://developer.mozilla.org/en-US/docs/Web/SVG/Element/animate_transform\nc2.append_anim(draw.AnimateTransform('scale', '3s', '1,2;2,1;1,2;2,1;1,2',\n                                     repeatCount='indefinite'))\nd.append(c2)\nprint(d.as_svg())\n```\n</code></pre>"},{"location":"gallery/#with-hyperbolic","title":"with Hyperbolic","text":"<p>A Python 3 library for constructing and drawing hyperbolic geometry.</p> ResultSource <pre><code>```python exec=\"true\" html=\"true\"\nimport math\n\nfrom drawsvg import Drawing\nfrom hyperbolic.poincare import *\nfrom hyperbolic.poincare.util import triangle_side_for_angles\nimport hyperbolic.tiles as htiles\n\n\np1 = 4\np2 = 3\nq = 3\nrotate = 0\n\ntheta1, theta2 = math.pi*2/p1, math.pi*2/p2\nphi_sum = math.pi*2/q\nr1 = triangle_side_for_angles(theta1/2, phi_sum/2, theta2/2)\nr2 = triangle_side_for_angles(theta2/2, phi_sum/2, theta1/2)\n\nt_gen1 = htiles.TileGen.make_regular(p1, hr=r1, skip=1)\nt_gen2 = htiles.TileGen.make_regular(p2, hr=r2, skip=1)\n\nt_layout = htiles.TileLayout()\nt_layout.add_generator(t_gen1, (1,)*p1)\nt_layout.add_generator(t_gen2, (0,)*p2, htiles.TileDecoratorNull())\nstart_tile = t_layout.default_start_tile(rotate_deg=rotate)\n\nt1 = start_tile\nt2 = t_layout.place_tile(t1.sides[-1])\nt3 = t_layout.place_tile(t2.sides[-1])\npoint_base = t3.vertices[-1]\npoints = [Transform.rotation(deg=-i*360/p1).apply_to_point(point_base)\n          for i in range(p1)]\nvertices = start_tile.vertices\nedges = []\nfor i, point in enumerate(points):\n    v1 = vertices[i]\n    v2 = vertices[(i+1)%p1]\n    edge = Hypercycle.from_points(*v1, *v2, *point, segment=True, exclude_mid=True)\n    edges.append(edge)\ndecorate_poly = Polygon(edges=edges, vertices=vertices)\ndecorator1 = htiles.TileDecoratorPolygons(decorate_poly)\nt_layout.set_decorator(decorator1, 0)\n\nstart_tile = t_layout.default_start_tile(rotate_deg=rotate)\ntiles = t_layout.tile_plane(start_tile, depth=6)\n\nd = Drawing(2, 2, origin='center')\n#d.draw(euclid.Circle(0, 0, 1), fill='silver')\nfor tile in tiles:\n    d.draw(tile, hwidth=0.02, fill='red')\ntiles[0].decorator = None\nd.draw(\n    Hypercycle.from_points(\n        *tiles[0].vertices[0], *tiles[0].vertices[1], *point_base\n    ),\n    hwidth=0.02,\n    fill='black',\n)\n\nd.set_render_size(w=400)\nprint(d.as_svg())\n\n```\n</code></pre>"},{"location":"gallery/#qrcodes","title":"QRCodes","text":""},{"location":"gallery/#with-qrcode","title":"with qrcode","text":"<p>Python QR Code image generator.</p> ResultSource <pre><code>```python exec=\"true\" html=\"true\"\nimport qrcode\nfrom qrcode.image.svg import SvgPathImage\n\nimg = qrcode.make(\"https://github.com/sponsors/lincolnloop\", box_size=20, border=2, image_factory=SvgPathImage)\nprint(f'&lt;div&gt;{img.to_string().decode(\"utf8\")}&lt;/div&gt;')\n\n```\n</code></pre>"},{"location":"gallery/#tui-screenshots","title":"TUI screenshots","text":""},{"location":"gallery/#with-textual","title":"with Textual","text":"<p>Textual is a Rapid Application Development framework for Python, built by Textualize.io.</p> ResultSource <p> TextApp \u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513 \u2503\u2503 \u2503\u2503 \u2503Hello\u2503 \u2503\u2503 \u2503\u2503 \u2517\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u251b \u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513 \u2503\u2503 \u2503\u2503 \u2503World!\u2503 \u2503\u2503 \u2503\u2503 \u2517\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u251b </p> <pre><code>```python exec=\"1\" html=\"true\"\nfrom textual.app import App, ComposeResult\nfrom textual.widgets import Static\nfrom textual._doc import take_svg_screenshot\n\n\nclass TextApp(App):\n    CSS = \"\"\"\n    Screen {\n        background: darkblue;\n        color: white;\n        layout: vertical;\n    }\n    Static {\n        height: auto;\n        padding: 2;\n        border: heavy white;\n        background: #ffffff 30%;\n        content-align: center middle;\n    }\n    \"\"\"\n\n    def compose(self) -&gt; ComposeResult:\n        yield Static(\"Hello\")\n        yield Static(\"[b]World![/b]\")\n\n\nprint(take_svg_screenshot(app=TextApp(), terminal_size=(80, 24)))\n\n```\n</code></pre>"},{"location":"gallery/#file-trees","title":"File-trees","text":"<p>This example displays a file-tree of the current project, in which you can descend thanks to Material for MkDocs' code annotations. It uses a recursive Python function which accept a code block session name as parameter \ud83e\udd2f:</p> ResultSource <p></p> <pre><code>\ud83d\udcc1 .git/\n\ud83d\udcc1 .github/ # (1)!\n\ud83d\udcc1 .venv/\n\ud83d\udcc1 .venvs/\n\ud83d\udcc1 .vscode/ # (2)!\n\ud83d\udcc1 build/ # (3)!\n\ud83d\udcc1 config/ # (4)!\n\ud83d\udcc1 docs/ # (5)!\n\ud83d\udcc1 htmlcov/\n\ud83d\udcc1 scripts/ # (6)!\n\ud83d\udcc1 site/\n\ud83d\udcc1 src/ # (7)!\n\ud83d\udcc1 tests/ # (8)!\n .copier-answers.yml\n .envrc\n .gitignore\n CHANGELOG.md\n CODE_OF_CONDUCT.md\n CONTRIBUTING.md\n FUNDING.json\n LICENSE\n Makefile\n README.md\n duties.py\n mkdocs.yml\n pyproject.toml\n uv.lock\n</code></pre> <ol> <li> <pre><code>\ud83d\udcc1 ISSUE_TEMPLATE/ # (1)!\n\ud83d\udcc1 workflows/ # (2)!\n FUNDING.yml\n</code></pre> <ol> <li> <pre><code> 1-bug.md\n 2-feature.md\n 3-docs.md\n 4-change.md\n config.yml\n</code></pre> </li> <li> <pre><code> ci.yml\n release.yml\n</code></pre> </li> </ol> </li> <li> <pre><code> launch.json\n settings.json\n tasks.json\n</code></pre> </li> <li> <pre><code> _editable_impl_markdown_exec.py\n markdown_exec.pth\n</code></pre> </li> <li> <pre><code>\ud83d\udcc1 vscode/ # (1)!\n coverage.ini\n git-changelog.toml\n mypy.ini\n pytest.ini\n ruff.toml\n</code></pre> <ol> <li> <pre><code> launch.json\n settings.json\n tasks.json\n</code></pre> </li> </ol> </li> <li> <pre><code>\ud83d\udcc1 .overrides/ # (1)!\n\ud83d\udcc1 css/ # (2)!\n\ud83d\udcc1 insiders/ # (3)!\n\ud83d\udcc1 js/ # (4)!\n\ud83d\udcc1 reference/ # (5)!\n\ud83d\udcc1 snippets/ # (6)!\n\ud83d\udcc1 usage/ # (7)!\n changelog.md\n code_of_conduct.md\n contributing.md\n credits.md\n gallery.md\n index.md\n license.md\n schema.json\n</code></pre> <ol> <li> <pre><code>\ud83d\udcc1 partials/ # (1)!\n main.html\n</code></pre> <ol> <li> <pre><code> comments.html\n path-item.html\n</code></pre> </li> </ol> </li> <li> <pre><code> insiders.css\n material.css\n mkdocstrings.css\n</code></pre> </li> <li> <pre><code> changelog.md\n goals.yml\n index.md\n installation.md\n</code></pre> </li> <li> <pre><code> feedback.js\n insiders.js\n</code></pre> </li> <li> <pre><code> api.md\n</code></pre> </li> <li> <pre><code>\ud83d\udcc1 gallery/ # (1)!\n\ud83d\udcc1 usage/ # (2)!\n</code></pre> <ol> <li> <pre><code> ansi.sh\n argparse.py\n argparse_format.py\n chalk.py\n d2.py\n diagrams.py\n drawsvg.py\n expandable_filetree.py\n hyperbolic.py\n matplotlib.py\n plotly.py\n pydeps.py\n qrcode.py\n rich.py\n rich_terminal.py\n runpy.py\n textual.py\n</code></pre> </li> <li> <pre><code> boolean_matrix.py\n hide.py\n multiple.pycon\n platform_html.py\n platform_md.py\n source.py\n source.pycon\n</code></pre> </li> </ol> </li> <li> <pre><code> index.md\n pyodide.md\n python.md\n shell.md\n tree.md\n</code></pre> </li> </ol> </li> <li> <pre><code> gen_credits.py\n get_version.py\n insiders.py\n make\n make.py\n</code></pre> </li> <li> <pre><code>\ud83d\udcc1 markdown_exec/ # (1)!\n</code></pre> <ol> <li> <pre><code>\ud83d\udcc1 _internal/ # (1)!\n\ud83d\udcc1 assets/ # (2)!\n\ud83d\udcc1 formatters/ # (3)!\n __init__.py\n logger.py\n mkdocs_plugin.py\n processors.py\n py.typed\n rendering.py\n</code></pre> <ol> <li> <pre><code>\ud83d\udcc1 formatters/ # (1)!\n __init__.py\n debug.py\n logger.py\n main.py\n mkdocs_plugin.py\n processors.py\n rendering.py\n</code></pre> <ol> <li> <pre><code> __init__.py\n _exec_python.py\n base.py\n bash.py\n console.py\n markdown.py\n pycon.py\n pyodide.py\n python.py\n sh.py\n tree.py\n</code></pre> </li> </ol> </li> <li> <pre><code> ansi.css\n pyodide.css\n pyodide.js\n</code></pre> </li> <li> <pre><code> __init__.py\n base.py\n bash.py\n console.py\n markdown.py\n pycon.py\n pyodide.py\n python.py\n sh.py\n tree.py\n</code></pre> </li> </ol> </li> </ol> </li> <li> <pre><code> __init__.py\n conftest.py\n test_api.py\n test_base_formatter.py\n test_converter.py\n test_headings.py\n test_python.py\n test_shell.py\n test_toc.py\n test_tree.py\n test_validator.py\n</code></pre> </li> </ol> <pre><code>```python exec=\"1\" session=\"filetree\"\nfrom fnmatch import fnmatch\nfrom pathlib import Path\n\nexclude = {\"dist\", \"*cache*\", \".devbox\", \".hypothesis\", \".pdm*\", \".coverage*\", \"profile.*\"}\nno_recurse = {\".venv*\", \"site\", \"htmlcov\", \".git\"}\n\n\ndef exptree(path: str, session: str) -&gt; None:\n    # List files and directories separately.\n    files = []\n    dirs = []\n    for node in Path(path).iterdir():\n        if any(fnmatch(node.name, pattern) for pattern in exclude):\n            continue\n        if node.is_dir():\n            dirs.append(node)\n        else:\n            files.append(node)\n\n    # Print directories first, then files (both sorted).\n    recurse = []\n    print(\"```tree\")\n    for directory in sorted(dirs):\n        if any(fnmatch(directory.name, pattern) for pattern in no_recurse):\n            print(f\"{directory.name}/\")\n        else:\n            recurse.append(directory.name)\n            # Add code annotation at the end.\n            print(f\"{directory.name}/ # ({len(recurse)})!\")\n    for file in sorted(files):\n        print(file.name)\n    print(\"```\\n\")\n\n    # Print contents of each annotated directory.\n    for index, directory in enumerate(recurse, 1):\n        new_path = f\"{path}/{directory}\"\n        print(f\"{index}. \\n\")\n        # The recursive part!\n        print(f'    ```python exec=\"1\" session=\"{session}\"')\n        print(f'    exptree(\"{new_path}\", \"{session}\")')\n        print(\"    ```\\n\")\n\n```\n\n```python exec=\"1\" session=\"filetree\"\nexptree(\".\", \"filetree\")\n```\n</code></pre>"},{"location":"gallery/#python-cli-documentation","title":"Python CLI documentation","text":""},{"location":"gallery/#with-argparse-code-block","title":"with <code>argparse</code> (code block)","text":"<p>If you know a project is using <code>argparse</code> to build its command line interface, and if it exposes its parser, then you can get the help message directly from the parser.</p> ResultSource <pre><code>usage: duty [GLOBAL_OPTS...] [DUTY [DUTY_OPTS...] [DUTY_PARAMS...]...]\n\nA simple task runner.\n\npositional arguments:\n  remainder\n\nGlobal options:\n  -d DUTIES_FILE, --duties-file DUTIES_FILE\n                        Python file where the duties are defined.\n  -l, --list            List the available duties.\n  -h [DUTY ...], --help [DUTY ...]\n                        Show this help message and exit. Pass duties names to\n                        print their help.\n  -V, --version         show program's version number and exit\n  --debug-info          Print debug information.\n  -c {stdout,stderr,both,none}, --capture {stdout,stderr,both,none}\n                        Which output to capture. Colors are supported with\n                        'both' only, unless the command has a 'force color'\n                        option.\n  -f {pretty,tap}, --fmt {pretty,tap}, --format {pretty,tap}\n                        Output format. Pass your own Jinja2 template as a\n                        string with '-f custom=TEMPLATE'. Available variables:\n                        command, title (command or title passed with -t), code\n                        (exit status), success (boolean), failure (boolean),\n                        number (command number passed with -n), output\n                        (command output), nofail (boolean), quiet (boolean),\n                        silent (boolean). Available filters: indent\n                        (textwrap.indent).\n  -y, --pty             Enable the use of a pseudo-terminal. PTY doesn't allow\n                        programs to use standard input.\n  -Y, --no-pty          Disable the use of a pseudo-terminal. PTY doesn't\n                        allow programs to use standard input.\n  -p, --progress        Print progress while running a command.\n  -P, --no-progress     Don't print progress while running a command.\n  -q, --quiet           Don't print the command output, even if it failed.\n  -Q, --no-quiet        Print the command output when it fails.\n  -s, --silent          Don't print anything.\n  -S, --no-silent       Print output as usual.\n  -z, --zero, --nofail  Don't fail. Always return a success (0) exit code.\n  -Z, --no-zero, --strict\n                        Return the original exit code.\n</code></pre> <pre><code>```python exec=\"true\"\nfrom duty.cli import get_parser\n\nparser = get_parser()\nprint(f\"```\\n{parser.format_help()}\\n```\")\n\n```\n</code></pre>"},{"location":"gallery/#with-argparse-markdown","title":"with <code>argparse</code> (Markdown)","text":"<p>In this example, we inspect the <code>argparse</code> parser to build better-looking Markdown/HTML contents. We simply use the description and iterate on options, but more complex stuff is possible of course.</p> ResultSource <pre><code>```python exec=\"true\" updatetoc=\"no\"\nimport argparse\n\nfrom duty.cli import get_parser\n\nparser = get_parser()\nlines = []\nlines.append(f\"## duty\")\nif parser.description:\n    lines.append(parser.description)\nlines.append(\"\\nOptions:\\n\")\nfor action in parser._actions:\n    opts = [f\"`{opt}`\" for opt in action.option_strings]\n    if not opts:\n        continue\n    line = \"- \" + \",\".join(opts)\n    if action.metavar:\n        line += f\" `{action.metavar}`\"\n    line += f\": {action.help}\"\n    if action.default and action.default != argparse.SUPPRESS:\n        line += f\"(default: {action.default})\"\n    lines.append(line)\nprint(\"\\n\".join(lines))\n\n```\n</code></pre>"},{"location":"gallery/#exec-78--duty","title":"duty","text":"<p>A simple task runner.</p> <p>Options:</p> <ul> <li><code>-d</code>,<code>--duties-file</code>: Python file where the duties are defined.(default: duties.py)</li> <li><code>-l</code>,<code>--list</code>: List the available duties.</li> <li><code>-h</code>,<code>--help</code> <code>DUTY</code>: Show this help message and exit. Pass duties names to print their help.</li> <li><code>--completion</code>: ==SUPPRESS==</li> <li><code>--complete</code>: ==SUPPRESS==</li> <li><code>-V</code>,<code>--version</code>: show program's version number and exit</li> <li><code>--debug-info</code>: Print debug information.</li> <li><code>-c</code>,<code>--capture</code>: Which output to capture. Colors are supported with 'both' only, unless the command has a 'force color' option.</li> <li><code>-f</code>,<code>--fmt</code>,<code>--format</code>: Output format. Pass your own Jinja2 template as a string with '-f custom=TEMPLATE'. Available variables: command, title (command or title passed with -t), code (exit status), success (boolean), failure (boolean), number (command number passed with -n), output (command output), nofail (boolean), quiet (boolean), silent (boolean). Available filters: indent (textwrap.indent).</li> <li><code>-y</code>,<code>--pty</code>: Enable the use of a pseudo-terminal. PTY doesn't allow programs to use standard input.</li> <li><code>-Y</code>,<code>--no-pty</code>: Disable the use of a pseudo-terminal. PTY doesn't allow programs to use standard input.</li> <li><code>-p</code>,<code>--progress</code>: Print progress while running a command.</li> <li><code>-P</code>,<code>--no-progress</code>: Don't print progress while running a command.</li> <li><code>-q</code>,<code>--quiet</code>: Don't print the command output, even if it failed.</li> <li><code>-Q</code>,<code>--no-quiet</code>: Print the command output when it fails.</li> <li><code>-s</code>,<code>--silent</code>: Don't print anything.</li> <li><code>-S</code>,<code>--no-silent</code>: Print output as usual.</li> <li><code>-z</code>,<code>--zero</code>,<code>--nofail</code>: Don't fail. Always return a success (0) exit code.</li> <li><code>-Z</code>,<code>--no-zero</code>,<code>--strict</code>: Return the original exit code.</li> </ul>"},{"location":"gallery/#with-runpy","title":"with <code>runpy</code>","text":"<p>This example uses Python's <code>runpy</code> module to run another Python module. This other module's output is captured by temporarily patching <code>sys.stdout</code> with a text buffer.</p> ResultSource <pre><code>\n</code></pre> <pre><code>```python exec=\"true\"\nimport sys\nimport warnings\nfrom contextlib import suppress\nfrom io import StringIO\nfrom runpy import run_module\n\nold_argv = list(sys.argv)\nsys.argv = [\"mkdocs\"]\nold_stdout = sys.stdout\nsys.stdout = StringIO()\nwarnings.filterwarnings(\"ignore\", category=RuntimeWarning)\nwith suppress(SystemExit):\n    run_module(\"mkdocs\", run_name=\"__main__\")\noutput = sys.stdout.getvalue()\nsys.stdout = old_stdout\nsys.argv = old_argv\n\nprint(f\"```\\n{output}\\n```\")\n\n```\n</code></pre>"},{"location":"license/","title":"License","text":"<pre><code>ISC License\n\nCopyright (c) 2022, Timoth\u00e9e Mazzucotelli\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted, provided that the above\ncopyright notice and this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\nWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\nANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\nACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\nOR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n</code></pre>"},{"location":"insiders/","title":"Insiders","text":"<p>Markdown Exec follows the sponsorware release strategy, which means that new features are first exclusively released to sponsors as part of Insiders. Read on to learn what sponsorships achieve, how to become a sponsor to get access to Insiders, and what's in it for you!</p>"},{"location":"insiders/#what-is-insiders","title":"What is Insiders?","text":"<p>Markdown Exec Insiders is a private fork of Markdown Exec, hosted as a private GitHub repository. Almost<sup>1</sup> all new features are developed as part of this fork, which means that they are immediately available to all eligible sponsors, as they are granted access to this private repository.</p> <p>Every feature is tied to a funding goal in monthly subscriptions. When a funding goal is hit, the features that are tied to it are merged back into Markdown Exec and released for general availability, making them available to all users. Bugfixes are always released in tandem.</p> <p>Sponsorships start as low as $10 a month.<sup>2</sup></p>"},{"location":"insiders/#what-sponsorships-achieve","title":"What sponsorships achieve","text":"<p>Sponsorships make this project sustainable, as they buy the maintainers of this project time \u2013 a very scarce resource \u2013 which is spent on the development of new features, bug fixing, stability improvement, issue triage and general support. The biggest bottleneck in Open Source is time.<sup>3</sup></p> <p>If you're unsure if you should sponsor this project, check out the list of completed funding goals to learn whether you're already using features that were developed with the help of sponsorships. You're most likely using at least a handful of them, thanks to our awesome sponsors!</p>"},{"location":"insiders/#whats-in-it-for-me","title":"What's in it for me?","text":"<p>The moment you become a sponsor, you'll get immediate access to 1 additional features that you can start using right away, and which are currently exclusively available to sponsors:</p> <ul> <li> Custom icons in tree fences</li> </ul> <p>These are just the features related to this project. See the complete feature list on the author's main Insiders page.</p> <p>Additionally, your sponsorship will give more weight to your upvotes on issues, helping us prioritize work items in our backlog. For more information on how we prioritize work, see this page: Backlog management.</p>"},{"location":"insiders/#how-to-become-a-sponsor","title":"How to become a sponsor","text":"<p>Thanks for your interest in sponsoring! In order to become an eligible sponsor with your GitHub account, visit pawamoy's sponsor profile, and complete a sponsorship of $10 a month or more. You can use your individual or organization GitHub account for sponsoring.</p> <p>Sponsorships lower than $10 a month are also very much appreciated, and useful. They won't grant you access to Insiders, but they will be counted towards reaching sponsorship goals. Every sponsorship helps us implementing new features and releasing them to the public.</p> <p>Important: By default, when you're sponsoring @pawamoy through a GitHub organization, all the publicly visible members of the organization will be invited to join our private repositories. If you wish to only grant access to a subset of users, please send a short email to insiders@pawamoy.fr with the name of your organization and the GitHub accounts of the users that should be granted access.</p> <p>Tip: to ensure that access is not tied to a particular individual GitHub account, you can create a bot account (i.e. a GitHub account that is not tied to a specific individual), and use this account for the sponsoring. After being granted access to our private repositories, the bot account can create private forks of our private repositories into your own organization, which all members of your organization will have access to.</p> <p>You can cancel your sponsorship anytime.<sup>4</sup></p> <p> \u00a0 Join our  awesome sponsors</p> <p>   If you sponsor publicly, you're automatically added here with a link to your profile and avatar to show your support for Markdown Exec. Alternatively, if you wish to keep your sponsorship private, you'll be a silent +1. You can select visibility during checkout and change it afterwards. </p>"},{"location":"insiders/#funding","title":"Funding","text":""},{"location":"insiders/#goals","title":"Goals","text":"<p>The following section lists all funding goals. Each goal contains a list of features prefixed with a checkmark symbol, denoting whether a feature is  already available or  planned, but not yet implemented. When the funding goal is hit, the features are released for general availability.</p> <p></p>"},{"location":"insiders/#1500-hyperlamp-navigation-tips","title":"$ 1,500 \u2014 HyperLamp Navigation Tips","text":"<ul> <li> Custom icons in tree fences</li> </ul>"},{"location":"insiders/#2000-fusiondrive-ejection-configuration","title":"$ 2,000 \u2014 FusionDrive Ejection Configuration","text":"<p>There are no features in this goal for this project. See the features in this goal for all Insiders projects.</p>"},{"location":"insiders/#goals-completed","title":"Goals completed","text":"<p>This section lists all funding goals that were previously completed, which means that those features were part of Insiders, but are now generally available and can be used by all users.</p> <p></p>"},{"location":"insiders/#500-plasmavac-user-guide","title":"$ 500 \u2014 PlasmaVac User Guide","text":"<ul> <li> Pyodide fence</li> </ul>"},{"location":"insiders/#1000-gravifridge-fluid-renewal","title":"$ 1,000 \u2014 GraviFridge Fluid Renewal","text":"<p>There are no features in this goal for this project. See the features in this goal for all Insiders projects.</p>"},{"location":"insiders/#frequently-asked-questions","title":"Frequently asked questions","text":""},{"location":"insiders/#compatibility","title":"Compatibility","text":"<p>We're building an open source project and want to allow outside collaborators to use Markdown Exec locally without having access to Insiders. Is this still possible?</p> <p>Yes. Insiders is compatible with Markdown Exec. Almost all new features and configuration options are either backward-compatible or implemented behind feature flags. Most Insiders features enhance the overall experience, though while these features add value for the users of your project, they shouldn't be necessary for previewing when making changes to content.</p>"},{"location":"insiders/#payment","title":"Payment","text":"<p>We don't want to pay for sponsorship every month. Are there any other options?</p> <p>Yes. You can sponsor on a yearly basis by switching your GitHub account to a yearly billing cycle. If for some reason you cannot do that, you could also create a dedicated GitHub account with a yearly billing cycle, which you only use for sponsoring (some sponsors already do that).</p> <p>If you have any problems or further questions, please reach out to insiders@pawamoy.fr.</p>"},{"location":"insiders/#terms","title":"Terms","text":"<p>Are we allowed to use Insiders under the same terms and conditions as Markdown Exec?</p> <p>Yes. Whether you're an individual or a company, you may use Markdown Exec Insiders precisely under the same terms as Markdown Exec, which are given by the ISC license. However, we kindly ask you to respect our fair use policy:</p> <ul> <li>Please don't distribute the source code of Insiders. You may freely use it for public, private or commercial projects, privately fork or mirror it, but please don't make the source code public, as it would counteract the sponsorware strategy.</li> <li>If you cancel your subscription, your access to the private repository is revoked, and you will miss out on all future updates of Insiders. However, you may use the latest version that's available to you as long as you like. Just remember that GitHub deletes private forks.</li> </ul> <ol> <li> <p>In general, every new feature is first exclusively released to sponsors, but sometimes upstream dependencies enhance existing features that must be supported by Markdown Exec.\u00a0\u21a9</p> </li> <li> <p>Note that $10 a month is the minimum amount to become eligible for Insiders. While GitHub Sponsors also allows to sponsor lower amounts or one-time amounts, those can't be granted access to Insiders due to technical reasons. Such contributions are still very much welcome as they help ensuring the project's sustainability.\u00a0\u21a9</p> </li> <li> <p>Making an Open Source project sustainable is exceptionally hard: maintainers burn out, projects are abandoned. That's not great and very unpredictable. The sponsorware model ensures that if you decide to use Markdown Exec, you can be sure that bugs are fixed quickly and new features are added regularly.\u00a0\u21a9</p> </li> <li> <p>If you cancel your sponsorship, GitHub schedules a cancellation request which will become effective at the end of the billing cycle. This means that even though you cancel your sponsorship, you will keep your access to Insiders as long as your cancellation isn't effective. All charges are processed by GitHub through Stripe. As we don't receive any information regarding your payment, and GitHub doesn't offer refunds, sponsorships are non-refundable.\u00a0\u21a9</p> </li> </ol>"},{"location":"insiders/changelog/","title":"Changelog","text":""},{"location":"insiders/changelog/#markdown-exec-insiders","title":"Markdown Exec Insiders","text":""},{"location":"insiders/changelog/#1.1.0","title":"1.1.0 July 8, 2024","text":"<ul> <li>Custom icons based on file name and extension in <code>tree</code> fences</li> </ul>"},{"location":"insiders/changelog/#1.0.1","title":"1.0.1 June 15, 2023","text":"<ul> <li>Support HTML minification by wrapping code in pre tags</li> <li>Catch JS error on pages without Pyodide fences</li> </ul>"},{"location":"insiders/changelog/#1.0.0","title":"1.0.0 April 26, 2023","text":"<ul> <li>Add a <code>pyodide</code> fence</li> </ul>"},{"location":"insiders/installation/","title":"Getting started with Insiders","text":"<p>Markdown Exec Insiders is a compatible drop-in replacement for Markdown Exec, and can be installed similarly using <code>pip</code> or <code>git</code>. Note that in order to access the Insiders repository, you need to become an eligible sponsor of @pawamoy on GitHub.</p>"},{"location":"insiders/installation/#installation","title":"Installation","text":""},{"location":"insiders/installation/#with-the-insiders-tool","title":"with the <code>insiders</code> tool","text":"<p><code>insiders</code> is a tool that helps you keep up-to-date versions of Insiders projects in the PyPI index of your choice (self-hosted, Google registry, Artifactory, etc.).</p> <p>We kindly ask that you do not upload the distributions to public registries, as it is against our Terms of use.</p>"},{"location":"insiders/installation/#with-pip-sshhttps","title":"with pip (ssh/https)","text":"<p>Markdown Exec Insiders can be installed with <code>pip</code> using SSH:</p> <pre><code>pip install git+ssh://git@github.com/pawamoy-insiders/markdown-exec.git\n</code></pre> <p>Or using HTTPS:</p> <pre><code>pip install git+https://${GH_TOKEN}@github.com/pawamoy-insiders/markdown-exec.git\n</code></pre> How to get a GitHub personal access token? <p> The <code>GH_TOKEN</code> environment variable is a GitHub token. It can be obtained by creating a personal access token for your GitHub account. It will give you access to the Insiders repository, programmatically, from the command line or GitHub Actions workflows:</p> <ol> <li>Go to https://github.com/settings/tokens</li> <li>Click on Generate a new token</li> <li>Enter a name and select the <code>repo</code> scope</li> <li>Generate the token and store it in a safe place</li> </ol> <p>Note that the personal access token must be kept secret at all times, as it allows the owner to access your private repositories.</p>"},{"location":"insiders/installation/#with-git","title":"with Git","text":"<p>Of course, you can use Markdown Exec Insiders directly using Git:</p> <pre><code>git clone git@github.com:pawamoy-insiders/markdown-exec\n</code></pre> <p>When cloning with Git, the package must be installed:</p> <pre><code>pip install -e markdown-exec\n</code></pre>"},{"location":"insiders/installation/#upgrading","title":"Upgrading","text":"<p>When upgrading Insiders, you should always check the version of Markdown Exec which makes up the first part of the version qualifier. For example, a version like <code>8.x.x.4.x.x</code> means that Insiders <code>4.x.x</code> is currently based on <code>8.x.x</code>.</p> <p>If the major version increased, it's a good idea to consult the changelog and go through the steps to ensure your configuration is up to date and all necessary changes have been made.</p>"},{"location":"reference/api/","title":"API reference","text":""},{"location":"reference/api/#markdown_exec","title":"markdown_exec","text":"<p>Markdown Exec package.</p> <p>Utilities to execute code blocks in Markdown files.</p> <p>Modules:</p> <ul> <li> <code>formatters</code>           \u2013            <p>Deprecated. Import from <code>markdown_exec</code> directly.</p> </li> <li> <code>logger</code>           \u2013            <p>Deprecated. Import from <code>markdown_exec</code> directly.</p> </li> <li> <code>mkdocs_plugin</code>           \u2013            <p>Deprecated. Import from <code>markdown_exec</code> directly.</p> </li> <li> <code>processors</code>           \u2013            <p>Deprecated. Import from <code>markdown_exec</code> directly.</p> </li> <li> <code>rendering</code>           \u2013            <p>Deprecated. Import from <code>markdown_exec</code> directly.</p> </li> </ul> <p>Classes:</p> <ul> <li> <code>ExecutionError</code>           \u2013            <p>Exception raised for errors during execution of a code block.</p> </li> <li> <code>HeadingReportingTreeprocessor</code>           \u2013            <p>Records the heading elements encountered in the document.</p> </li> <li> <code>IdPrependingTreeprocessor</code>           \u2013            <p>Prepend the configured prefix to IDs of all HTML elements.</p> </li> <li> <code>InsertHeadings</code>           \u2013            <p>Our headings insertor.</p> </li> <li> <code>MarkdownConfig</code>           \u2013            <p>This class returns a singleton used to store Markdown extensions configuration.</p> </li> <li> <code>MarkdownConverter</code>           \u2013            <p>Helper class to avoid breaking the original Markdown instance state.</p> </li> <li> <code>MarkdownExecPlugin</code>           \u2013            <p>MkDocs plugin to easily enable custom fences for code blocks execution.</p> </li> <li> <code>MarkdownExecPluginConfig</code>           \u2013            <p>Configuration of the plugin (for <code>mkdocs.yml</code>).</p> </li> <li> <code>RemoveHeadings</code>           \u2013            <p>Our headings remover.</p> </li> </ul> <p>Functions:</p> <ul> <li> <code>add_source</code>             \u2013              <p>Add source code block to the output.</p> </li> <li> <code>base_format</code>             \u2013              <p>Execute code and return HTML.</p> </li> <li> <code>code_block</code>             \u2013              <p>Format code as a code block.</p> </li> <li> <code>console_width</code>             \u2013              <p>Set the console width for the duration of the context.</p> </li> <li> <code>formatter</code>             \u2013              <p>Execute code and return HTML.</p> </li> <li> <code>get_logger</code>             \u2013              <p>Create and return a new logger instance.</p> </li> <li> <code>patch_loggers</code>             \u2013              <p>Patch loggers.</p> </li> <li> <code>tabbed</code>             \u2013              <p>Format tabs using <code>pymdownx.tabbed</code> extension.</p> </li> <li> <code>validator</code>             \u2013              <p>Validate code blocks inputs.</p> </li> <li> <code>working_directory</code>             \u2013              <p>Change the working directory for the duration of the context.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>MARKDOWN_EXEC_AUTO</code>           \u2013            <p>Languages to automatically execute.</p> </li> <li> <code>default_tabs</code>           \u2013            <p>Default tab titles.</p> </li> <li> <code>markdown_config</code>           \u2013            <p>This object can be used to save the configuration of your Markdown extensions.</p> </li> </ul>"},{"location":"reference/api/#markdown_exec.MARKDOWN_EXEC_AUTO","title":"MARKDOWN_EXEC_AUTO  <code>module-attribute</code>","text":"<pre><code>MARKDOWN_EXEC_AUTO = [strip() for lang in split(',')]\n</code></pre> <p>Languages to automatically execute.</p>"},{"location":"reference/api/#markdown_exec.default_tabs","title":"default_tabs  <code>module-attribute</code>","text":"<pre><code>default_tabs = ('Source', 'Result')\n</code></pre> <p>Default tab titles.</p> Used by: <ul> <li> <code></code>\u00a0markdown_exec <code></code>\u00a0base_format </li> </ul>"},{"location":"reference/api/#markdown_exec.markdown_config","title":"markdown_config  <code>module-attribute</code>","text":"<pre><code>markdown_config = MarkdownConfig()\n</code></pre> <p>This object can be used to save the configuration of your Markdown extensions.</p> <p>For example, since we provide a MkDocs plugin, we use it to store the configuration that was read from <code>mkdocs.yml</code>:</p> <pre><code>from markdown_exec.rendering import markdown_config\n\n# ...in relevant events/hooks, access and modify extensions and their configs, then:\nmarkdown_config.save(extensions, extensions_config)\n</code></pre> <p>See the actual event hook: <code>on_config</code>. See the <code>save</code> and <code>reset</code> methods.</p> <p>Without it, Markdown Exec will rely on the <code>registeredExtensions</code> attribute of the original Markdown instance, which does not forward everything that was configured, notably extensions like <code>tables</code>. Other extensions such as <code>attr_list</code> are visible, but fail to register properly when reusing their instances. It means that the rendered HTML might differ from what you expect (tables not rendered, attribute lists not injected, emojis not working, etc.).</p> Referenced by: <ul> <li> <code></code>\u00a0markdown_exec <ul> <li> <code></code>\u00a0MarkdownConfig </li> <li> <code></code>\u00a0MarkdownExecPlugin <code></code>\u00a0on_config </li> </ul> </li> </ul>"},{"location":"reference/api/#markdown_exec.ExecutionError","title":"ExecutionError","text":"<pre><code>ExecutionError(message: str, returncode: int | None = None)\n</code></pre> <p>               Bases: <code>Exception</code></p> <p>Exception raised for errors during execution of a code block.</p> <p>Attributes:</p> <ul> <li> <code>message</code>           \u2013            <p>The exception message.</p> </li> <li> <code>returncode</code>           \u2013            <p>The code returned by the execution of the code block.</p> </li> </ul>"},{"location":"reference/api/#markdown_exec.ExecutionError.returncode","title":"returncode  <code>instance-attribute</code>","text":"<pre><code>returncode = returncode\n</code></pre> <p>The code returned by the execution of the code block.</p>"},{"location":"reference/api/#markdown_exec.HeadingReportingTreeprocessor","title":"HeadingReportingTreeprocessor","text":"<pre><code>HeadingReportingTreeprocessor(\n    md: Markdown, headings: list[Element]\n)\n</code></pre> <p>               Bases: <code>Treeprocessor</code></p> <p>Records the heading elements encountered in the document.</p> <p>Methods:</p> <ul> <li> <code>run</code>             \u2013              <p>Run the treeprocessor.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>headings</code>           \u2013            <p>The list of heading elements.</p> </li> <li> <code>name</code>           \u2013            <p>The name of the treeprocessor.</p> </li> <li> <code>regex</code>           \u2013            <p>The regex to match heading tags.</p> </li> </ul>"},{"location":"reference/api/#markdown_exec.HeadingReportingTreeprocessor.headings","title":"headings  <code>instance-attribute</code>","text":"<pre><code>headings = headings\n</code></pre> <p>The list of heading elements.</p>"},{"location":"reference/api/#markdown_exec.HeadingReportingTreeprocessor.name","title":"name  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>name = 'markdown_exec_record_headings'\n</code></pre> <p>The name of the treeprocessor.</p>"},{"location":"reference/api/#markdown_exec.HeadingReportingTreeprocessor.regex","title":"regex  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>regex = compile('[Hh][1-6]')\n</code></pre> <p>The regex to match heading tags.</p>"},{"location":"reference/api/#markdown_exec.HeadingReportingTreeprocessor.run","title":"run","text":"<pre><code>run(root: Element) -&gt; None\n</code></pre> <p>Run the treeprocessor.</p>"},{"location":"reference/api/#markdown_exec.IdPrependingTreeprocessor","title":"IdPrependingTreeprocessor","text":"<pre><code>IdPrependingTreeprocessor(md: Markdown, id_prefix: str)\n</code></pre> <p>               Bases: <code>Treeprocessor</code></p> <p>Prepend the configured prefix to IDs of all HTML elements.</p> <p>Methods:</p> <ul> <li> <code>run</code>             \u2013              <p>Run the treeprocessor.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>id_prefix</code>           \u2013            <p>The prefix to prepend to IDs.</p> </li> <li> <code>name</code>           \u2013            <p>The name of the treeprocessor.</p> </li> </ul>"},{"location":"reference/api/#markdown_exec.IdPrependingTreeprocessor.id_prefix","title":"id_prefix  <code>instance-attribute</code>","text":"<pre><code>id_prefix = id_prefix\n</code></pre> <p>The prefix to prepend to IDs.</p>"},{"location":"reference/api/#markdown_exec.IdPrependingTreeprocessor.name","title":"name  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>name = 'markdown_exec_ids'\n</code></pre> <p>The name of the treeprocessor.</p>"},{"location":"reference/api/#markdown_exec.IdPrependingTreeprocessor.run","title":"run","text":"<pre><code>run(root: Element) -&gt; None\n</code></pre> <p>Run the treeprocessor.</p>"},{"location":"reference/api/#markdown_exec.InsertHeadings","title":"InsertHeadings","text":"<pre><code>InsertHeadings(md: Markdown)\n</code></pre> <p>               Bases: <code>Treeprocessor</code></p> <p>Our headings insertor.</p> <p>Parameters:</p> <ul> <li> <code>md</code>               (<code>Markdown</code>)           \u2013            <p>A <code>markdown.Markdown</code> instance.</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>run</code>             \u2013              <p>Run the treeprocessor.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>headings</code>               (<code>dict[Markup, list[Element]]</code>)           \u2013            <p>The dictionary of headings.</p> </li> <li> <code>name</code>           \u2013            <p>The name of the treeprocessor.</p> </li> </ul>"},{"location":"reference/api/#markdown_exec.InsertHeadings.headings","title":"headings  <code>instance-attribute</code>","text":"<pre><code>headings: dict[Markup, list[Element]] = {}\n</code></pre> <p>The dictionary of headings.</p>"},{"location":"reference/api/#markdown_exec.InsertHeadings.name","title":"name  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>name = 'markdown_exec_insert_headings'\n</code></pre> <p>The name of the treeprocessor.</p>"},{"location":"reference/api/#markdown_exec.InsertHeadings.run","title":"run","text":"<pre><code>run(root: Element) -&gt; None\n</code></pre> <p>Run the treeprocessor.</p>"},{"location":"reference/api/#markdown_exec.MarkdownConfig","title":"MarkdownConfig","text":"<pre><code>MarkdownConfig()\n</code></pre> <p>This class returns a singleton used to store Markdown extensions configuration.</p> <p>You don't have to instantiate the singleton yourself: we provide it as <code>markdown_config</code>.</p> Returned by: <ul> <li> <code></code>\u00a0markdown_exec <code></code>\u00a0MarkdownConfig <code></code>\u00a0__new__ </li> </ul> <p>Methods:</p> <ul> <li> <code>__new__</code>             \u2013              <p>Return the singleton instance.</p> </li> <li> <code>reset</code>             \u2013              <p>Reset Markdown extensions and their configuration.</p> </li> <li> <code>save</code>             \u2013              <p>Save Markdown extensions and their configuration.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>exts</code>               (<code>list[str] | None</code>)           \u2013            <p>The Markdown extensions.</p> </li> <li> <code>exts_config</code>               (<code>dict[str, dict[str, Any]] | None</code>)           \u2013            <p>The extensions configuration.</p> </li> </ul>"},{"location":"reference/api/#markdown_exec.MarkdownConfig.exts","title":"exts  <code>instance-attribute</code>","text":"<pre><code>exts: list[str] | None = None\n</code></pre> <p>The Markdown extensions.</p>"},{"location":"reference/api/#markdown_exec.MarkdownConfig.exts_config","title":"exts_config  <code>instance-attribute</code>","text":"<pre><code>exts_config: dict[str, dict[str, Any]] | None = None\n</code></pre> <p>The extensions configuration.</p>"},{"location":"reference/api/#markdown_exec.MarkdownConfig.__new__","title":"__new__","text":"<pre><code>__new__() -&gt; MarkdownConfig\n</code></pre> <p>Return the singleton instance.</p>"},{"location":"reference/api/#markdown_exec.MarkdownConfig.reset","title":"reset","text":"<pre><code>reset() -&gt; None\n</code></pre> <p>Reset Markdown extensions and their configuration.</p> Referenced by: <ul> <li> <code></code>\u00a0markdown_exec <code></code>\u00a0markdown_config </li> </ul>"},{"location":"reference/api/#markdown_exec.MarkdownConfig.save","title":"save","text":"<pre><code>save(\n    exts: list[str], exts_config: dict[str, dict[str, Any]]\n) -&gt; None\n</code></pre> <p>Save Markdown extensions and their configuration.</p> <p>Parameters:</p> <ul> <li> <code>exts</code>               (<code>list[str]</code>)           \u2013            <p>The Markdown extensions.</p> </li> <li> <code>exts_config</code>               (<code>dict[str, dict[str, Any]]</code>)           \u2013            <p>The extensions configuration.</p> </li> </ul> Referenced by: <ul> <li> <code></code>\u00a0markdown_exec <code></code>\u00a0markdown_config </li> </ul>"},{"location":"reference/api/#markdown_exec.MarkdownConverter","title":"MarkdownConverter","text":"<pre><code>MarkdownConverter(md: Markdown, *, update_toc: bool = True)\n</code></pre> <p>Helper class to avoid breaking the original Markdown instance state.</p> <p>Methods:</p> <ul> <li> <code>convert</code>             \u2013              <p>Convert Markdown text to safe HTML.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>counter</code>               (<code>int</code>)           \u2013            <p>A counter to generate unique IDs for code blocks.</p> </li> </ul>"},{"location":"reference/api/#markdown_exec.MarkdownConverter.counter","title":"counter  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>counter: int = 0\n</code></pre> <p>A counter to generate unique IDs for code blocks.</p>"},{"location":"reference/api/#markdown_exec.MarkdownConverter.convert","title":"convert","text":"<pre><code>convert(\n    text: str,\n    stash: dict[str, str] | None = None,\n    id_prefix: str | None = None,\n) -&gt; Markup\n</code></pre> <p>Convert Markdown text to safe HTML.</p> <p>Parameters:</p> <ul> <li> <code>text</code>               (<code>str</code>)           \u2013            <p>Markdown text.</p> </li> <li> <code>stash</code>               (<code>dict[str, str] | None</code>, default:                   <code>None</code> )           \u2013            <p>An HTML stash.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Markup</code>           \u2013            <p>Safe HTML.</p> </li> </ul>"},{"location":"reference/api/#markdown_exec.MarkdownExecPlugin","title":"MarkdownExecPlugin","text":"<p>               Bases: <code>BasePlugin[MarkdownExecPluginConfig]</code></p> <p>MkDocs plugin to easily enable custom fences for code blocks execution.</p> <p>Methods:</p> <ul> <li> <code>on_config</code>             \u2013              <p>Configure the plugin.</p> </li> <li> <code>on_env</code>             \u2013              <p>Add assets to the environment.</p> </li> <li> <code>on_post_build</code>             \u2013              <p>Reset the plugin state.</p> </li> </ul>"},{"location":"reference/api/#markdown_exec.MarkdownExecPlugin.on_config","title":"on_config","text":"<pre><code>on_config(config: MkDocsConfig) -&gt; MkDocsConfig | None\n</code></pre> <p>Configure the plugin.</p> <p>Hook for the <code>on_config</code> event. In this hook, we add custom fences for all the supported languages.</p> <p>We also save the Markdown extensions configuration into <code>markdown_config</code>.</p> <p>Parameters:</p> <ul> <li> <code>config</code>               (<code>MkDocsConfig</code>)           \u2013            <p>The MkDocs config object.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>MkDocsConfig | None</code>           \u2013            <p>The modified config.</p> </li> </ul> Referenced by: <ul> <li> <code></code>\u00a0markdown_exec <code></code>\u00a0markdown_config </li> </ul>"},{"location":"reference/api/#markdown_exec.MarkdownExecPlugin.on_env","title":"on_env","text":"<pre><code>on_env(\n    env: Environment, *, config: MkDocsConfig, files: Files\n) -&gt; Environment | None\n</code></pre> <p>Add assets to the environment.</p>"},{"location":"reference/api/#markdown_exec.MarkdownExecPlugin.on_post_build","title":"on_post_build","text":"<pre><code>on_post_build(*, config: MkDocsConfig) -&gt; None\n</code></pre> <p>Reset the plugin state.</p>"},{"location":"reference/api/#markdown_exec.MarkdownExecPluginConfig","title":"MarkdownExecPluginConfig","text":"<p>               Bases: <code>Config</code></p> <p>Configuration of the plugin (for <code>mkdocs.yml</code>).</p> <p>Attributes:</p> <ul> <li> <code>ansi</code>           \u2013            <p>Whether the <code>ansi</code> extra is required when installing the package.</p> </li> <li> <code>languages</code>           \u2013            <p>Which languages to enabled the extension for.</p> </li> </ul>"},{"location":"reference/api/#markdown_exec.MarkdownExecPluginConfig.ansi","title":"ansi  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ansi = Choice(\n    (\"auto\", \"off\", \"required\", True, False), default=\"auto\"\n)\n</code></pre> <p>Whether the <code>ansi</code> extra is required when installing the package.</p>"},{"location":"reference/api/#markdown_exec.MarkdownExecPluginConfig.languages","title":"languages  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>languages = ListOfItems(\n    Choice(keys()), default=list(keys())\n)\n</code></pre> <p>Which languages to enabled the extension for.</p>"},{"location":"reference/api/#markdown_exec.RemoveHeadings","title":"RemoveHeadings","text":"<p>               Bases: <code>Treeprocessor</code></p> <p>Our headings remover.</p> <p>Methods:</p> <ul> <li> <code>run</code>             \u2013              <p>Run the treeprocessor.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>name</code>           \u2013            <p>The name of the treeprocessor.</p> </li> </ul>"},{"location":"reference/api/#markdown_exec.RemoveHeadings.name","title":"name  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>name = 'markdown_exec_remove_headings'\n</code></pre> <p>The name of the treeprocessor.</p>"},{"location":"reference/api/#markdown_exec.RemoveHeadings.run","title":"run","text":"<pre><code>run(root: Element) -&gt; None\n</code></pre> <p>Run the treeprocessor.</p>"},{"location":"reference/api/#markdown_exec.add_source","title":"add_source","text":"<pre><code>add_source(\n    *,\n    source: str,\n    location: str,\n    output: str,\n    language: str,\n    tabs: tuple[str, str],\n    result: str = \"\",\n    **extra: str,\n) -&gt; str\n</code></pre> <p>Add source code block to the output.</p> <p>Parameters:</p> <ul> <li> <code>source</code>               (<code>str</code>)           \u2013            <p>The source code block.</p> </li> <li> <code>location</code>               (<code>str</code>)           \u2013            <p>Where to add the source (above, below, tabbed-left, tabbed-right, console).</p> </li> <li> <code>output</code>               (<code>str</code>)           \u2013            <p>The current output.</p> </li> <li> <code>language</code>               (<code>str</code>)           \u2013            <p>The code language.</p> </li> <li> <code>tabs</code>               (<code>tuple[str, str]</code>)           \u2013            <p>Tabs titles (if used).</p> </li> <li> <code>result</code>               (<code>str</code>, default:                   <code>''</code> )           \u2013            <p>Syntax to use when concatenating source and result with \"console\" location.</p> </li> <li> <code>**extra</code>               (<code>str</code>, default:                   <code>{}</code> )           \u2013            <p>Extra options added back to source code block.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ValueError</code>             \u2013            <p>When the given location is not supported.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The updated output.</p> </li> </ul>"},{"location":"reference/api/#markdown_exec.base_format","title":"base_format","text":"<pre><code>base_format(\n    *,\n    language: str,\n    run: Callable,\n    code: str,\n    md: Markdown,\n    html: bool = False,\n    source: str = \"\",\n    result: str = \"\",\n    tabs: tuple[str, str] = default_tabs,\n    id: str = \"\",\n    id_prefix: str | None = None,\n    returncode: int = 0,\n    transform_source: Callable[[str], tuple[str, str]]\n    | None = None,\n    session: str | None = None,\n    update_toc: bool = True,\n    workdir: str | None = None,\n    width: int | None = None,\n    **options: Any,\n) -&gt; Markup\n</code></pre> <p>Execute code and return HTML.</p> <p>Parameters:</p> <ul> <li> <code>language</code>               (<code>str</code>)           \u2013            <p>The code language.</p> </li> <li> <code>run</code>               (<code>Callable</code>)           \u2013            <p>Function that runs code and returns output.</p> </li> <li> <code>code</code>               (<code>str</code>)           \u2013            <p>The code to execute.</p> </li> <li> <code>md</code>               (<code>Markdown</code>)           \u2013            <p>The Markdown instance.</p> </li> <li> <code>html</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Whether to inject output as HTML directly, without rendering.</p> </li> <li> <code>source</code>               (<code>str</code>, default:                   <code>''</code> )           \u2013            <p>Whether to show source as well, and where.</p> </li> <li> <code>result</code>               (<code>str</code>, default:                   <code>''</code> )           \u2013            <p>If provided, use as language to format result in a code block.</p> </li> <li> <code>tabs</code>               (<code>tuple[str, str]</code>, default:                   <code>default_tabs</code> )           \u2013            <p>Titles of tabs (if used).</p> </li> <li> <code>id</code>               (<code>str</code>, default:                   <code>''</code> )           \u2013            <p>An optional ID for the code block (useful when warning about errors).</p> </li> <li> <code>id_prefix</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>A string used to prefix HTML ids in the generated HTML.</p> </li> <li> <code>returncode</code>               (<code>int</code>, default:                   <code>0</code> )           \u2013            <p>The expected exit code.</p> </li> <li> <code>transform_source</code>               (<code>Callable[[str], tuple[str, str]] | None</code>, default:                   <code>None</code> )           \u2013            <p>An optional callable that returns transformed versions of the source. The input source is the one that is ran, the output source is the one that is rendered (when the source option is enabled).</p> </li> <li> <code>session</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>A session name, to persist state between executed code blocks.</p> </li> <li> <code>update_toc</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Whether to include generated headings into the Markdown table of contents (toc extension).</p> </li> <li> <code>workdir</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>The working directory to use for the execution.</p> </li> <li> <code>**options</code>               (<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Additional options passed from the formatter.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Markup</code>           \u2013            <p>HTML contents.</p> </li> </ul>"},{"location":"reference/api/#markdown_exec.code_block","title":"code_block","text":"<pre><code>code_block(language: str, code: str, **options: str) -&gt; str\n</code></pre> <p>Format code as a code block.</p> <p>Parameters:</p> <ul> <li> <code>language</code>               (<code>str</code>)           \u2013            <p>The code block language.</p> </li> <li> <code>code</code>               (<code>str</code>)           \u2013            <p>The source code to format.</p> </li> <li> <code>**options</code>               (<code>str</code>, default:                   <code>{}</code> )           \u2013            <p>Additional options passed from the source, to add back to the generated code block.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The formatted code block.</p> </li> </ul>"},{"location":"reference/api/#markdown_exec.console_width","title":"console_width","text":"<pre><code>console_width(width: int | None = None) -&gt; Iterator[None]\n</code></pre> <p>Set the console width for the duration of the context.</p> <p>The console width is set using the <code>COLUMNS</code> environment variable.</p> <p>Parameters:</p> <ul> <li> <code>width</code>               (<code>int | None</code>, default:                   <code>None</code> )           \u2013            <p>The width to set the console to.</p> </li> </ul>"},{"location":"reference/api/#markdown_exec.formatter","title":"formatter","text":"<pre><code>formatter(\n    source: str,\n    language: str,\n    css_class: str,\n    options: dict[str, Any],\n    md: Markdown,\n    classes: list[str] | None = None,\n    id_value: str = \"\",\n    attrs: dict[str, Any] | None = None,\n    **kwargs: Any,\n) -&gt; str\n</code></pre> <p>Execute code and return HTML.</p> <p>Parameters:</p> <ul> <li> <code>source</code>               (<code>str</code>)           \u2013            <p>The code to execute.</p> </li> <li> <code>language</code>               (<code>str</code>)           \u2013            <p>The code language, like python or bash.</p> </li> <li> <code>css_class</code>               (<code>str</code>)           \u2013            <p>The CSS class to add to the HTML element.</p> </li> <li> <code>options</code>               (<code>dict[str, Any]</code>)           \u2013            <p>The container for options.</p> </li> <li> <code>attrs</code>               (<code>dict[str, Any] | None</code>, default:                   <code>None</code> )           \u2013            <p>The container for attrs:</p> </li> <li> <code>md</code>               (<code>Markdown</code>)           \u2013            <p>The Markdown instance.</p> </li> <li> <code>classes</code>               (<code>list[str] | None</code>, default:                   <code>None</code> )           \u2013            <p>Additional CSS classes.</p> </li> <li> <code>id_value</code>               (<code>str</code>, default:                   <code>''</code> )           \u2013            <p>An optional HTML id.</p> </li> <li> <code>attrs</code>               (<code>dict[str, Any] | None</code>, default:                   <code>None</code> )           \u2013            <p>Additional attributes</p> </li> <li> <code>**kwargs</code>               (<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Additional arguments passed to SuperFences default formatters.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>HTML contents.</p> </li> </ul>"},{"location":"reference/api/#markdown_exec.get_logger","title":"get_logger","text":"<pre><code>get_logger(name: str) -&gt; _Logger\n</code></pre> <p>Create and return a new logger instance.</p> <p>Parameters:</p> <ul> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>The logger name.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>_Logger</code>           \u2013            <p>The logger.</p> </li> </ul>"},{"location":"reference/api/#markdown_exec.patch_loggers","title":"patch_loggers","text":"<pre><code>patch_loggers(\n    get_logger_func: Callable[[str], Any],\n) -&gt; None\n</code></pre> <p>Patch loggers.</p> <p>We provide the <code>patch_loggers</code>function so dependant libraries can patch loggers as they see fit.</p> <p>For example, to fit in the MkDocs logging configuration and prefix each log message with the module name:</p> <pre><code>import logging\nfrom markdown_exec.logger import patch_loggers\n\n\nclass LoggerAdapter(logging.LoggerAdapter):\n    def __init__(self, prefix, logger):\n        super().__init__(logger, {})\n        self.prefix = prefix\n\n    def process(self, msg, kwargs):\n        return f\"{self.prefix}: {msg}\", kwargs\n\n\ndef get_logger(name):\n    logger = logging.getLogger(f\"mkdocs.plugins.{name}\")\n    return LoggerAdapter(name.split(\".\", 1)[0], logger)\n\n\npatch_loggers(get_logger)\n</code></pre> <p>Parameters:</p> <ul> <li> <code>get_logger_func</code>               (<code>Callable[[str], Any]</code>)           \u2013            <p>A function accepting a name as parameter and returning a logger.</p> </li> </ul>"},{"location":"reference/api/#markdown_exec.tabbed","title":"tabbed","text":"<pre><code>tabbed(*tabs: tuple[str, str]) -&gt; str\n</code></pre> <p>Format tabs using <code>pymdownx.tabbed</code> extension.</p> <p>Parameters:</p> <ul> <li> <code>*tabs</code>               (<code>tuple[str, str]</code>, default:                   <code>()</code> )           \u2013            <p>Tuples of strings: title and text.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The formatted tabs.</p> </li> </ul>"},{"location":"reference/api/#markdown_exec.validator","title":"validator","text":"<pre><code>validator(\n    language: str,\n    inputs: dict[str, str],\n    options: dict[str, Any],\n    attrs: dict[str, Any],\n    md: Markdown,\n) -&gt; bool\n</code></pre> <p>Validate code blocks inputs.</p> <p>Parameters:</p> <ul> <li> <code>language</code>               (<code>str</code>)           \u2013            <p>The code language, like python or bash.</p> </li> <li> <code>inputs</code>               (<code>dict[str, str]</code>)           \u2013            <p>The code block inputs, to be sorted into options and attrs.</p> </li> <li> <code>options</code>               (<code>dict[str, Any]</code>)           \u2013            <p>The container for options.</p> </li> <li> <code>attrs</code>               (<code>dict[str, Any]</code>)           \u2013            <p>The container for attrs:</p> </li> <li> <code>md</code>               (<code>Markdown</code>)           \u2013            <p>The Markdown instance.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>Success or not.</p> </li> </ul>"},{"location":"reference/api/#markdown_exec.working_directory","title":"working_directory","text":"<pre><code>working_directory(\n    path: str | None = None,\n) -&gt; Iterator[None]\n</code></pre> <p>Change the working directory for the duration of the context.</p> <p>Parameters:</p> <ul> <li> <code>path</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>The path to change the working directory to.</p> </li> </ul>"},{"location":"reference/api/#markdown_exec.formatters","title":"formatters","text":"<p>Deprecated. Import from <code>markdown_exec</code> directly.</p> <p>Modules:</p> <ul> <li> <code>base</code>           \u2013            <p>Deprecated. Import from <code>markdown_exec</code> directly.</p> </li> <li> <code>bash</code>           \u2013            <p>Deprecated. Import from <code>markdown_exec</code> directly.</p> </li> <li> <code>console</code>           \u2013            <p>Deprecated. Import from <code>markdown_exec</code> directly.</p> </li> <li> <code>markdown</code>           \u2013            <p>Deprecated. Import from <code>markdown_exec</code> directly.</p> </li> <li> <code>pycon</code>           \u2013            <p>Deprecated. Import from <code>markdown_exec</code> directly.</p> </li> <li> <code>pyodide</code>           \u2013            <p>Deprecated. Import from <code>markdown_exec</code> directly.</p> </li> <li> <code>python</code>           \u2013            <p>Deprecated. Import from <code>markdown_exec</code> directly.</p> </li> <li> <code>sh</code>           \u2013            <p>Deprecated. Import from <code>markdown_exec</code> directly.</p> </li> <li> <code>tree</code>           \u2013            <p>Deprecated. Import from <code>markdown_exec</code> directly.</p> </li> </ul>"},{"location":"reference/api/#markdown_exec.formatters.base","title":"base","text":"<p>Deprecated. Import from <code>markdown_exec</code> directly.</p>"},{"location":"reference/api/#markdown_exec.formatters.bash","title":"bash","text":"<p>Deprecated. Import from <code>markdown_exec</code> directly.</p>"},{"location":"reference/api/#markdown_exec.formatters.console","title":"console","text":"<p>Deprecated. Import from <code>markdown_exec</code> directly.</p>"},{"location":"reference/api/#markdown_exec.formatters.markdown","title":"markdown","text":"<p>Deprecated. Import from <code>markdown_exec</code> directly.</p>"},{"location":"reference/api/#markdown_exec.formatters.pycon","title":"pycon","text":"<p>Deprecated. Import from <code>markdown_exec</code> directly.</p>"},{"location":"reference/api/#markdown_exec.formatters.pyodide","title":"pyodide","text":"<p>Deprecated. Import from <code>markdown_exec</code> directly.</p>"},{"location":"reference/api/#markdown_exec.formatters.python","title":"python","text":"<p>Deprecated. Import from <code>markdown_exec</code> directly.</p>"},{"location":"reference/api/#markdown_exec.formatters.sh","title":"sh","text":"<p>Deprecated. Import from <code>markdown_exec</code> directly.</p>"},{"location":"reference/api/#markdown_exec.formatters.tree","title":"tree","text":"<p>Deprecated. Import from <code>markdown_exec</code> directly.</p>"},{"location":"reference/api/#markdown_exec.logger","title":"logger","text":"<p>Deprecated. Import from <code>markdown_exec</code> directly.</p>"},{"location":"reference/api/#markdown_exec.mkdocs_plugin","title":"mkdocs_plugin","text":"<p>Deprecated. Import from <code>markdown_exec</code> directly.</p>"},{"location":"reference/api/#markdown_exec.processors","title":"processors","text":"<p>Deprecated. Import from <code>markdown_exec</code> directly.</p>"},{"location":"reference/api/#markdown_exec.rendering","title":"rendering","text":"<p>Deprecated. Import from <code>markdown_exec</code> directly.</p>"},{"location":"usage/","title":"Usage","text":"<p>Once the extension is configured (see README/Overview), you can execute code blocks by enabling the <code>exec</code> option:</p> <pre><code>```python exec=\"on\"\nprint(\"Hello Markdown!\")\n```\n</code></pre> <p>The <code>exec</code> option will be true for every possible value except <code>0</code>, <code>no</code>, <code>off</code> and <code>false</code> (case insensitive).</p> <p>To enable automatic execution of code blocks for specific languages (without having to add the <code>exec=\"on\"</code> option to your code blocks), set the <code>MARKDOWN_EXEC_AUTO</code> environment variable:</p> <pre><code>MARKDOWN_EXEC_AUTO=python,bash\n</code></pre>"},{"location":"usage/#options-summary","title":"Options summary","text":"<p>As the number of options grew over time, we now provide this summary listing every option, linking to their related documentation:</p> <ul> <li><code>exec</code>: The mother of all other options, enabling code execution.</li> <li><code>html</code>: Whether the output is alredady HTML, or needs to be converted from Markdown to HTML.</li> <li><code>id</code>: Give an identifier to your code blocks to help     debugging errors, or to prefix HTML ids.</li> <li><code>idprefix</code>: Change or remove the prefix in front of HTML ids/hrefs.</li> <li><code>result</code>: Choose the syntax highlight of your code block output.</li> <li><code>returncode</code>: Tell what return code is expected (shell code).</li> <li><code>session</code>: Execute code blocks within a named session, reusing previously defined variables, etc..</li> <li><code>source</code>: Render the source as well as the output.</li> <li><code>tabs</code>: When rendering the source using tabs, choose the tabs titles.</li> <li><code>width</code>: Change the console width through the <code>COLUMNS</code> environment variable.</li> <li><code>workdir</code>: Change the working directory.</li> <li><code>title</code>: Title is a Material for MkDocs option.</li> <li><code>updatetoc</code>: Whether to update the Table of Contents with generated headings.</li> </ul>"},{"location":"usage/#html-vs-markdown","title":"HTML vs. Markdown","text":"<p>By default, Markdown Exec will render what you print as Markdown. If you want to skip rendering, to inject HTML directly, you can set the <code>html</code> option to true.</p> <p>HTML Example:</p> MarkdownRendered <pre><code>System information:\n\n```python exec=\"true\" html=\"true\"\nimport platform\n\nprint(\n    f\"\"\"\n    &lt;ul&gt;\n    &lt;li&gt;machine: &lt;code&gt;{platform.machine()}&lt;/code&gt;&lt;/li&gt;\n    &lt;li&gt;version: &lt;code&gt;{platform.version()}&lt;/code&gt;&lt;/li&gt;\n    &lt;li&gt;platform: &lt;code&gt;{platform.platform()}&lt;/code&gt;&lt;/li&gt;\n    &lt;li&gt;system: &lt;code&gt;{platform.system()}&lt;/code&gt;&lt;/li&gt;\n    &lt;/ul&gt;\n    \"\"\"\n)\n\n```\n</code></pre> <p>System information:</p> <p> <ul> <li>machine: <code>x86_64</code></li> <li>version: <code>#1 SMP PREEMPT_DYNAMIC Thu, 19 Jun 2025 14:41:19 +0000</code></li> <li>platform: <code>Linux-6.15.3-arch1-1-x86_64-with-glibc2.41</code></li> <li>system: <code>Linux</code></li> </ul> </p> <p>Markdown Example:</p> MarkdownRendered <pre><code>System information:\n\n```python exec=\"true\"\nimport platform\nfrom textwrap import dedent\n\nprint(\n    # we must dedent, otherwise Markdown\n    # will render it as a code block!\n    dedent(\n        f\"\"\"\n        - machine: `{platform.machine()}`\n        - version: `{platform.version()}`\n        - platform: `{platform.platform()}`\n        - system: `{platform.system()}`\n        \"\"\"\n    )\n)\n\n```\n</code></pre> <p>System information:</p> <ul> <li>machine: <code>x86_64</code></li> <li>version: <code>#1 SMP PREEMPT_DYNAMIC Thu, 19 Jun 2025 14:41:19 +0000</code></li> <li>platform: <code>Linux-6.15.3-arch1-1-x86_64-with-glibc2.41</code></li> <li>system: <code>Linux</code></li> </ul>"},{"location":"usage/#generated-headings-in-table-of-contents","title":"Generated headings in Table of Contents","text":"<p>If you are using Python Markdown's <code>toc</code> extension, or writing docs with MkDocs, you will notice that the headings you generated by executing a code block appear in the table of contents. If you don't want those headings to appear in the ToC, you can use the <code>updatetoc=\"no\"</code> boolean option:</p> <pre><code>```python exec=\"1\" updatetoc=\"no\"\nprint(\"# XL heading\\n\")\nprint(\"## L heading\\n\")\nprint(\"### M heading\\n\")\nprint(\"#### S heading\\n\")\n```\n</code></pre>"},{"location":"usage/#html-ids","title":"HTML ids","text":"<p>When your executed code blocks output Markdown, this Markdown is rendered to HTML, and every HTML id is automatically prefixed with <code>exec-N--</code>, where N is an integer incremented with each code block. To avoid breaking links, every <code>href</code> attribute is also updated when relevant.</p> <p>You can change this prefix, or completely remove it with the <code>idprefix</code> option.</p> <p>The following ids are not prefixed:</p> <pre><code>```python exec=\"1\" idprefix=\"\" updatetoc=\"no\"\nprint(\"#### Commands\")\nprint(\"\\n[link to commands](#commands)\")\n```\n</code></pre> <p>The following ids are prefixed with <code>cli-</code>:</p> <pre><code>```python exec=\"1\" idprefix=\"cli-\" updatetoc=\"no\"\nprint(\"#### Commands\")\nprint(\"\\n[link to commands](#commands)\")\n```\n</code></pre> <p>If <code>idprefix</code> is not specified, and <code>id</code> is specified, then the id is used as prefix:</p> <p>The following ids are prefixed with <code>super-cli-</code>:</p> <pre><code>```python exec=\"1\" id=\"super-cli\" updatetoc=\"no\"\nprint(\"#### Commands\")\nprint(\"\\n[link to commands](#commands)\")\n```\n</code></pre>"},{"location":"usage/#commands","title":"Commands","text":"<p>link to commands</p>"},{"location":"usage/#cli-commands","title":"Commands","text":"<p>link to commands</p>"},{"location":"usage/#super-cli-commands","title":"Commands","text":"<p>link to commands</p>"},{"location":"usage/#render-the-source-code-as-well","title":"Render the source code as well","text":"<p>It's possible to render both the result of the executed code block and the code block itself. For this, use the <code>source</code> option with one of the following values:</p> <ul> <li><code>above</code>: The source code will be rendered above the result.</li> <li><code>below</code>: The source code will be rendered below the result.</li> <li><code>material-block</code>: The source code and result will be wrapped in a nice-looking block     (only works with Material for MkDocs,     and requires the <code>md_in_html</code> extension)</li> <li><code>tabbed-left</code>: The source code and result will be rendered in tabs, in that order     (requires the <code>pymdownx.tabbed</code> extension).</li> <li><code>tabbed-right</code>: The result and source code will be rendered in tabs, in that order     (requires the <code>pymdownx.tabbed</code> extension).</li> <li><code>console</code>: The source and result are concatenated in a single code block, like an interactive console session.</li> </ul> <p>Source above:</p> MarkdownRendered <pre><code>```python exec=\"true\" source=\"above\"\nprint(\"I'm the result!\")\n\n```\n</code></pre> <pre><code>print(\"I'm the result!\")\n</code></pre> <p>I'm the result!</p> <p>Source below:</p> MarkdownRendered <pre><code>```python exec=\"true\" source=\"below\"\nprint(\"I'm the result!\")\n\n```\n</code></pre> <p>I'm the result!</p> <pre><code>print(\"I'm the result!\")\n</code></pre> <p>Material block:</p> MarkdownRendered <pre><code>```python exec=\"true\" source=\"material-block\"\nprint(\"I'm the result!\")\n\n```\n</code></pre> <pre><code>print(\"I'm the result!\")\n</code></pre> <p>I'm the result!</p> <p>Important:</p> <p> The <code>material-block</code> source option requires that you enable the <code>md_in_html</code> Markdown extension.</p> <p>Tabbed on the left:</p> MarkdownRendered <pre><code>```python exec=\"true\" source=\"tabbed-left\"\nprint(\"I'm the result!\")\n\n```\n</code></pre> SourceResult <pre><code>print(\"I'm the result!\")\n</code></pre> <p>I'm the result!</p> <p>Important:</p> <p> The <code>tabbed-left</code> source option requires that you enable the <code>pymdownx.tabbed</code> Markdown extension.</p> <p>Tabbed on the right:</p> MarkdownRendered <pre><code>```python exec=\"true\" source=\"tabbed-right\"\nprint(\"I'm the result!\")\n\n```\n</code></pre> ResultSource <p>I'm the result!</p> <pre><code>print(\"I'm the result!\")\n</code></pre> <p>Important:</p> <p> The <code>tabbed-left</code> source option requires that you enable the <code>pymdownx.tabbed</code> Markdown extension.</p> <p>Console (best used with actual session syntax like <code>pycon</code> or <code>console</code>):</p> MarkdownRendered <pre><code>```pycon exec=\"true\" source=\"console\"\n&gt;&gt;&gt; print(\"I'm the result!\")\nI'm not the result...\n\n```\n</code></pre> <pre><code>&gt;&gt;&gt; print(\"I'm the result!\")\nI'm the result!\n</code></pre>"},{"location":"usage/#hiding-lines-from-the-source","title":"Hiding lines from the source","text":"<p>Every line that contains the string <code>markdown-exec: hide</code> will be hidden from the displayed source.</p> MarkdownRendered <pre><code>```python exec=\"true\" source=\"above\"\nprint(\"Hello World!\")\nprint(\"&lt;hr&gt;\")  # markdown-exec: hide\n\n```\n</code></pre> <pre><code>print(\"Hello World!\")\n</code></pre> <p>Hello World!</p>"},{"location":"usage/#change-the-titles-of-tabs","title":"Change the titles of tabs","text":"<p>In the previous example, we didn't specify any title for tabs, so Markdown Exec used \"Source\" and \"Result\" by default. You can customize the titles with the <code>tabs</code> option:</p> MarkdownRendered <pre><code>```python exec=\"1\" source=\"tabbed-left\" tabs=\"Source code|Output\"\nprint(\"I'm the result!\")\n\n```\n</code></pre> Source codeOutput <pre><code>print(\"I'm the result!\")\n</code></pre> <p>I'm the result!</p> <p>As you can see, titles are separated with a pipe <code>|</code>. Both titles are stripped so you can add space around the pipe. If you need to use that character in a title, simply escape it with <code>\\|</code>:</p> MarkdownRendered <pre><code>```python exec=\"1\" source=\"tabbed-left\" tabs=\"OR operator: a \\|\\| b | Boolean matrix\"\nprint()\nprint(\"a   | b   | a \\\\|\\\\| b\")\nprint(\"--- | --- | ---\")\nfor a in (True, False):\n    for b in (True, False):\n        print(f\"{a} | {b} | {a or b}\")\nprint()\n\n```\n</code></pre> OR operator: a || bBoolean matrix <pre><code>print()\nprint(\"a   | b   | a \\\\|\\\\| b\")\nprint(\"--- | --- | ---\")\nfor a in (True, False):\n    for b in (True, False):\n        print(f\"{a} | {b} | {a or b}\")\nprint()\n</code></pre> a b a || b True True True True False True False True True False False False <p>Important</p> <p>The <code>tabs</code> option always expects the \"Source\" tab title first, and the \"Result\" tab title second. It allows to switch from tabbed-left to tabbed-right and inversely without having to switch the titles as well.</p> <p>Limitation:</p> <p> Changing the title for only one tab is not supported.</p>"},{"location":"usage/#wrap-result-in-a-code-block","title":"Wrap result in a code block","text":"<p>You can wrap the result in a code block by specifying a code block language:</p> MarkdownRendered <pre><code>```console exec=\"1\" result=\"ini\"\n$ cat .git/config\n```\n</code></pre> <pre><code>[core]\n    repositoryformatversion = 0\n    filemode = true\n    bare = false\n    logallrefupdates = true\n[remote \"origin\"]\n    url = git@github.com:pawamoy-insiders/markdown-exec\n    fetch = +refs/heads/*:refs/remotes/origin/*\n[remote \"upstream\"]\n    url = git@github.com:pawamoy/markdown-exec\n    fetch = +refs/heads/*:refs/remotes/upstream/*\n[branch \"main\"]\n    remote = origin\n    merge = refs/heads/main\n    vscode-merge-base = origin/main\n</code></pre> <p>Limitation:</p> <p> Wrapping the result is not possible when HTML output is enabled.</p>"},{"location":"usage/#change-the-console-width","title":"Change the console width","text":"<p>To change the console width for the execution of a code block, use the <code>width</code> option. Internally, Markdown Exec will set the <code>COLUMNS</code> environment variable accordingly, and restore its previous value after execution.</p> <p>If the executed code doesn't support this environment variable, the default console width will be used (it could be the current width or some arbitrary value).</p> SourceResult <pre><code>```bash exec=\"1\" width=\"10\"\necho $COLUMNS\n```\n\n```bash exec=\"1\" width=\"1000\"\necho $COLUMNS\n```\n</code></pre> <p>10</p> <p>1000</p>"},{"location":"usage/#change-the-working-directory","title":"Change the working directory","text":"<p>To change the working directory for the execution of a code block, use the <code>workdir</code> option.</p> SourceResult <pre><code>```bash exec=\"1\"\npwd\n```\n\n```bash exec=\"1\" workdir=\"..\"\npwd\n```\n</code></pre> <p>/home/pawamoy/data/dev/insiders/markdown-exec</p> <p>/run/media/pawamoy/Data/dev/insiders</p>"},{"location":"usage/#additional-options","title":"Additional options","text":"<p>If you are using Material for MkDocs, you are probably familiar with the <code>title</code> option on code blocks:</p> <pre><code>```python title=\"setup.py\"\nfrom setuptools import setup\nsetup(...)\n```\n</code></pre> <p>Markdown Exec will add back these unrecognized options when rendering the source, so you can keep using them normally.</p> <p>Example:</p> MarkdownRendered <pre><code>```python exec=\"1\" source=\"above\" title=\"source.py\"\nprint(\"I'm the result!\")\n\n```\n</code></pre> source.py<pre><code>print(\"I'm the result!\")\n</code></pre> <p>I'm the result!</p>"},{"location":"usage/#handling-errors","title":"Handling errors","text":"<p>Code blocks execution can fail. For example, your Python code may raise exceptions, or your shell code may return a non-zero exit code (for shell commands that are expected to return non-zero, see Expecting a non-zero exit code).</p> <p>In these cases, the exception and traceback (Python), or the current output (shell) will be rendered instead of the result, and a warning will be logged.</p> <p>Example of failing code:</p> <pre><code>```python exec=\"true\"\nprint(\"hello\")\nassert 1 + 1 == 11\n```\n</code></pre> MkDocs output<pre><code>WARNING  -  markdown_exec: Execution of python code block exited with errors\n</code></pre> Rendered traceback<pre><code>Traceback (most recent call last):\n  File \"/path/to/markdown_exec/formatters/python.py\", line 23, in _run_python\n    exec(code, exec_globals)  # noqa: S102\n  File \"&lt;executed code block&gt;\", line 2, in &lt;module&gt;\n    assert 1 + 1 == 11\nAssertionError\n</code></pre> <p>With many executed code blocks in your docs, it will be hard to know which code block failed exactly. To make it easier, you can set an ID on each code block with the <code>id</code> option, and this ID will be shown in the logs:</p> <pre><code>```python exec=\"true\" id=\"print hello\"\nprint(\"hello\")\nassert 1 + 1 == 11\n```\n</code></pre> MkDocs output<pre><code>WARNING  -  markdown_exec: Execution of python code block 'print hello' exited with errors\n</code></pre> <p>Titles act as IDs as well!</p> <p> You don't need to provide an ID if you already set a (Material for MkDocs) title:</p> <pre><code>```python exec=\"true\" title=\"print world\"\nprint(\"world\")\nassert 1 + 1 == 11\n```\n</code></pre> MkDocs output<pre><code>WARNING  -  markdown_exec: Execution of python code block 'print world' exited with errors\n</code></pre>"},{"location":"usage/#sessions","title":"Sessions","text":"<p>Markdown Exec makes it possible to persist state between executed code blocks. To persist state and reuse it in other code blocks, give a session name to your blocks:</p> Sessions<pre><code>```python exec=\"1\" session=\"greet\"\ndef greet(name):\n    print(f\"Hello {name}!\")\n```\n\nHello Mushu!\n\n```python exec=\"1\" session=\"greet\"\ngreet(\"Ping\")\n```\n</code></pre> <p></p> <p>Hello Mushu!</p> <p>Hello Ping!</p> <p>Limitation:</p> <p> Sessions only work with Python and Pycon syntax for now.</p>"},{"location":"usage/#literate-markdown","title":"Literate Markdown","text":"<p>With this extension, it is also possible to write \"literate programming\" Markdown.</p> <p>From Wikipedia:</p> <p>Literate programming (LP) tools are used to obtain two representations from a source file:   one understandable by a compiler or interpreter, the \"tangled\" code,   and another for viewing as formatted documentation, which is said to be \"woven\" from the literate source.</p> <p>We effectively support executing multiple nested code blocks to generate complex output. That makes for a very meta-markdown markup:</p> SourceResult <pre><code>```md exec=\"1\" source=\"material-block\" title=\"Markdown link\"\n[Link to example.com](https://example.com)\n```\n</code></pre> Markdown link<pre><code>[Link to example.com](https://example.com)\n</code></pre> <p>Link to example.com</p> <p>So power, such meta.</p> <p> The above example (both tabs) was entirely generated using a literate code block in a literate code block \ud83e\udd2f:</p> <pre><code>````md exec=\"1\" source=\"tabbed-left\"\n```md exec=\"1\" source=\"material-block\" title=\"Markdown link\"\n[Link to example.com](https://example.com)\n```\n````\n</code></pre> <p>In fact, all the examples on this page were generated using this method! Check out the source here: https://github.com/pawamoy/markdown-exec/blob/master/docs/usage/index.md (click on \"Raw\" to see the code blocks execution options).</p> <p>Of course \"executing\" Markdown (or rather, making it \"literate\") only makes sense when the source is shown as well.</p>"},{"location":"usage/#mkdocs-integration","title":"MkDocs integration","text":"<p>As seen in the Configuration section, Markdown Exec can be configured directly as a MkDocs plugin:</p> <pre><code># mkdocs.yml\nplugins:\n- search\n- markdown-exec\n</code></pre> <p>When configured this way, it will set a <code>MKDOCS_CONFIG_DIR</code> environment variable that you can use in your code snippets to compute file paths as relative to the MkDocs configuration file directory, instead of relative to the current working directory. This will make it possible to use the <code>-f</code> option of MkDocs, to build the documentation from a different directory than the repository root.</p> <p>Example:</p> <pre><code>import os\n\nconfig_dir = os.environ['MKDOCS_CONFIG_DIR']\n\n# This will show my local path since I deploy docs from my machine:\nprint(f\"Configuration file directory: `{config_dir}`\")\n</code></pre> <p>Configuration file directory: <code>/run/media/pawamoy/Data/dev/insiders/markdown-exec</code></p> <p>The environment variable will be restored to its previous value, if any, at the end of the build.</p>"},{"location":"usage/pyodide/","title":"Pyodide","text":"<p> Insiders 1.0.0</p> <p>This special <code>pyodide</code> fence uses Pyodide, Ace and Highlight.js to render an interactive Python editor. Everything runs on the client side. The first time Pyodide is loaded by the browser can be a bit long, but then it will be cached and the next time you load the page it will be much faster.</p> <p>Click the  Run button in the top-right corner, or hit Ctrl+Enter to run the code. You can install packages with Micropip:</p> RenderedMarkdown <p> Editor (session: default) Run <pre>import micropip\n\nprint(\"Installing cowsay...\")\nawait micropip.install(\"cowsay\")\nprint(\"done!\")</pre> Output Clear <pre><code></code></pre> </p> <pre><code>```pyodide\nimport micropip\n\nprint(\"Installing cowsay...\")\nawait micropip.install(\"cowsay\")\nprint(\"done!\")\n```\n</code></pre> <p>Then you can import and use the packages you installed:</p> RenderedMarkdown <p> Editor (session: default) Run <pre>import cowsay\ncowsay.cow(\"Hello World\")</pre> Output Clear <pre><code></code></pre> </p> <pre><code>```pyodide\nimport cowsay\ncowsay.cow(\"Hello World\")\n```\n</code></pre> <p>Packages installed with Micropip are cached by the browser as well, making future installations much faster.</p>"},{"location":"usage/pyodide/#pyodide-version","title":"Pyodide version","text":"<p>You can select a specific Pyodide version with the <code>version</code> option:</p> <pre><code>```pyodide version=\"0.26.4\"\nprint(\"Hello.\")\n```\n</code></pre> <p>All Pyodide blocks on the same page should use the same version!</p>"},{"location":"usage/pyodide/#editor-height","title":"Editor height","text":"<p>The height of the editor can be configured with the <code>height</code> option. It accepts the following values:</p> <ul> <li><code>0</code> or <code>auto</code>: A fixed number of lines, based on initial code.</li> <li>a positive number, like <code>10</code>: A fixed number of lines.</li> <li>a positive range, like <code>5-30</code>: The minimum and maximum number of lines. The editor will shring/grow as you type.</li> </ul> <p>The default is <code>auto</code>.</p> <p>A few examples:</p> MarkdownRendered Fixed height (10 lines)<pre><code>```pyodide height=\"10\"\nfrom typing import Iterator\n\n# This is an example\nclass Math:\n    @staticmethod\n    def fib(n: int) -&gt; Iterator[int]:\n        \"\"\"Fibonacci series up to n.\"\"\"\n        a, b = 0, 1\n        while a &lt; n:\n            yield a\n            a, b = b, a + b\n\nresult = sum(Math.fib(42))\nprint(f\"The answer is {result}\")\n```\n</code></pre> <p> Editor (session: default) Run <pre>from typing import Iterator\n\n# This is an example\nclass Math:\n    @staticmethod\n    def fib(n: int) -&gt; Iterator[int]:\n        \"\"\"Fibonacci series up to n.\"\"\"\n        a, b = 0, 1\n        while a &lt; n:\n            yield a\n            a, b = b, a + b\n\nresult = sum(Math.fib(42))\nprint(f\"The answer is {result}\")</pre> Output Clear <pre><code></code></pre> </p> MarkdownRendered Between 1 and 40 lines<pre><code>```pyodide height=\"1-40\"\nfrom typing import Iterator\n\n# This is an example\nclass Math:\n    @staticmethod\n    def fib(n: int) -&gt; Iterator[int]:\n        \"\"\"Fibonacci series up to n.\"\"\"\n        a, b = 0, 1\n        while a &lt; n:\n            yield a\n            a, b = b, a + b\n\nresult = sum(Math.fib(42))\nprint(f\"The answer is {result}\")\n```\n</code></pre> <p> Editor (session: default) Run <pre>from typing import Iterator\n\n# This is an example\nclass Math:\n    @staticmethod\n    def fib(n: int) -&gt; Iterator[int]:\n        \"\"\"Fibonacci series up to n.\"\"\"\n        a, b = 0, 1\n        while a &lt; n:\n            yield a\n            a, b = b, a + b\n\nresult = sum(Math.fib(42))\nprint(f\"The answer is {result}\")</pre> Output Clear <pre><code></code></pre> </p>"},{"location":"usage/pyodide/#sessions","title":"Sessions","text":"<p>Editors with the same session share the same <code>globals()</code> dictionary, so you can reuse variables, classes, imports, etc., from another editor within the same session. This is why you can import <code>cowsay</code> in this editor, given you actually installed it in the first. Sessions are ephemeral: everything is reset when reloading the page. This means you cannot persist sessions across multiple pages. Try refreshing your page and running the code of the second editor: you should get a ModuleNotFoundError.</p> <p>To use other sessions, simply pass the <code>session=\"name\"</code> option to the code block:</p> RenderedMarkdown <p> Editor (session: something) Run <pre>something = \"hello\"</pre> Output Clear <pre><code></code></pre> </p> <pre><code>```pyodide session=\"something\"\nsomething = \"hello\"\n```\n</code></pre> <p>Now lets print it in another editor with the same session:</p> RenderedMarkdown <p> Editor (session: something) Run <pre>print(something)</pre> Output Clear <pre><code></code></pre> </p> <pre><code>```pyodide session=\"something\"\nprint(something)\n```\n</code></pre> <p>And in another editor with the default session:</p> RenderedMarkdown <p> Editor (session: default) Run <pre>print(something)</pre> Output Clear <pre><code></code></pre> </p> <pre><code>```pyodide\nprint(something)\n```\n</code></pre>"},{"location":"usage/pyodide/#pre-installing-packages","title":"Pre-installing packages","text":"<p>In your own documentation pages, you might not want to add <code>import micropip; await micropip.install(\"your-package\")</code> to every editor to show how to use your package. In this case, you can use the <code>install</code> option to pre-install packages. The option takes a list of comma-separated package distribution names:</p> RenderedMarkdown <p> Editor (session: default) Run <pre>import griffe\nimport dependenpy\nprint(\"OK!\")</pre> Output Clear <pre><code></code></pre> </p> <pre><code>```pyodide install=\"griffe,dependenpy\"\nimport griffe\nimport dependenpy\nprint(\"OK!\")\n```\n</code></pre>"},{"location":"usage/pyodide/#excluding-assets","title":"Excluding assets","text":"<p>When you add a Pyodide fence to a page, Markdown Exec will inject <code>&lt;script&gt;</code> and <code>&lt;link&gt;</code> tags to load Javascript and CSS assets. If you add multiple Pyodide fences to the same page, the same assets will be included many times. The browser is clever enough not to re-download them everytime (they are cached), but we can still avoid re-injecting assets to make the HTML page smaller and faster.</p> <pre><code>```pyodide assets=\"no\"\nprint(\"hello\")\n```\n</code></pre> <p>Make sure that at least one Pyodide fence per page injects the assets.</p>"},{"location":"usage/pyodide/#editor-themes","title":"Editor themes","text":"<p>The editor provided by Ace supports different color themes. The complete list can be found here: https://github.com/ajaxorg/ace/tree/master/src/theme.</p> <p>To use a specific theme for both light and dark schemes, use the <code>theme</code> option on the Pyodide code block:</p> <pre><code>```pyodide theme=\"ambiance\"\nprint(\"hello\")\n```\n</code></pre> <p>To specify different themes for the light and dark schemes, separate them with a comma:</p> <pre><code>```pyodide theme=\"ambiance,chaos\"\nprint(\"hello\")\n```\n</code></pre> <p>See all previews below.</p> <p></p>"},{"location":"usage/pyodide/#exec-133--ambiance","title":"<code>ambiance</code>","text":"<p> Editor (session: default) Run <pre>from typing import Iterator\n\n# This is an example\nclass Math:\n    @staticmethod\n    def fib(n: int) -&gt; Iterator[int]:\n        \"\"\"Fibonacci series up to n.\"\"\"\n        a, b = 0, 1\n        while a &lt; n:\n            yield a\n            a, b = b, a + b\n\nresult = sum(Math.fib(42))\nprint(f\"The answer is {result}\")</pre> Output Clear <pre></pre> </p>"},{"location":"usage/pyodide/#exec-133--chaos","title":"<code>chaos</code>","text":"<p> Editor (session: default) Run <pre>from typing import Iterator\n\n# This is an example\nclass Math:\n    @staticmethod\n    def fib(n: int) -&gt; Iterator[int]:\n        \"\"\"Fibonacci series up to n.\"\"\"\n        a, b = 0, 1\n        while a &lt; n:\n            yield a\n            a, b = b, a + b\n\nresult = sum(Math.fib(42))\nprint(f\"The answer is {result}\")</pre> Output Clear <pre></pre> </p>"},{"location":"usage/pyodide/#exec-133--chrome","title":"<code>chrome</code>","text":"<p> Editor (session: default) Run <pre>from typing import Iterator\n\n# This is an example\nclass Math:\n    @staticmethod\n    def fib(n: int) -&gt; Iterator[int]:\n        \"\"\"Fibonacci series up to n.\"\"\"\n        a, b = 0, 1\n        while a &lt; n:\n            yield a\n            a, b = b, a + b\n\nresult = sum(Math.fib(42))\nprint(f\"The answer is {result}\")</pre> Output Clear <pre></pre> </p>"},{"location":"usage/pyodide/#exec-133--cloud9_day","title":"<code>cloud9_day</code>","text":"<p> Editor (session: default) Run <pre>from typing import Iterator\n\n# This is an example\nclass Math:\n    @staticmethod\n    def fib(n: int) -&gt; Iterator[int]:\n        \"\"\"Fibonacci series up to n.\"\"\"\n        a, b = 0, 1\n        while a &lt; n:\n            yield a\n            a, b = b, a + b\n\nresult = sum(Math.fib(42))\nprint(f\"The answer is {result}\")</pre> Output Clear <pre></pre> </p>"},{"location":"usage/pyodide/#exec-133--cloud9_night","title":"<code>cloud9_night</code>","text":"<p> Editor (session: default) Run <pre>from typing import Iterator\n\n# This is an example\nclass Math:\n    @staticmethod\n    def fib(n: int) -&gt; Iterator[int]:\n        \"\"\"Fibonacci series up to n.\"\"\"\n        a, b = 0, 1\n        while a &lt; n:\n            yield a\n            a, b = b, a + b\n\nresult = sum(Math.fib(42))\nprint(f\"The answer is {result}\")</pre> Output Clear <pre></pre> </p>"},{"location":"usage/pyodide/#exec-133--cloud9_night_low_color","title":"<code>cloud9_night_low_color</code>","text":"<p> Editor (session: default) Run <pre>from typing import Iterator\n\n# This is an example\nclass Math:\n    @staticmethod\n    def fib(n: int) -&gt; Iterator[int]:\n        \"\"\"Fibonacci series up to n.\"\"\"\n        a, b = 0, 1\n        while a &lt; n:\n            yield a\n            a, b = b, a + b\n\nresult = sum(Math.fib(42))\nprint(f\"The answer is {result}\")</pre> Output Clear <pre></pre> </p>"},{"location":"usage/pyodide/#exec-133--cloud_editor","title":"<code>cloud_editor</code>","text":"<p> Editor (session: default) Run <pre>from typing import Iterator\n\n# This is an example\nclass Math:\n    @staticmethod\n    def fib(n: int) -&gt; Iterator[int]:\n        \"\"\"Fibonacci series up to n.\"\"\"\n        a, b = 0, 1\n        while a &lt; n:\n            yield a\n            a, b = b, a + b\n\nresult = sum(Math.fib(42))\nprint(f\"The answer is {result}\")</pre> Output Clear <pre></pre> </p>"},{"location":"usage/pyodide/#exec-133--cloud_editor_dark","title":"<code>cloud_editor_dark</code>","text":"<p> Editor (session: default) Run <pre>from typing import Iterator\n\n# This is an example\nclass Math:\n    @staticmethod\n    def fib(n: int) -&gt; Iterator[int]:\n        \"\"\"Fibonacci series up to n.\"\"\"\n        a, b = 0, 1\n        while a &lt; n:\n            yield a\n            a, b = b, a + b\n\nresult = sum(Math.fib(42))\nprint(f\"The answer is {result}\")</pre> Output Clear <pre></pre> </p>"},{"location":"usage/pyodide/#exec-133--clouds","title":"<code>clouds</code>","text":"<p> Editor (session: default) Run <pre>from typing import Iterator\n\n# This is an example\nclass Math:\n    @staticmethod\n    def fib(n: int) -&gt; Iterator[int]:\n        \"\"\"Fibonacci series up to n.\"\"\"\n        a, b = 0, 1\n        while a &lt; n:\n            yield a\n            a, b = b, a + b\n\nresult = sum(Math.fib(42))\nprint(f\"The answer is {result}\")</pre> Output Clear <pre></pre> </p>"},{"location":"usage/pyodide/#exec-133--clouds_midnight","title":"<code>clouds_midnight</code>","text":"<p> Editor (session: default) Run <pre>from typing import Iterator\n\n# This is an example\nclass Math:\n    @staticmethod\n    def fib(n: int) -&gt; Iterator[int]:\n        \"\"\"Fibonacci series up to n.\"\"\"\n        a, b = 0, 1\n        while a &lt; n:\n            yield a\n            a, b = b, a + b\n\nresult = sum(Math.fib(42))\nprint(f\"The answer is {result}\")</pre> Output Clear <pre></pre> </p>"},{"location":"usage/pyodide/#exec-133--cobalt","title":"<code>cobalt</code>","text":"<p> Editor (session: default) Run <pre>from typing import Iterator\n\n# This is an example\nclass Math:\n    @staticmethod\n    def fib(n: int) -&gt; Iterator[int]:\n        \"\"\"Fibonacci series up to n.\"\"\"\n        a, b = 0, 1\n        while a &lt; n:\n            yield a\n            a, b = b, a + b\n\nresult = sum(Math.fib(42))\nprint(f\"The answer is {result}\")</pre> Output Clear <pre></pre> </p>"},{"location":"usage/pyodide/#exec-133--crimson_editor","title":"<code>crimson_editor</code>","text":"<p> Editor (session: default) Run <pre>from typing import Iterator\n\n# This is an example\nclass Math:\n    @staticmethod\n    def fib(n: int) -&gt; Iterator[int]:\n        \"\"\"Fibonacci series up to n.\"\"\"\n        a, b = 0, 1\n        while a &lt; n:\n            yield a\n            a, b = b, a + b\n\nresult = sum(Math.fib(42))\nprint(f\"The answer is {result}\")</pre> Output Clear <pre></pre> </p>"},{"location":"usage/pyodide/#exec-133--dawn","title":"<code>dawn</code>","text":"<p> Editor (session: default) Run <pre>from typing import Iterator\n\n# This is an example\nclass Math:\n    @staticmethod\n    def fib(n: int) -&gt; Iterator[int]:\n        \"\"\"Fibonacci series up to n.\"\"\"\n        a, b = 0, 1\n        while a &lt; n:\n            yield a\n            a, b = b, a + b\n\nresult = sum(Math.fib(42))\nprint(f\"The answer is {result}\")</pre> Output Clear <pre></pre> </p>"},{"location":"usage/pyodide/#exec-133--dracula","title":"<code>dracula</code>","text":"<p> Editor (session: default) Run <pre>from typing import Iterator\n\n# This is an example\nclass Math:\n    @staticmethod\n    def fib(n: int) -&gt; Iterator[int]:\n        \"\"\"Fibonacci series up to n.\"\"\"\n        a, b = 0, 1\n        while a &lt; n:\n            yield a\n            a, b = b, a + b\n\nresult = sum(Math.fib(42))\nprint(f\"The answer is {result}\")</pre> Output Clear <pre></pre> </p>"},{"location":"usage/pyodide/#exec-133--dreamweaver","title":"<code>dreamweaver</code>","text":"<p> Editor (session: default) Run <pre>from typing import Iterator\n\n# This is an example\nclass Math:\n    @staticmethod\n    def fib(n: int) -&gt; Iterator[int]:\n        \"\"\"Fibonacci series up to n.\"\"\"\n        a, b = 0, 1\n        while a &lt; n:\n            yield a\n            a, b = b, a + b\n\nresult = sum(Math.fib(42))\nprint(f\"The answer is {result}\")</pre> Output Clear <pre></pre> </p>"},{"location":"usage/pyodide/#exec-133--eclipse","title":"<code>eclipse</code>","text":"<p> Editor (session: default) Run <pre>from typing import Iterator\n\n# This is an example\nclass Math:\n    @staticmethod\n    def fib(n: int) -&gt; Iterator[int]:\n        \"\"\"Fibonacci series up to n.\"\"\"\n        a, b = 0, 1\n        while a &lt; n:\n            yield a\n            a, b = b, a + b\n\nresult = sum(Math.fib(42))\nprint(f\"The answer is {result}\")</pre> Output Clear <pre></pre> </p>"},{"location":"usage/pyodide/#exec-133--github","title":"<code>github</code>","text":"<p> Editor (session: default) Run <pre>from typing import Iterator\n\n# This is an example\nclass Math:\n    @staticmethod\n    def fib(n: int) -&gt; Iterator[int]:\n        \"\"\"Fibonacci series up to n.\"\"\"\n        a, b = 0, 1\n        while a &lt; n:\n            yield a\n            a, b = b, a + b\n\nresult = sum(Math.fib(42))\nprint(f\"The answer is {result}\")</pre> Output Clear <pre></pre> </p>"},{"location":"usage/pyodide/#exec-133--github_dark","title":"<code>github_dark</code>","text":"<p> Editor (session: default) Run <pre>from typing import Iterator\n\n# This is an example\nclass Math:\n    @staticmethod\n    def fib(n: int) -&gt; Iterator[int]:\n        \"\"\"Fibonacci series up to n.\"\"\"\n        a, b = 0, 1\n        while a &lt; n:\n            yield a\n            a, b = b, a + b\n\nresult = sum(Math.fib(42))\nprint(f\"The answer is {result}\")</pre> Output Clear <pre></pre> </p>"},{"location":"usage/pyodide/#exec-133--github_light_default","title":"<code>github_light_default</code>","text":"<p> Editor (session: default) Run <pre>from typing import Iterator\n\n# This is an example\nclass Math:\n    @staticmethod\n    def fib(n: int) -&gt; Iterator[int]:\n        \"\"\"Fibonacci series up to n.\"\"\"\n        a, b = 0, 1\n        while a &lt; n:\n            yield a\n            a, b = b, a + b\n\nresult = sum(Math.fib(42))\nprint(f\"The answer is {result}\")</pre> Output Clear <pre></pre> </p>"},{"location":"usage/pyodide/#exec-133--gob","title":"<code>gob</code>","text":"<p> Editor (session: default) Run <pre>from typing import Iterator\n\n# This is an example\nclass Math:\n    @staticmethod\n    def fib(n: int) -&gt; Iterator[int]:\n        \"\"\"Fibonacci series up to n.\"\"\"\n        a, b = 0, 1\n        while a &lt; n:\n            yield a\n            a, b = b, a + b\n\nresult = sum(Math.fib(42))\nprint(f\"The answer is {result}\")</pre> Output Clear <pre></pre> </p>"},{"location":"usage/pyodide/#exec-133--gruvbox","title":"<code>gruvbox</code>","text":"<p> Editor (session: default) Run <pre>from typing import Iterator\n\n# This is an example\nclass Math:\n    @staticmethod\n    def fib(n: int) -&gt; Iterator[int]:\n        \"\"\"Fibonacci series up to n.\"\"\"\n        a, b = 0, 1\n        while a &lt; n:\n            yield a\n            a, b = b, a + b\n\nresult = sum(Math.fib(42))\nprint(f\"The answer is {result}\")</pre> Output Clear <pre></pre> </p>"},{"location":"usage/pyodide/#exec-133--gruvbox_dark_hard","title":"<code>gruvbox_dark_hard</code>","text":"<p> Editor (session: default) Run <pre>from typing import Iterator\n\n# This is an example\nclass Math:\n    @staticmethod\n    def fib(n: int) -&gt; Iterator[int]:\n        \"\"\"Fibonacci series up to n.\"\"\"\n        a, b = 0, 1\n        while a &lt; n:\n            yield a\n            a, b = b, a + b\n\nresult = sum(Math.fib(42))\nprint(f\"The answer is {result}\")</pre> Output Clear <pre></pre> </p>"},{"location":"usage/pyodide/#exec-133--gruvbox_light_hard","title":"<code>gruvbox_light_hard</code>","text":"<p> Editor (session: default) Run <pre>from typing import Iterator\n\n# This is an example\nclass Math:\n    @staticmethod\n    def fib(n: int) -&gt; Iterator[int]:\n        \"\"\"Fibonacci series up to n.\"\"\"\n        a, b = 0, 1\n        while a &lt; n:\n            yield a\n            a, b = b, a + b\n\nresult = sum(Math.fib(42))\nprint(f\"The answer is {result}\")</pre> Output Clear <pre></pre> </p>"},{"location":"usage/pyodide/#exec-133--idle_fingers","title":"<code>idle_fingers</code>","text":"<p> Editor (session: default) Run <pre>from typing import Iterator\n\n# This is an example\nclass Math:\n    @staticmethod\n    def fib(n: int) -&gt; Iterator[int]:\n        \"\"\"Fibonacci series up to n.\"\"\"\n        a, b = 0, 1\n        while a &lt; n:\n            yield a\n            a, b = b, a + b\n\nresult = sum(Math.fib(42))\nprint(f\"The answer is {result}\")</pre> Output Clear <pre></pre> </p>"},{"location":"usage/pyodide/#exec-133--iplastic","title":"<code>iplastic</code>","text":"<p> Editor (session: default) Run <pre>from typing import Iterator\n\n# This is an example\nclass Math:\n    @staticmethod\n    def fib(n: int) -&gt; Iterator[int]:\n        \"\"\"Fibonacci series up to n.\"\"\"\n        a, b = 0, 1\n        while a &lt; n:\n            yield a\n            a, b = b, a + b\n\nresult = sum(Math.fib(42))\nprint(f\"The answer is {result}\")</pre> Output Clear <pre></pre> </p>"},{"location":"usage/pyodide/#exec-133--katzenmilch","title":"<code>katzenmilch</code>","text":"<p> Editor (session: default) Run <pre>from typing import Iterator\n\n# This is an example\nclass Math:\n    @staticmethod\n    def fib(n: int) -&gt; Iterator[int]:\n        \"\"\"Fibonacci series up to n.\"\"\"\n        a, b = 0, 1\n        while a &lt; n:\n            yield a\n            a, b = b, a + b\n\nresult = sum(Math.fib(42))\nprint(f\"The answer is {result}\")</pre> Output Clear <pre></pre> </p>"},{"location":"usage/pyodide/#exec-133--kr_theme","title":"<code>kr_theme</code>","text":"<p> Editor (session: default) Run <pre>from typing import Iterator\n\n# This is an example\nclass Math:\n    @staticmethod\n    def fib(n: int) -&gt; Iterator[int]:\n        \"\"\"Fibonacci series up to n.\"\"\"\n        a, b = 0, 1\n        while a &lt; n:\n            yield a\n            a, b = b, a + b\n\nresult = sum(Math.fib(42))\nprint(f\"The answer is {result}\")</pre> Output Clear <pre></pre> </p>"},{"location":"usage/pyodide/#exec-133--kuroir","title":"<code>kuroir</code>","text":"<p> Editor (session: default) Run <pre>from typing import Iterator\n\n# This is an example\nclass Math:\n    @staticmethod\n    def fib(n: int) -&gt; Iterator[int]:\n        \"\"\"Fibonacci series up to n.\"\"\"\n        a, b = 0, 1\n        while a &lt; n:\n            yield a\n            a, b = b, a + b\n\nresult = sum(Math.fib(42))\nprint(f\"The answer is {result}\")</pre> Output Clear <pre></pre> </p>"},{"location":"usage/pyodide/#exec-133--merbivore","title":"<code>merbivore</code>","text":"<p> Editor (session: default) Run <pre>from typing import Iterator\n\n# This is an example\nclass Math:\n    @staticmethod\n    def fib(n: int) -&gt; Iterator[int]:\n        \"\"\"Fibonacci series up to n.\"\"\"\n        a, b = 0, 1\n        while a &lt; n:\n            yield a\n            a, b = b, a + b\n\nresult = sum(Math.fib(42))\nprint(f\"The answer is {result}\")</pre> Output Clear <pre></pre> </p>"},{"location":"usage/pyodide/#exec-133--merbivore_soft","title":"<code>merbivore_soft</code>","text":"<p> Editor (session: default) Run <pre>from typing import Iterator\n\n# This is an example\nclass Math:\n    @staticmethod\n    def fib(n: int) -&gt; Iterator[int]:\n        \"\"\"Fibonacci series up to n.\"\"\"\n        a, b = 0, 1\n        while a &lt; n:\n            yield a\n            a, b = b, a + b\n\nresult = sum(Math.fib(42))\nprint(f\"The answer is {result}\")</pre> Output Clear <pre></pre> </p>"},{"location":"usage/pyodide/#exec-133--mono_industrial","title":"<code>mono_industrial</code>","text":"<p> Editor (session: default) Run <pre>from typing import Iterator\n\n# This is an example\nclass Math:\n    @staticmethod\n    def fib(n: int) -&gt; Iterator[int]:\n        \"\"\"Fibonacci series up to n.\"\"\"\n        a, b = 0, 1\n        while a &lt; n:\n            yield a\n            a, b = b, a + b\n\nresult = sum(Math.fib(42))\nprint(f\"The answer is {result}\")</pre> Output Clear <pre></pre> </p>"},{"location":"usage/pyodide/#exec-133--monokai","title":"<code>monokai</code>","text":"<p> Editor (session: default) Run <pre>from typing import Iterator\n\n# This is an example\nclass Math:\n    @staticmethod\n    def fib(n: int) -&gt; Iterator[int]:\n        \"\"\"Fibonacci series up to n.\"\"\"\n        a, b = 0, 1\n        while a &lt; n:\n            yield a\n            a, b = b, a + b\n\nresult = sum(Math.fib(42))\nprint(f\"The answer is {result}\")</pre> Output Clear <pre></pre> </p>"},{"location":"usage/pyodide/#exec-133--nord_dark","title":"<code>nord_dark</code>","text":"<p> Editor (session: default) Run <pre>from typing import Iterator\n\n# This is an example\nclass Math:\n    @staticmethod\n    def fib(n: int) -&gt; Iterator[int]:\n        \"\"\"Fibonacci series up to n.\"\"\"\n        a, b = 0, 1\n        while a &lt; n:\n            yield a\n            a, b = b, a + b\n\nresult = sum(Math.fib(42))\nprint(f\"The answer is {result}\")</pre> Output Clear <pre></pre> </p>"},{"location":"usage/pyodide/#exec-133--one_dark","title":"<code>one_dark</code>","text":"<p> Editor (session: default) Run <pre>from typing import Iterator\n\n# This is an example\nclass Math:\n    @staticmethod\n    def fib(n: int) -&gt; Iterator[int]:\n        \"\"\"Fibonacci series up to n.\"\"\"\n        a, b = 0, 1\n        while a &lt; n:\n            yield a\n            a, b = b, a + b\n\nresult = sum(Math.fib(42))\nprint(f\"The answer is {result}\")</pre> Output Clear <pre></pre> </p>"},{"location":"usage/pyodide/#exec-133--pastel_on_dark","title":"<code>pastel_on_dark</code>","text":"<p> Editor (session: default) Run <pre>from typing import Iterator\n\n# This is an example\nclass Math:\n    @staticmethod\n    def fib(n: int) -&gt; Iterator[int]:\n        \"\"\"Fibonacci series up to n.\"\"\"\n        a, b = 0, 1\n        while a &lt; n:\n            yield a\n            a, b = b, a + b\n\nresult = sum(Math.fib(42))\nprint(f\"The answer is {result}\")</pre> Output Clear <pre></pre> </p>"},{"location":"usage/pyodide/#exec-133--solarized_dark","title":"<code>solarized_dark</code>","text":"<p> Editor (session: default) Run <pre>from typing import Iterator\n\n# This is an example\nclass Math:\n    @staticmethod\n    def fib(n: int) -&gt; Iterator[int]:\n        \"\"\"Fibonacci series up to n.\"\"\"\n        a, b = 0, 1\n        while a &lt; n:\n            yield a\n            a, b = b, a + b\n\nresult = sum(Math.fib(42))\nprint(f\"The answer is {result}\")</pre> Output Clear <pre></pre> </p>"},{"location":"usage/pyodide/#exec-133--solarized_light","title":"<code>solarized_light</code>","text":"<p> Editor (session: default) Run <pre>from typing import Iterator\n\n# This is an example\nclass Math:\n    @staticmethod\n    def fib(n: int) -&gt; Iterator[int]:\n        \"\"\"Fibonacci series up to n.\"\"\"\n        a, b = 0, 1\n        while a &lt; n:\n            yield a\n            a, b = b, a + b\n\nresult = sum(Math.fib(42))\nprint(f\"The answer is {result}\")</pre> Output Clear <pre></pre> </p>"},{"location":"usage/pyodide/#exec-133--sqlserver","title":"<code>sqlserver</code>","text":"<p> Editor (session: default) Run <pre>from typing import Iterator\n\n# This is an example\nclass Math:\n    @staticmethod\n    def fib(n: int) -&gt; Iterator[int]:\n        \"\"\"Fibonacci series up to n.\"\"\"\n        a, b = 0, 1\n        while a &lt; n:\n            yield a\n            a, b = b, a + b\n\nresult = sum(Math.fib(42))\nprint(f\"The answer is {result}\")</pre> Output Clear <pre></pre> </p>"},{"location":"usage/pyodide/#exec-133--terminal","title":"<code>terminal</code>","text":"<p> Editor (session: default) Run <pre>from typing import Iterator\n\n# This is an example\nclass Math:\n    @staticmethod\n    def fib(n: int) -&gt; Iterator[int]:\n        \"\"\"Fibonacci series up to n.\"\"\"\n        a, b = 0, 1\n        while a &lt; n:\n            yield a\n            a, b = b, a + b\n\nresult = sum(Math.fib(42))\nprint(f\"The answer is {result}\")</pre> Output Clear <pre></pre> </p>"},{"location":"usage/pyodide/#exec-133--textmate","title":"<code>textmate</code>","text":"<p> Editor (session: default) Run <pre>from typing import Iterator\n\n# This is an example\nclass Math:\n    @staticmethod\n    def fib(n: int) -&gt; Iterator[int]:\n        \"\"\"Fibonacci series up to n.\"\"\"\n        a, b = 0, 1\n        while a &lt; n:\n            yield a\n            a, b = b, a + b\n\nresult = sum(Math.fib(42))\nprint(f\"The answer is {result}\")</pre> Output Clear <pre></pre> </p>"},{"location":"usage/pyodide/#exec-133--tomorrow","title":"<code>tomorrow</code>","text":"<p> Editor (session: default) Run <pre>from typing import Iterator\n\n# This is an example\nclass Math:\n    @staticmethod\n    def fib(n: int) -&gt; Iterator[int]:\n        \"\"\"Fibonacci series up to n.\"\"\"\n        a, b = 0, 1\n        while a &lt; n:\n            yield a\n            a, b = b, a + b\n\nresult = sum(Math.fib(42))\nprint(f\"The answer is {result}\")</pre> Output Clear <pre></pre> </p>"},{"location":"usage/pyodide/#exec-133--tomorrow_night","title":"<code>tomorrow_night</code>","text":"<p> Editor (session: default) Run <pre>from typing import Iterator\n\n# This is an example\nclass Math:\n    @staticmethod\n    def fib(n: int) -&gt; Iterator[int]:\n        \"\"\"Fibonacci series up to n.\"\"\"\n        a, b = 0, 1\n        while a &lt; n:\n            yield a\n            a, b = b, a + b\n\nresult = sum(Math.fib(42))\nprint(f\"The answer is {result}\")</pre> Output Clear <pre></pre> </p>"},{"location":"usage/pyodide/#exec-133--tomorrow_night_blue","title":"<code>tomorrow_night_blue</code>","text":"<p> Editor (session: default) Run <pre>from typing import Iterator\n\n# This is an example\nclass Math:\n    @staticmethod\n    def fib(n: int) -&gt; Iterator[int]:\n        \"\"\"Fibonacci series up to n.\"\"\"\n        a, b = 0, 1\n        while a &lt; n:\n            yield a\n            a, b = b, a + b\n\nresult = sum(Math.fib(42))\nprint(f\"The answer is {result}\")</pre> Output Clear <pre></pre> </p>"},{"location":"usage/pyodide/#exec-133--tomorrow_night_bright","title":"<code>tomorrow_night_bright</code>","text":"<p> Editor (session: default) Run <pre>from typing import Iterator\n\n# This is an example\nclass Math:\n    @staticmethod\n    def fib(n: int) -&gt; Iterator[int]:\n        \"\"\"Fibonacci series up to n.\"\"\"\n        a, b = 0, 1\n        while a &lt; n:\n            yield a\n            a, b = b, a + b\n\nresult = sum(Math.fib(42))\nprint(f\"The answer is {result}\")</pre> Output Clear <pre></pre> </p>"},{"location":"usage/pyodide/#exec-133--tomorrow_night_eighties","title":"<code>tomorrow_night_eighties</code>","text":"<p> Editor (session: default) Run <pre>from typing import Iterator\n\n# This is an example\nclass Math:\n    @staticmethod\n    def fib(n: int) -&gt; Iterator[int]:\n        \"\"\"Fibonacci series up to n.\"\"\"\n        a, b = 0, 1\n        while a &lt; n:\n            yield a\n            a, b = b, a + b\n\nresult = sum(Math.fib(42))\nprint(f\"The answer is {result}\")</pre> Output Clear <pre></pre> </p>"},{"location":"usage/pyodide/#exec-133--twilight","title":"<code>twilight</code>","text":"<p> Editor (session: default) Run <pre>from typing import Iterator\n\n# This is an example\nclass Math:\n    @staticmethod\n    def fib(n: int) -&gt; Iterator[int]:\n        \"\"\"Fibonacci series up to n.\"\"\"\n        a, b = 0, 1\n        while a &lt; n:\n            yield a\n            a, b = b, a + b\n\nresult = sum(Math.fib(42))\nprint(f\"The answer is {result}\")</pre> Output Clear <pre></pre> </p>"},{"location":"usage/pyodide/#exec-133--vibrant_ink","title":"<code>vibrant_ink</code>","text":"<p> Editor (session: default) Run <pre>from typing import Iterator\n\n# This is an example\nclass Math:\n    @staticmethod\n    def fib(n: int) -&gt; Iterator[int]:\n        \"\"\"Fibonacci series up to n.\"\"\"\n        a, b = 0, 1\n        while a &lt; n:\n            yield a\n            a, b = b, a + b\n\nresult = sum(Math.fib(42))\nprint(f\"The answer is {result}\")</pre> Output Clear <pre></pre> </p>"},{"location":"usage/pyodide/#exec-133--xcode","title":"<code>xcode</code>","text":"<p> Editor (session: default) Run <pre>from typing import Iterator\n\n# This is an example\nclass Math:\n    @staticmethod\n    def fib(n: int) -&gt; Iterator[int]:\n        \"\"\"Fibonacci series up to n.\"\"\"\n        a, b = 0, 1\n        while a &lt; n:\n            yield a\n            a, b = b, a + b\n\nresult = sum(Math.fib(42))\nprint(f\"The answer is {result}\")</pre> Output Clear <pre></pre> </p>"},{"location":"usage/python/","title":"Python","text":""},{"location":"usage/python/#regular-python","title":"Regular Python","text":"<p>Python code is executed in the current process, with isolated global variables.</p> <p>To capture the output of your code, Markdown Exec patches the <code>print</code> function so that it writes to a buffer instead of standard output.</p> MarkdownRendered <pre><code>```python exec=\"1\"\nprint(\"**Hello world!**\")\n```\n</code></pre> <p>Hello world!</p> <p>See the Gallery for more complex examples.</p>"},{"location":"usage/python/#python-console-code","title":"Python console code","text":"<p>Code blocks syntax-highlighted with the <code>pycon</code> identifier are also supported. These code blocks will be pre-processed to keep only the lines starting with <code>&gt;&gt;&gt;</code>, and the chevrons (prompt) will be removed from these lines, so we can execute them.</p> MarkdownRendered <pre><code>```pycon exec=\"1\" source=\"console\"\n&gt;&gt;&gt; print(\"I'm the result!\")\nI'm not the result...\n\n```\n</code></pre> <pre><code>&gt;&gt;&gt; print(\"I'm the result!\")\nI'm the result!\n</code></pre> <p>It also means that multiple blocks of instructions will be concatenated, as well as their output:</p> MarkdownRendered <pre><code>```pycon exec=\"1\" source=\"console\"\n&gt;&gt;&gt; name = \"Baron\"\n&gt;&gt;&gt; print(name)\nBaron\n&gt;&gt;&gt; age = \"???\"\n&gt;&gt;&gt; print(age)\n???\n\n```\n</code></pre> <pre><code>&gt;&gt;&gt; name = \"Baron\"\n&gt;&gt;&gt; print(name)\n&gt;&gt;&gt; age = \"???\"\n&gt;&gt;&gt; print(age)\nBaron\n???\n</code></pre>"},{"location":"usage/shell/","title":"Shell","text":"<p>Shell code blocks are executed using the same interpreter specified as language of the code block, in sub-processes. The output is captured and rendered as Markdown or HTML (see Usage).</p>"},{"location":"usage/shell/#bash","title":"Bash","text":"MarkdownRendered <pre><code>```bash exec=\"1\" source=\"material-block\"\necho $BASH_VERSION\n```\n</code></pre> <pre><code>echo $BASH_VERSION\n</code></pre> <p>5.2.37(1)-release</p>"},{"location":"usage/shell/#console","title":"Console","text":"MarkdownRendered <pre><code>```console exec=\"1\" source=\"console\"\n$ mkdocs --help\n```\n</code></pre> <pre><code>$ mkdocs --help\nUsage: mkdocs [OPTIONS] COMMAND [ARGS]...\n\n  MkDocs - Project documentation with Markdown.\n\nOptions:\n  -V, --version         Show the version and exit.\n  -q, --quiet           Silence warnings\n  -v, --verbose         Enable verbose output\n  --color / --no-color  Force enable or disable color and wrapping for the\n                        output. Default is auto-detect.\n  -h, --help            Show this message and exit.\n\nCommands:\n  build      Build the MkDocs documentation.\n  get-deps   Show required PyPI packages inferred from plugins in...\n  gh-deploy  Deploy your documentation to GitHub Pages.\n  new        Create a new MkDocs project.\n  serve      Run the builtin development server.\n</code></pre>"},{"location":"usage/shell/#sh","title":"sh","text":"MarkdownRendered <pre><code>```sh exec=\"1\" source=\"material-block\"\necho Markdown is **cool**\n```\n</code></pre> <pre><code>echo Markdown is **cool**\n</code></pre> <p>Markdown is cool</p>"},{"location":"usage/shell/#expecting-a-non-zero-exit-code","title":"Expecting a non-zero exit code","text":"<p>You will sometimes want to run a command that returns a non-zero exit code, for example to show how errors look to your users.</p> <p>You can tell Markdown Exec to expect a particular exit code with the <code>returncode</code> option:</p> <pre><code>```bash exec=\"true\" returncode=\"1\"\necho Not in the mood today\nexit 1\n```\n</code></pre> <p>In that case, the executed code won't be considered to have failed, its output will be rendered normally, and no warning will be logged in the MkDocs output, allowing your strict builds to pass.</p> <p>If the exit code is different than the one specified with <code>returncode</code>, it will be considered a failure, its output will be renderer anyway (stdout and stderr combined), and a warning will be logged in the MkDocs output.</p>"},{"location":"usage/shell/#support-for-ansi-colors","title":"Support for ANSI colors","text":"<p>If you installed Markdown Exec with the <code>ansi</code> extra (<code>pip install markdown-exec[ansi]</code>), the ANSI colors in the output of shell commands will be translated to HTML/CSS, allowing to render them naturally in your documentation pages.</p> <p>To enable ANSI colors in the output of a code block, use the <code>result=\"ansi\"</code> option.</p> SourceResult ANSI terminal output<pre><code>```bash exec=\"true\" result=\"ansi\"\n#!/bin/bash\n# credits to https://github.com/42picky/42picky.github.io\ntext=\"xYz\"  # Some test text\necho -e \"\\n                40m   41m   42m   43m   44m   45m   46m   47m\"\nfor FGs in '    m' '   1m' '  30m' '1;30m' '  31m' '1;31m' '  32m' \\\n           '1;32m' '  33m' '1;33m' '  34m' '1;34m' '  35m' '1;35m' \\\n           '  36m' '1;36m' '  37m' '1;37m'; do\n    FG=${FGs// /}\n    echo -en \" $FGs \\033[$FG  ${text}  \"\n    for BG in 40m 41m 42m 43m 44m 45m 46m 47m; do\n        echo -en \"$EINS \\033[$FG\\033[${BG} ${text} \\033[0m\"\n    done\n    echo\ndone\necho\n```\n</code></pre> <pre><code>                40m   41m   42m   43m   44m   45m   46m   47m\n     m   xYz    xYz   xYz   xYz   xYz   xYz   xYz   xYz   xYz \n    1m   xYz    xYz   xYz   xYz   xYz   xYz   xYz   xYz   xYz \n   30m   xYz    xYz   xYz   xYz   xYz   xYz   xYz   xYz   xYz \n 1;30m   xYz    xYz   xYz   xYz   xYz   xYz   xYz   xYz   xYz \n   31m   xYz    xYz   xYz   xYz   xYz   xYz   xYz   xYz   xYz \n 1;31m   xYz    xYz   xYz   xYz   xYz   xYz   xYz   xYz   xYz \n   32m   xYz    xYz   xYz   xYz   xYz   xYz   xYz   xYz   xYz \n 1;32m   xYz    xYz   xYz   xYz   xYz   xYz   xYz   xYz   xYz \n   33m   xYz    xYz   xYz   xYz   xYz   xYz   xYz   xYz   xYz \n 1;33m   xYz    xYz   xYz   xYz   xYz   xYz   xYz   xYz   xYz \n   34m   xYz    xYz   xYz   xYz   xYz   xYz   xYz   xYz   xYz \n 1;34m   xYz    xYz   xYz   xYz   xYz   xYz   xYz   xYz   xYz \n   35m   xYz    xYz   xYz   xYz   xYz   xYz   xYz   xYz   xYz \n 1;35m   xYz    xYz   xYz   xYz   xYz   xYz   xYz   xYz   xYz \n   36m   xYz    xYz   xYz   xYz   xYz   xYz   xYz   xYz   xYz \n 1;36m   xYz    xYz   xYz   xYz   xYz   xYz   xYz   xYz   xYz \n   37m   xYz    xYz   xYz   xYz   xYz   xYz   xYz   xYz   xYz \n 1;37m   xYz    xYz   xYz   xYz   xYz   xYz   xYz   xYz   xYz \n</code></pre> <p>Warning</p> <p>Unless you enable Markdown Exec through our MkDocs plugin, you will need to provide your own CSS rules. How to do that depends on the tool(s) you use to convert Markdown to HTML, so we cannot provide generic guidance here.</p> CSS rules used by our MkDocs plugin <pre><code>/*\n  Inspired by https://spec.draculatheme.com/ specification, they should work\n  decently with both dark and light themes.\n  */\n:root {\n    --ansi-red: #ff5555;\n    --ansi-green: #50fa7b;\n    --ansi-blue: #265285;\n    --ansi-yellow: #ffb86c;\n    --ansi-magenta: #bd93f9;\n    --ansi-cyan: #8be9fd;\n    --ansi-black: #282a36;\n    --ansi-white: #f8f8f2;\n}\n\n.-Color-Green,\n.-Color-Faint-Green,\n.-Color-Bold-Green {\n    color: var(--ansi-green);\n}\n\n.-Color-Red,\n.-Color-Faint-Red,\n.-Color-Bold-Red {\n    color: var(--ansi-red);\n}\n\n.-Color-Yellow,\n.-Color-Faint-Yellow,\n.-Color-Bold-Yellow {\n    color: var(--ansi-yellow);\n}\n\n.-Color-Blue,\n.-Color-Faint-Blue,\n.-Color-Bold-Blue {\n    color: var(--ansi-blue);\n}\n\n.-Color-Magenta,\n.-Color-Faint-Magenta,\n.-Color-Bold-Magenta {\n    color: var(--ansi-magenta);\n}\n\n.-Color-Cyan,\n.-Color-Faint-Cyan,\n.-Color-Bold-Cyan {\n    color: var(--ansi-cyan);\n}\n\n.-Color-White,\n.-Color-Faint-White,\n.-Color-Bold-White {\n    color: var(--ansi-white);\n}\n\n.-Color-Black,\n.-Color-Faint-Black,\n.-Color-Bold-Black {\n    color: var(--ansi-black);\n}\n\n.-Color-Faint {\n    opacity: 0.5;\n}\n\n.-Color-Bold {\n    font-weight: bold;\n}\n\n.-Color-BGBlack,\n.-Color-Black-BGBlack,\n.-Color-Blue-BGBlack,\n.-Color-Bold-BGBlack,\n.-Color-Bold-Black-BGBlack,\n.-Color-Bold-Green-BGBlack,\n.-Color-Bold-Cyan-BGBlack,\n.-Color-Bold-Blue-BGBlack,\n.-Color-Bold-Magenta-BGBlack,\n.-Color-Bold-Red-BGBlack,\n.-Color-Bold-White-BGBlack,\n.-Color-Bold-Yellow-BGBlack,\n.-Color-Cyan-BGBlack,\n.-Color-Green-BGBlack,\n.-Color-Magenta-BGBlack,\n.-Color-Red-BGBlack,\n.-Color-White-BGBlack,\n.-Color-Yellow-BGBlack {\n    background-color: var(--ansi-black);\n}\n\n.-Color-BGRed,\n.-Color-Black-BGRed,\n.-Color-Blue-BGRed,\n.-Color-Bold-BGRed,\n.-Color-Bold-Black-BGRed,\n.-Color-Bold-Green-BGRed,\n.-Color-Bold-Cyan-BGRed,\n.-Color-Bold-Blue-BGRed,\n.-Color-Bold-Magenta-BGRed,\n.-Color-Bold-Red-BGRed,\n.-Color-Bold-White-BGRed,\n.-Color-Bold-Yellow-BGRed,\n.-Color-Cyan-BGRed,\n.-Color-Green-BGRed,\n.-Color-Magenta-BGRed,\n.-Color-Red-BGRed,\n.-Color-White-BGRed,\n.-Color-Yellow-BGRed {\n    background-color: var(--ansi-red);\n}\n\n.-Color-BGGreen,\n.-Color-Black-BGGreen,\n.-Color-Blue-BGGreen,\n.-Color-Bold-BGGreen,\n.-Color-Bold-Black-BGGreen,\n.-Color-Bold-Green-BGGreen,\n.-Color-Bold-Cyan-BGGreen,\n.-Color-Bold-Blue-BGGreen,\n.-Color-Bold-Magenta-BGGreen,\n.-Color-Bold-Red-BGGreen,\n.-Color-Bold-White-BGGreen,\n.-Color-Bold-Yellow-BGGreen,\n.-Color-Cyan-BGGreen,\n.-Color-Green-BGGreen,\n.-Color-Magenta-BGGreen,\n.-Color-Red-BGGreen,\n.-Color-White-BGGreen,\n.-Color-Yellow-BGGreen {\n    background-color: var(--ansi-green);\n}\n\n.-Color-BGYellow,\n.-Color-Black-BGYellow,\n.-Color-Blue-BGYellow,\n.-Color-Bold-BGYellow,\n.-Color-Bold-Black-BGYellow,\n.-Color-Bold-Green-BGYellow,\n.-Color-Bold-Cyan-BGYellow,\n.-Color-Bold-Blue-BGYellow,\n.-Color-Bold-Magenta-BGYellow,\n.-Color-Bold-Red-BGYellow,\n.-Color-Bold-White-BGYellow,\n.-Color-Bold-Yellow-BGYellow,\n.-Color-Cyan-BGYellow,\n.-Color-Green-BGYellow,\n.-Color-Magenta-BGYellow,\n.-Color-Red-BGYellow,\n.-Color-White-BGYellow,\n.-Color-Yellow-BGYellow {\n    background-color: var(--ansi-yellow);\n}\n\n.-Color-BGBlue,\n.-Color-Black-BGBlue,\n.-Color-Blue-BGBlue,\n.-Color-Bold-BGBlue,\n.-Color-Bold-Black-BGBlue,\n.-Color-Bold-Green-BGBlue,\n.-Color-Bold-Cyan-BGBlue,\n.-Color-Bold-Blue-BGBlue,\n.-Color-Bold-Magenta-BGBlue,\n.-Color-Bold-Red-BGBlue,\n.-Color-Bold-White-BGBlue,\n.-Color-Bold-Yellow-BGBlue,\n.-Color-Cyan-BGBlue,\n.-Color-Green-BGBlue,\n.-Color-Magenta-BGBlue,\n.-Color-Red-BGBlue,\n.-Color-White-BGBlue,\n.-Color-Yellow-BGBlue {\n    background-color: var(--ansi-blue);\n}\n\n.-Color-BGMagenta,\n.-Color-Black-BGMagenta,\n.-Color-Blue-BGMagenta,\n.-Color-Bold-BGMagenta,\n.-Color-Bold-Black-BGMagenta,\n.-Color-Bold-Green-BGMagenta,\n.-Color-Bold-Cyan-BGMagenta,\n.-Color-Bold-Blue-BGMagenta,\n.-Color-Bold-Magenta-BGMagenta,\n.-Color-Bold-Red-BGMagenta,\n.-Color-Bold-White-BGMagenta,\n.-Color-Bold-Yellow-BGMagenta,\n.-Color-Cyan-BGMagenta,\n.-Color-Green-BGMagenta,\n.-Color-Magenta-BGMagenta,\n.-Color-Red-BGMagenta,\n.-Color-White-BGMagenta,\n.-Color-Yellow-BGMagenta {\n    background-color: var(--ansi-magenta);\n}\n\n.-Color-BGCyan,\n.-Color-Black-BGCyan,\n.-Color-Blue-BGCyan,\n.-Color-Bold-BGCyan,\n.-Color-Bold-Black-BGCyan,\n.-Color-Bold-Green-BGCyan,\n.-Color-Bold-Cyan-BGCyan,\n.-Color-Bold-Blue-BGCyan,\n.-Color-Bold-Magenta-BGCyan,\n.-Color-Bold-Red-BGCyan,\n.-Color-Bold-White-BGCyan,\n.-Color-Bold-Yellow-BGCyan,\n.-Color-Cyan-BGCyan,\n.-Color-Green-BGCyan,\n.-Color-Magenta-BGCyan,\n.-Color-Red-BGCyan,\n.-Color-White-BGCyan,\n.-Color-Yellow-BGCyan {\n    background-color: var(--ansi-cyan);\n}\n\n.-Color-BGWhite,\n.-Color-Black-BGWhite,\n.-Color-Blue-BGWhite,\n.-Color-Bold-BGWhite,\n.-Color-Bold-Black-BGWhite,\n.-Color-Bold-Green-BGWhite,\n.-Color-Bold-Cyan-BGWhite,\n.-Color-Bold-Blue-BGWhite,\n.-Color-Bold-Magenta-BGWhite,\n.-Color-Bold-Red-BGWhite,\n.-Color-Bold-White-BGWhite,\n.-Color-Bold-Yellow-BGWhite,\n.-Color-Cyan-BGWhite,\n.-Color-Green-BGWhite,\n.-Color-Magenta-BGWhite,\n.-Color-Red-BGWhite,\n.-Color-White-BGWhite,\n.-Color-Yellow-BGWhite {\n    background-color: var(--ansi-white);\n}\n\n.-Color-Black,\n.-Color-Bold-Black,\n.-Color-Black-BGBlack,\n.-Color-Bold-Black-BGBlack,\n.-Color-Black-BGGreen,\n.-Color-Red-BGRed,\n.-Color-Bold-Red-BGRed,\n.-Color-Bold-Blue-BGBlue,\n.-Color-Blue-BGBlue {\n    text-shadow: 0 0 1px var(--ansi-white);\n}\n\n.-Color-Bold-Cyan-BGCyan,\n.-Color-Bold-Magenta-BGMagenta,\n.-Color-Bold-White,\n.-Color-Bold-Yellow-BGYellow,\n.-Color-Bold-Green-BGGreen,\n.-Color-Cyan-BGCyan,\n.-Color-Cyan-BGGreen,\n.-Color-Green-BGCyan,\n.-Color-Green-BGGreen,\n.-Color-Magenta-BGMagenta,\n.-Color-White,\n.-Color-White-BGWhite,\n.-Color-Yellow-BGYellow {\n    text-shadow: 0 0 1px var(--ansi-black);\n}\n</code></pre> <p>Important</p> <p>We also recommend setting <code>ansi: required</code> in <code>mkdocs.yml</code> when using our MkDocs plugin and enabling ANSI support, to help tools like MkDocs and its <code>get-deps</code> command know that the <code>ansi</code> extra dependency is required.</p> <pre><code>plugins:\n- markdown-exec:\n    ansi: required\n</code></pre>"},{"location":"usage/tree/","title":"Tree","text":"<p>Markdown Exec provides a <code>tree</code> formatter that can be used to render file-system trees easily:</p> MarkdownRendered <pre><code>```tree\nroot1\n    file1\n    dir1\n        file\n    dir2\n        file1\n        file2\n    file2\n    file3\nroot2\n    file1\n```\n</code></pre> <pre><code>\ud83d\udcc1 root1\n\u251c\u2500\u2500  file1\n\u251c\u2500\u2500 \ud83d\udcc1 dir1\n\u2502   \u2514\u2500\u2500  file\n\u251c\u2500\u2500 \ud83d\udcc1 dir2\n\u2502   \u251c\u2500\u2500  file1\n\u2502   \u2514\u2500\u2500  file2\n\u251c\u2500\u2500  file2\n\u2514\u2500\u2500  file3\n\ud83d\udcc1 root2\n\u2514\u2500\u2500  file1\n</code></pre>"},{"location":"usage/tree/#syntax-highlight","title":"Syntax highlight","text":"<p>By default, the language used for syntax highlight is <code>bash</code>. It means you can add comments with <code>#</code>:</p> MarkdownRendered <pre><code>```tree\nroot1            # comment 1\n    file1\n    dir1\n        file\n    dir2\n        file1    # comment 2\n        file2    # comment 3\n    file2\n    file3\nroot2\n    file1\n```\n</code></pre> <pre><code>\ud83d\udcc1 root1            # comment 1\n\u251c\u2500\u2500  file1\n\u251c\u2500\u2500 \ud83d\udcc1 dir1\n\u2502   \u2514\u2500\u2500  file\n\u251c\u2500\u2500 \ud83d\udcc1 dir2\n\u2502   \u251c\u2500\u2500  file1    # comment 2\n\u2502   \u2514\u2500\u2500  file2    # comment 3\n\u251c\u2500\u2500  file2\n\u2514\u2500\u2500  file3\n\ud83d\udcc1 root2\n\u2514\u2500\u2500  file1\n</code></pre> <p>You can change the syntax highlight language with the <code>result</code> option:</p> MarkdownRendered <pre><code>```tree result=\"javascript\"\nroot1            // comment 1\n    file1\n    dir1\n        file\n    dir2\n        file1    // comment 2\n        file2    // comment 3\n    file2\n    file3\nroot2\n    file1\n```\n</code></pre> <pre><code>\ud83d\udcc1 root1            // comment 1\n\u251c\u2500\u2500  file1\n\u251c\u2500\u2500 \ud83d\udcc1 dir1\n\u2502   \u2514\u2500\u2500  file\n\u251c\u2500\u2500 \ud83d\udcc1 dir2\n\u2502   \u251c\u2500\u2500  file1    // comment 2\n\u2502   \u2514\u2500\u2500  file2    // comment 3\n\u251c\u2500\u2500  file2\n\u2514\u2500\u2500  file3\n\ud83d\udcc1 root2\n\u2514\u2500\u2500  file1\n</code></pre>"},{"location":"usage/tree/#leaf-directories","title":"Leaf directories","text":"<p>You can force an entry to be displayed as a directory instead of a regular file by appending a trailing slash to the name:</p> MarkdownRendered <pre><code>```tree\nroot1\n    dir1/\n    dir2/\n    dir3/\n```\n</code></pre> <pre><code>\ud83d\udcc1 root1\n\u251c\u2500\u2500 \ud83d\udcc1 dir1/\n\u251c\u2500\u2500 \ud83d\udcc1 dir2/\n\u2514\u2500\u2500 \ud83d\udcc1 dir3/\n</code></pre> <p>It is recommended to always append trailing slashes to directories anyway.</p> <p>Limitation:</p> <p> Spaces in file names are not supported when searching for a trailing slash.</p>"},{"location":"usage/tree/#custom-icons","title":"Custom icons","text":"<p> Sponsors only \u2014  Insiders 1.1.0</p> <p>Custom icons based on the file name and extension can be used in tree fences. This feature requires that the Material for MkDocs theme is used. By default, if Material for MkDocs is used, custom icons will be rendered. You can opt-out with <code>icons=\"basic\"</code> to use the basic folder and file emojis, or even remove all icons/emojis with <code>icons=\"none\"</code>.</p> MarkdownRendered <pre><code>```tree icons=\"none\"\nfolder/\n    file\n    file.py\n    file.rb\n    file.js\n```\n</code></pre> <pre><code>folder/\n\u251c\u2500\u2500 file\n\u251c\u2500\u2500 file.py\n\u251c\u2500\u2500 file.rb\n\u2514\u2500\u2500 file.js\n</code></pre> MarkdownRendered <pre><code>```tree icons=\"basic\"\nfolder/\n    file\n    file.py\n    file.rb\n    file.rs\n```\n</code></pre> <pre><code>\ud83d\udcc1 folder/\n\u251c\u2500\u2500 \ud83d\udcc4 file\n\u251c\u2500\u2500 \ud83d\udcc4 file.py\n\u251c\u2500\u2500 \ud83d\udcc4 file.rb\n\u2514\u2500\u2500 \ud83d\udcc4 file.rs\n</code></pre> MarkdownRendered <pre><code>```tree icons=\"material\"\nfolder/\n    file\n    file.py\n    file.rb\n    file.rs\n```\n</code></pre> <pre><code>\ud83d\udcc1 folder/\n\u251c\u2500\u2500  file\n\u251c\u2500\u2500  file.py\n\u251c\u2500\u2500  file.rb\n\u2514\u2500\u2500  file.rs\n</code></pre> MarkdownRendered <pre><code>```tree icons=\"auto\"\nfolder/\n    file\n    file.py\n    file.rb\n    file.rs\n```\n</code></pre> <pre><code>\ud83d\udcc1 folder/\n\u251c\u2500\u2500  file\n\u251c\u2500\u2500  file.py\n\u251c\u2500\u2500  file.rb\n\u2514\u2500\u2500  file.rs\n</code></pre>"},{"location":"coverage/","title":"Coverage report","text":""}]}